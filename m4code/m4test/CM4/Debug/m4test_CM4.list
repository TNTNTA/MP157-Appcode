
m4test_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  00000000  00000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009324  10000000  10000000  00020000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .startup_copro_fw.Reset_Handler 00000050  10009324  10009324  00029324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000104  10009374  10009374  00029374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  10009478  10009478  00030074  2**0
                  CONTENTS
  5 .ARM          00000000  10009478  10009478  00030074  2**0
                  CONTENTS
  6 .preinit_array 00000000  10009478  10009478  00030074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  10009478  10009478  00029478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  1000947c  1000947c  0002947c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000074  10020000  10009480  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .resource_table 00000000  10020074  10020074  00030074  2**0
                  CONTENTS
 11 .bss          00001a14  10020074  100094f4  00030074  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  10021a88  1000af08  00030074  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00030074  2**0
                  CONTENTS, READONLY
 14 .debug_info   00022553  00000000  00000000  000300a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 00003324  00000000  00000000  000525f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 000010d0  00000000  00000000  00055920  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000f88  00000000  00000000  000569f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  000391bb  00000000  00000000  00057978  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   0000fe46  00000000  00000000  00090b33  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    00161e35  00000000  00000000  000a0979  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  002027ae  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00004aa0  00000000  00000000  0020282c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

10000000 <__do_global_dtors_aux>:
10000000:	b510      	push	{r4, lr}
10000002:	4c05      	ldr	r4, [pc, #20]	; (10000018 <__do_global_dtors_aux+0x18>)
10000004:	7823      	ldrb	r3, [r4, #0]
10000006:	b933      	cbnz	r3, 10000016 <__do_global_dtors_aux+0x16>
10000008:	4b04      	ldr	r3, [pc, #16]	; (1000001c <__do_global_dtors_aux+0x1c>)
1000000a:	b113      	cbz	r3, 10000012 <__do_global_dtors_aux+0x12>
1000000c:	4804      	ldr	r0, [pc, #16]	; (10000020 <__do_global_dtors_aux+0x20>)
1000000e:	f3af 8000 	nop.w
10000012:	2301      	movs	r3, #1
10000014:	7023      	strb	r3, [r4, #0]
10000016:	bd10      	pop	{r4, pc}
10000018:	10020074 	.word	0x10020074
1000001c:	00000000 	.word	0x00000000
10000020:	1000930c 	.word	0x1000930c

10000024 <frame_dummy>:
10000024:	b508      	push	{r3, lr}
10000026:	4b03      	ldr	r3, [pc, #12]	; (10000034 <frame_dummy+0x10>)
10000028:	b11b      	cbz	r3, 10000032 <frame_dummy+0xe>
1000002a:	4903      	ldr	r1, [pc, #12]	; (10000038 <frame_dummy+0x14>)
1000002c:	4803      	ldr	r0, [pc, #12]	; (1000003c <frame_dummy+0x18>)
1000002e:	f3af 8000 	nop.w
10000032:	bd08      	pop	{r3, pc}
10000034:	00000000 	.word	0x00000000
10000038:	10020078 	.word	0x10020078
1000003c:	1000930c 	.word	0x1000930c

10000040 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
10000040:	b480      	push	{r7}
10000042:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if defined (CORE_CM4)
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
10000044:	4b0f      	ldr	r3, [pc, #60]	; (10000084 <SystemInit+0x44>)
10000046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
1000004a:	4a0e      	ldr	r2, [pc, #56]	; (10000084 <SystemInit+0x44>)
1000004c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
10000050:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (VECT_TAB_SRAM)
  SCB->VTOR = MCU_AHB_SRAM | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif
  /* Disable all interrupts and events */
  CLEAR_REG(EXTI_C2->IMR1);
10000054:	4b0c      	ldr	r3, [pc, #48]	; (10000088 <SystemInit+0x48>)
10000056:	2200      	movs	r2, #0
10000058:	601a      	str	r2, [r3, #0]
  CLEAR_REG(EXTI_C2->IMR2);
1000005a:	4b0b      	ldr	r3, [pc, #44]	; (10000088 <SystemInit+0x48>)
1000005c:	2200      	movs	r2, #0
1000005e:	611a      	str	r2, [r3, #16]
  CLEAR_REG(EXTI_C2->IMR3);
10000060:	4b09      	ldr	r3, [pc, #36]	; (10000088 <SystemInit+0x48>)
10000062:	2200      	movs	r2, #0
10000064:	621a      	str	r2, [r3, #32]
  CLEAR_REG(EXTI_C2->EMR1);
10000066:	4b08      	ldr	r3, [pc, #32]	; (10000088 <SystemInit+0x48>)
10000068:	2200      	movs	r2, #0
1000006a:	605a      	str	r2, [r3, #4]
  CLEAR_REG(EXTI_C2->EMR2);
1000006c:	4b06      	ldr	r3, [pc, #24]	; (10000088 <SystemInit+0x48>)
1000006e:	2200      	movs	r2, #0
10000070:	615a      	str	r2, [r3, #20]
  CLEAR_REG(EXTI_C2->EMR3);
10000072:	4b05      	ldr	r3, [pc, #20]	; (10000088 <SystemInit+0x48>)
10000074:	2200      	movs	r2, #0
10000076:	625a      	str	r2, [r3, #36]	; 0x24
#else
#error Please #define CORE_CM4
#endif	                         
}
10000078:	bf00      	nop
1000007a:	46bd      	mov	sp, r7
1000007c:	f85d 7b04 	ldr.w	r7, [sp], #4
10000080:	4770      	bx	lr
10000082:	bf00      	nop
10000084:	e000ed00 	.word	0xe000ed00
10000088:	5000d0c0 	.word	0x5000d0c0

1000008c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
1000008c:	b580      	push	{r7, lr}
1000008e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
10000090:	f000 fb00 	bl	10000694 <HAL_Init>

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  if(IS_ENGINEERING_BOOT_MODE())
10000094:	4b10      	ldr	r3, [pc, #64]	; (100000d8 <main+0x4c>)
10000096:	681b      	ldr	r3, [r3, #0]
10000098:	f003 0307 	and.w	r3, r3, #7
1000009c:	2b04      	cmp	r3, #4
1000009e:	d101      	bne.n	100000a4 <main+0x18>
  {
    /* Configure the system clock */
    SystemClock_Config();
100000a0:	f000 f828 	bl	100000f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
100000a4:	f000 f91e 	bl	100002e4 <MX_GPIO_Init>
  MX_UART7_Init();
100000a8:	f000 f8d0 	bl	1000024c <MX_UART7_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
100000ac:	f005 ff4e 	bl	10005f4c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
100000b0:	4a0a      	ldr	r2, [pc, #40]	; (100000dc <main+0x50>)
100000b2:	2100      	movs	r1, #0
100000b4:	480a      	ldr	r0, [pc, #40]	; (100000e0 <main+0x54>)
100000b6:	f005 ffb3 	bl	10006020 <osThreadNew>
100000ba:	4602      	mov	r2, r0
100000bc:	4b09      	ldr	r3, [pc, #36]	; (100000e4 <main+0x58>)
100000be:	601a      	str	r2, [r3, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
100000c0:	4a09      	ldr	r2, [pc, #36]	; (100000e8 <main+0x5c>)
100000c2:	2100      	movs	r1, #0
100000c4:	4809      	ldr	r0, [pc, #36]	; (100000ec <main+0x60>)
100000c6:	f005 ffab 	bl	10006020 <osThreadNew>
100000ca:	4602      	mov	r2, r0
100000cc:	4b08      	ldr	r3, [pc, #32]	; (100000f0 <main+0x64>)
100000ce:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
100000d0:	f005 ff70 	bl	10005fb4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
100000d4:	e7fe      	b.n	100000d4 <main+0x48>
100000d6:	bf00      	nop
100000d8:	50020000 	.word	0x50020000
100000dc:	100093cc 	.word	0x100093cc
100000e0:	10000391 	.word	0x10000391
100000e4:	100219a4 	.word	0x100219a4
100000e8:	100093f0 	.word	0x100093f0
100000ec:	100003a1 	.word	0x100003a1
100000f0:	10021a3c 	.word	0x10021a3c

100000f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
100000f4:	b580      	push	{r7, lr}
100000f6:	b0d2      	sub	sp, #328	; 0x148
100000f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
100000fa:	f107 0334 	add.w	r3, r7, #52	; 0x34
100000fe:	4618      	mov	r0, r3
10000100:	f44f 738a 	mov.w	r3, #276	; 0x114
10000104:	461a      	mov	r2, r3
10000106:	2100      	movs	r1, #0
10000108:	f008 fc8f 	bl	10008a2a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
1000010c:	1d3b      	adds	r3, r7, #4
1000010e:	4618      	mov	r0, r3
10000110:	2330      	movs	r3, #48	; 0x30
10000112:	461a      	mov	r2, r3
10000114:	2100      	movs	r1, #0
10000116:	f008 fc88 	bl	10008a2a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
1000011a:	f107 0334 	add.w	r3, r7, #52	; 0x34
1000011e:	220b      	movs	r2, #11
10000120:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
10000122:	f107 0334 	add.w	r3, r7, #52	; 0x34
10000126:	f44f 7280 	mov.w	r2, #256	; 0x100
1000012a:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
1000012c:	f107 0334 	add.w	r3, r7, #52	; 0x34
10000130:	2201      	movs	r2, #1
10000132:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = 16;
10000134:	f107 0334 	add.w	r3, r7, #52	; 0x34
10000138:	2210      	movs	r2, #16
1000013a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSIDivValue = RCC_HSI_DIV1;
1000013c:	f107 0334 	add.w	r3, r7, #52	; 0x34
10000140:	2200      	movs	r2, #0
10000142:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
10000144:	f107 0334 	add.w	r3, r7, #52	; 0x34
10000148:	2201      	movs	r2, #1
1000014a:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
1000014c:	f107 0334 	add.w	r3, r7, #52	; 0x34
10000150:	2200      	movs	r2, #0
10000152:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL2.PLLState = RCC_PLL_NONE;
10000154:	f107 0334 	add.w	r3, r7, #52	; 0x34
10000158:	2200      	movs	r2, #0
1000015a:	661a      	str	r2, [r3, #96]	; 0x60
  RCC_OscInitStruct.PLL3.PLLState = RCC_PLL_ON;
1000015c:	f107 0334 	add.w	r3, r7, #52	; 0x34
10000160:	2202      	movs	r2, #2
10000162:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  RCC_OscInitStruct.PLL3.PLLSource = RCC_PLL3SOURCE_HSE;
10000166:	f107 0334 	add.w	r3, r7, #52	; 0x34
1000016a:	2201      	movs	r2, #1
1000016c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  RCC_OscInitStruct.PLL3.PLLM = 2;
10000170:	f107 0334 	add.w	r3, r7, #52	; 0x34
10000174:	2202      	movs	r2, #2
10000176:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  RCC_OscInitStruct.PLL3.PLLN = 52;
1000017a:	f107 0334 	add.w	r3, r7, #52	; 0x34
1000017e:	2234      	movs	r2, #52	; 0x34
10000180:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  RCC_OscInitStruct.PLL3.PLLP = 3;
10000184:	f107 0334 	add.w	r3, r7, #52	; 0x34
10000188:	2203      	movs	r2, #3
1000018a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  RCC_OscInitStruct.PLL3.PLLQ = 2;
1000018e:	f107 0334 	add.w	r3, r7, #52	; 0x34
10000192:	2202      	movs	r2, #2
10000194:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  RCC_OscInitStruct.PLL3.PLLR = 2;
10000198:	f107 0334 	add.w	r3, r7, #52	; 0x34
1000019c:	2202      	movs	r2, #2
1000019e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  RCC_OscInitStruct.PLL3.PLLRGE = RCC_PLL3IFRANGE_1;
100001a2:	f107 0334 	add.w	r3, r7, #52	; 0x34
100001a6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
100001aa:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  RCC_OscInitStruct.PLL3.PLLFRACV = 2048;
100001ae:	f107 0334 	add.w	r3, r7, #52	; 0x34
100001b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
100001b6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  RCC_OscInitStruct.PLL3.PLLMODE = RCC_PLL_FRACTIONAL;
100001ba:	f107 0334 	add.w	r3, r7, #52	; 0x34
100001be:	2201      	movs	r2, #1
100001c0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  RCC_OscInitStruct.PLL4.PLLState = RCC_PLL_NONE;
100001c4:	f107 0334 	add.w	r3, r7, #52	; 0x34
100001c8:	2200      	movs	r2, #0
100001ca:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
100001ce:	f107 0334 	add.w	r3, r7, #52	; 0x34
100001d2:	4618      	mov	r0, r3
100001d4:	f000 fd76 	bl	10000cc4 <HAL_RCC_OscConfig>
100001d8:	4603      	mov	r3, r0
100001da:	2b00      	cmp	r3, #0
100001dc:	d001      	beq.n	100001e2 <SystemClock_Config+0xee>
  {
    Error_Handler();
100001de:	f000 f903 	bl	100003e8 <Error_Handler>
  }
  /** RCC Clock Config
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_ACLK
100001e2:	1d3b      	adds	r3, r7, #4
100001e4:	22fe      	movs	r2, #254	; 0xfe
100001e6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3|RCC_CLOCKTYPE_PCLK4
                              |RCC_CLOCKTYPE_PCLK5;
  RCC_ClkInitStruct.AXISSInit.AXI_Clock = RCC_AXISSOURCE_HSI;
100001e8:	1d3b      	adds	r3, r7, #4
100001ea:	2200      	movs	r2, #0
100001ec:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.AXISSInit.AXI_Div = RCC_AXI_DIV1;
100001ee:	1d3b      	adds	r3, r7, #4
100001f0:	2200      	movs	r2, #0
100001f2:	611a      	str	r2, [r3, #16]
  RCC_ClkInitStruct.MCUInit.MCU_Clock = RCC_MCUSSOURCE_PLL3;
100001f4:	1d3b      	adds	r3, r7, #4
100001f6:	2203      	movs	r2, #3
100001f8:	615a      	str	r2, [r3, #20]
  RCC_ClkInitStruct.MCUInit.MCU_Div = RCC_MCU_DIV1;
100001fa:	1d3b      	adds	r3, r7, #4
100001fc:	2200      	movs	r2, #0
100001fe:	619a      	str	r2, [r3, #24]
  RCC_ClkInitStruct.APB4_Div = RCC_APB4_DIV1;
10000200:	1d3b      	adds	r3, r7, #4
10000202:	2200      	movs	r2, #0
10000204:	61da      	str	r2, [r3, #28]
  RCC_ClkInitStruct.APB5_Div = RCC_APB5_DIV1;
10000206:	1d3b      	adds	r3, r7, #4
10000208:	2200      	movs	r2, #0
1000020a:	621a      	str	r2, [r3, #32]
  RCC_ClkInitStruct.APB1_Div = RCC_APB1_DIV2;
1000020c:	1d3b      	adds	r3, r7, #4
1000020e:	2201      	movs	r2, #1
10000210:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_ClkInitStruct.APB2_Div = RCC_APB2_DIV2;
10000212:	1d3b      	adds	r3, r7, #4
10000214:	2201      	movs	r2, #1
10000216:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_ClkInitStruct.APB3_Div = RCC_APB3_DIV2;
10000218:	1d3b      	adds	r3, r7, #4
1000021a:	2201      	movs	r2, #1
1000021c:	62da      	str	r2, [r3, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct) != HAL_OK)
1000021e:	1d3b      	adds	r3, r7, #4
10000220:	4618      	mov	r0, r3
10000222:	f001 faeb 	bl	100017fc <HAL_RCC_ClockConfig>
10000226:	4603      	mov	r3, r0
10000228:	2b00      	cmp	r3, #0
1000022a:	d001      	beq.n	10000230 <SystemClock_Config+0x13c>
  {
    Error_Handler();
1000022c:	f000 f8dc 	bl	100003e8 <Error_Handler>
  }
  /** Set the HSE division factor for RTC clock
  */
  __HAL_RCC_RTC_HSEDIV(1);
10000230:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
10000236:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000023a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
1000023e:	6453      	str	r3, [r2, #68]	; 0x44
}
10000240:	bf00      	nop
10000242:	f507 77a4 	add.w	r7, r7, #328	; 0x148
10000246:	46bd      	mov	sp, r7
10000248:	bd80      	pop	{r7, pc}
	...

1000024c <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
1000024c:	b580      	push	{r7, lr}
1000024e:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
10000250:	4b22      	ldr	r3, [pc, #136]	; (100002dc <MX_UART7_Init+0x90>)
10000252:	4a23      	ldr	r2, [pc, #140]	; (100002e0 <MX_UART7_Init+0x94>)
10000254:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
10000256:	4b21      	ldr	r3, [pc, #132]	; (100002dc <MX_UART7_Init+0x90>)
10000258:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
1000025c:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
1000025e:	4b1f      	ldr	r3, [pc, #124]	; (100002dc <MX_UART7_Init+0x90>)
10000260:	2200      	movs	r2, #0
10000262:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
10000264:	4b1d      	ldr	r3, [pc, #116]	; (100002dc <MX_UART7_Init+0x90>)
10000266:	2200      	movs	r2, #0
10000268:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
1000026a:	4b1c      	ldr	r3, [pc, #112]	; (100002dc <MX_UART7_Init+0x90>)
1000026c:	2200      	movs	r2, #0
1000026e:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
10000270:	4b1a      	ldr	r3, [pc, #104]	; (100002dc <MX_UART7_Init+0x90>)
10000272:	220c      	movs	r2, #12
10000274:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
10000276:	4b19      	ldr	r3, [pc, #100]	; (100002dc <MX_UART7_Init+0x90>)
10000278:	2200      	movs	r2, #0
1000027a:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
1000027c:	4b17      	ldr	r3, [pc, #92]	; (100002dc <MX_UART7_Init+0x90>)
1000027e:	2200      	movs	r2, #0
10000280:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
10000282:	4b16      	ldr	r3, [pc, #88]	; (100002dc <MX_UART7_Init+0x90>)
10000284:	2200      	movs	r2, #0
10000286:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
10000288:	4b14      	ldr	r3, [pc, #80]	; (100002dc <MX_UART7_Init+0x90>)
1000028a:	2200      	movs	r2, #0
1000028c:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
1000028e:	4b13      	ldr	r3, [pc, #76]	; (100002dc <MX_UART7_Init+0x90>)
10000290:	2200      	movs	r2, #0
10000292:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
10000294:	4811      	ldr	r0, [pc, #68]	; (100002dc <MX_UART7_Init+0x90>)
10000296:	f004 fa0d 	bl	100046b4 <HAL_UART_Init>
1000029a:	4603      	mov	r3, r0
1000029c:	2b00      	cmp	r3, #0
1000029e:	d001      	beq.n	100002a4 <MX_UART7_Init+0x58>
  {
    Error_Handler();
100002a0:	f000 f8a2 	bl	100003e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
100002a4:	2100      	movs	r1, #0
100002a6:	480d      	ldr	r0, [pc, #52]	; (100002dc <MX_UART7_Init+0x90>)
100002a8:	f005 fd63 	bl	10005d72 <HAL_UARTEx_SetTxFifoThreshold>
100002ac:	4603      	mov	r3, r0
100002ae:	2b00      	cmp	r3, #0
100002b0:	d001      	beq.n	100002b6 <MX_UART7_Init+0x6a>
  {
    Error_Handler();
100002b2:	f000 f899 	bl	100003e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
100002b6:	2100      	movs	r1, #0
100002b8:	4808      	ldr	r0, [pc, #32]	; (100002dc <MX_UART7_Init+0x90>)
100002ba:	f005 fd98 	bl	10005dee <HAL_UARTEx_SetRxFifoThreshold>
100002be:	4603      	mov	r3, r0
100002c0:	2b00      	cmp	r3, #0
100002c2:	d001      	beq.n	100002c8 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
100002c4:	f000 f890 	bl	100003e8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
100002c8:	4804      	ldr	r0, [pc, #16]	; (100002dc <MX_UART7_Init+0x90>)
100002ca:	f005 fd19 	bl	10005d00 <HAL_UARTEx_DisableFifoMode>
100002ce:	4603      	mov	r3, r0
100002d0:	2b00      	cmp	r3, #0
100002d2:	d001      	beq.n	100002d8 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
100002d4:	f000 f888 	bl	100003e8 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
100002d8:	bf00      	nop
100002da:	bd80      	pop	{r7, pc}
100002dc:	100219a8 	.word	0x100219a8
100002e0:	40018000 	.word	0x40018000

100002e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
100002e4:	b580      	push	{r7, lr}
100002e6:	b086      	sub	sp, #24
100002e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
100002ea:	1d3b      	adds	r3, r7, #4
100002ec:	2200      	movs	r2, #0
100002ee:	601a      	str	r2, [r3, #0]
100002f0:	605a      	str	r2, [r3, #4]
100002f2:	609a      	str	r2, [r3, #8]
100002f4:	60da      	str	r2, [r3, #12]
100002f6:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
100002f8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100002fc:	f44f 7280 	mov.w	r2, #256	; 0x100
10000300:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
  __HAL_RCC_GPIOH_CLK_ENABLE();
10000304:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000308:	2280      	movs	r2, #128	; 0x80
1000030a:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
  __HAL_RCC_GPIOF_CLK_ENABLE();
1000030e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000312:	2220      	movs	r2, #32
10000314:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
10000318:	2301      	movs	r3, #1
1000031a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
1000031c:	2301      	movs	r3, #1
1000031e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
10000320:	2301      	movs	r3, #1
10000322:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
10000324:	2303      	movs	r3, #3
10000326:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
10000328:	1d3b      	adds	r3, r7, #4
1000032a:	4619      	mov	r1, r3
1000032c:	4809      	ldr	r0, [pc, #36]	; (10000354 <MX_GPIO_Init+0x70>)
1000032e:	f000 fb07 	bl	10000940 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
10000332:	2308      	movs	r3, #8
10000334:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
10000336:	2301      	movs	r3, #1
10000338:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
1000033a:	2301      	movs	r3, #1
1000033c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
1000033e:	2302      	movs	r3, #2
10000340:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
10000342:	1d3b      	adds	r3, r7, #4
10000344:	4619      	mov	r1, r3
10000346:	4804      	ldr	r0, [pc, #16]	; (10000358 <MX_GPIO_Init+0x74>)
10000348:	f000 fafa 	bl	10000940 <HAL_GPIO_Init>

}
1000034c:	bf00      	nop
1000034e:	3718      	adds	r7, #24
10000350:	46bd      	mov	sp, r7
10000352:	bd80      	pop	{r7, pc}
10000354:	5000a000 	.word	0x5000a000
10000358:	50007000 	.word	0x50007000

1000035c <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
1000035c:	b480      	push	{r7}
1000035e:	b083      	sub	sp, #12
10000360:	af00      	add	r7, sp, #0
10000362:	6078      	str	r0, [r7, #4]
/* 本实验使用的是 UART7，如果使用的是其它串口，则将 UART7 改为对应的串口即可 */
while ((UART7->ISR & 0X40) == 0);
10000364:	bf00      	nop
10000366:	4b09      	ldr	r3, [pc, #36]	; (1000038c <__io_putchar+0x30>)
10000368:	69db      	ldr	r3, [r3, #28]
1000036a:	f003 0340 	and.w	r3, r3, #64	; 0x40
1000036e:	2b00      	cmp	r3, #0
10000370:	d0f9      	beq.n	10000366 <__io_putchar+0xa>
UART7->TDR = (uint8_t) ch;
10000372:	687b      	ldr	r3, [r7, #4]
10000374:	b2da      	uxtb	r2, r3
10000376:	4b05      	ldr	r3, [pc, #20]	; (1000038c <__io_putchar+0x30>)
10000378:	b292      	uxth	r2, r2
1000037a:	851a      	strh	r2, [r3, #40]	; 0x28
return ch;
1000037c:	687b      	ldr	r3, [r7, #4]
}
1000037e:	4618      	mov	r0, r3
10000380:	370c      	adds	r7, #12
10000382:	46bd      	mov	sp, r7
10000384:	f85d 7b04 	ldr.w	r7, [sp], #4
10000388:	4770      	bx	lr
1000038a:	bf00      	nop
1000038c:	40018000 	.word	0x40018000

10000390 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
10000390:	b580      	push	{r7, lr}
10000392:	b082      	sub	sp, #8
10000394:	af00      	add	r7, sp, #0
10000396:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
10000398:	2001      	movs	r0, #1
1000039a:	f005 fee7 	bl	1000616c <osDelay>
1000039e:	e7fb      	b.n	10000398 <StartDefaultTask+0x8>

100003a0 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
100003a0:	b580      	push	{r7, lr}
100003a2:	b082      	sub	sp, #8
100003a4:	af00      	add	r7, sp, #0
100003a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	printf("\nLED ON\r\n");
100003a8:	480c      	ldr	r0, [pc, #48]	; (100003dc <StartTask02+0x3c>)
100003aa:	f008 fba3 	bl	10008af4 <puts>
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
100003ae:	2201      	movs	r2, #1
100003b0:	2101      	movs	r1, #1
100003b2:	480b      	ldr	r0, [pc, #44]	; (100003e0 <StartTask02+0x40>)
100003b4:	f000 fc6c 	bl	10000c90 <HAL_GPIO_WritePin>
    osDelay(1000);
100003b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
100003bc:	f005 fed6 	bl	1000616c <osDelay>
    printf("\nLED OFF\r\n");
100003c0:	4808      	ldr	r0, [pc, #32]	; (100003e4 <StartTask02+0x44>)
100003c2:	f008 fb97 	bl	10008af4 <puts>
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
100003c6:	2200      	movs	r2, #0
100003c8:	2101      	movs	r1, #1
100003ca:	4805      	ldr	r0, [pc, #20]	; (100003e0 <StartTask02+0x40>)
100003cc:	f000 fc60 	bl	10000c90 <HAL_GPIO_WritePin>
    osDelay(1000);
100003d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
100003d4:	f005 feca 	bl	1000616c <osDelay>
	printf("\nLED ON\r\n");
100003d8:	e7e6      	b.n	100003a8 <StartTask02+0x8>
100003da:	bf00      	nop
100003dc:	1000938c 	.word	0x1000938c
100003e0:	5000a000 	.word	0x5000a000
100003e4:	10009398 	.word	0x10009398

100003e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
100003e8:	b480      	push	{r7}
100003ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
100003ec:	bf00      	nop
100003ee:	46bd      	mov	sp, r7
100003f0:	f85d 7b04 	ldr.w	r7, [sp], #4
100003f4:	4770      	bx	lr

100003f6 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
100003f6:	b480      	push	{r7}
100003f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
100003fa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100003fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
10000402:	f8c3 2aa0 	str.w	r2, [r3, #2720]	; 0xaa0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
10000406:	bf00      	nop
10000408:	46bd      	mov	sp, r7
1000040a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000040e:	4770      	bx	lr

10000410 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
10000410:	b590      	push	{r4, r7, lr}
10000412:	b0df      	sub	sp, #380	; 0x17c
10000414:	af00      	add	r7, sp, #0
10000416:	1d3b      	adds	r3, r7, #4
10000418:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
1000041a:	f507 73b2 	add.w	r3, r7, #356	; 0x164
1000041e:	2200      	movs	r2, #0
10000420:	601a      	str	r2, [r3, #0]
10000422:	605a      	str	r2, [r3, #4]
10000424:	609a      	str	r2, [r3, #8]
10000426:	60da      	str	r2, [r3, #12]
10000428:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
1000042a:	f107 0308 	add.w	r3, r7, #8
1000042e:	4618      	mov	r0, r3
10000430:	f44f 73ac 	mov.w	r3, #344	; 0x158
10000434:	461a      	mov	r2, r3
10000436:	2100      	movs	r1, #0
10000438:	f008 faf7 	bl	10008a2a <memset>
  if(huart->Instance==UART7)
1000043c:	1d3b      	adds	r3, r7, #4
1000043e:	681b      	ldr	r3, [r3, #0]
10000440:	681b      	ldr	r3, [r3, #0]
10000442:	4a2b      	ldr	r2, [pc, #172]	; (100004f0 <HAL_UART_MspInit+0xe0>)
10000444:	4293      	cmp	r3, r2
10000446:	d14e      	bne.n	100004e6 <HAL_UART_MspInit+0xd6>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
  if(IS_ENGINEERING_BOOT_MODE())
10000448:	4b2a      	ldr	r3, [pc, #168]	; (100004f4 <HAL_UART_MspInit+0xe4>)
1000044a:	681b      	ldr	r3, [r3, #0]
1000044c:	f003 0307 	and.w	r3, r3, #7
10000450:	2b04      	cmp	r3, #4
10000452:	d116      	bne.n	10000482 <HAL_UART_MspInit+0x72>
  {
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART78;
10000454:	f107 0208 	add.w	r2, r7, #8
10000458:	f44f 4300 	mov.w	r3, #32768	; 0x8000
1000045c:	f04f 0400 	mov.w	r4, #0
10000460:	e9c2 3400 	strd	r3, r4, [r2]
    PeriphClkInit.Uart78ClockSelection = RCC_UART78CLKSOURCE_PCLK1;
10000464:	f107 0308 	add.w	r3, r7, #8
10000468:	2200      	movs	r2, #0
1000046a:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
1000046e:	f107 0308 	add.w	r3, r7, #8
10000472:	4618      	mov	r0, r3
10000474:	f002 fcb8 	bl	10002de8 <HAL_RCCEx_PeriphCLKConfig>
10000478:	4603      	mov	r3, r0
1000047a:	2b00      	cmp	r3, #0
1000047c:	d001      	beq.n	10000482 <HAL_UART_MspInit+0x72>
    {
      Error_Handler();
1000047e:	f7ff ffb3 	bl	100003e8 <Error_Handler>
    }

  }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
10000482:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000486:	f44f 2280 	mov.w	r2, #262144	; 0x40000
1000048a:	f8c3 2a80 	str.w	r2, [r3, #2688]	; 0xa80

    __HAL_RCC_GPIOF_CLK_ENABLE();
1000048e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000492:	2220      	movs	r2, #32
10000494:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
    /**UART7 GPIO Configuration
    PF7     ------> UART7_TX
    PF6     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = UART7_TX_Pin;
10000498:	2380      	movs	r3, #128	; 0x80
1000049a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
1000049e:	2302      	movs	r3, #2
100004a0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
    GPIO_InitStruct.Pull = GPIO_PULLUP;
100004a4:	2301      	movs	r3, #1
100004a6:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
100004aa:	2300      	movs	r3, #0
100004ac:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
100004b0:	2307      	movs	r3, #7
100004b2:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
    HAL_GPIO_Init(UART7_TX_GPIO_Port, &GPIO_InitStruct);
100004b6:	f507 73b2 	add.w	r3, r7, #356	; 0x164
100004ba:	4619      	mov	r1, r3
100004bc:	480e      	ldr	r0, [pc, #56]	; (100004f8 <HAL_UART_MspInit+0xe8>)
100004be:	f000 fa3f 	bl	10000940 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = UART7_RX_Pin;
100004c2:	2340      	movs	r3, #64	; 0x40
100004c4:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    GPIO_InitStruct.Mode = GPIO_MODE_AF;
100004c8:	2302      	movs	r3, #2
100004ca:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
    GPIO_InitStruct.Pull = GPIO_PULLUP;
100004ce:	2301      	movs	r3, #1
100004d0:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
100004d4:	2307      	movs	r3, #7
100004d6:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
    HAL_GPIO_Init(UART7_RX_GPIO_Port, &GPIO_InitStruct);
100004da:	f507 73b2 	add.w	r3, r7, #356	; 0x164
100004de:	4619      	mov	r1, r3
100004e0:	4805      	ldr	r0, [pc, #20]	; (100004f8 <HAL_UART_MspInit+0xe8>)
100004e2:	f000 fa2d 	bl	10000940 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
100004e6:	bf00      	nop
100004e8:	f507 77be 	add.w	r7, r7, #380	; 0x17c
100004ec:	46bd      	mov	sp, r7
100004ee:	bd90      	pop	{r4, r7, pc}
100004f0:	40018000 	.word	0x40018000
100004f4:	50020000 	.word	0x50020000
100004f8:	50007000 	.word	0x50007000

100004fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
100004fc:	b480      	push	{r7}
100004fe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
10000500:	bf00      	nop
10000502:	46bd      	mov	sp, r7
10000504:	f85d 7b04 	ldr.w	r7, [sp], #4
10000508:	4770      	bx	lr

1000050a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
1000050a:	b480      	push	{r7}
1000050c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
1000050e:	e7fe      	b.n	1000050e <HardFault_Handler+0x4>

10000510 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
10000510:	b480      	push	{r7}
10000512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
10000514:	e7fe      	b.n	10000514 <MemManage_Handler+0x4>

10000516 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
10000516:	b480      	push	{r7}
10000518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
1000051a:	e7fe      	b.n	1000051a <BusFault_Handler+0x4>

1000051c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
1000051c:	b480      	push	{r7}
1000051e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
10000520:	e7fe      	b.n	10000520 <UsageFault_Handler+0x4>

10000522 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
10000522:	b480      	push	{r7}
10000524:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
10000526:	bf00      	nop
10000528:	46bd      	mov	sp, r7
1000052a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000052e:	4770      	bx	lr

10000530 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
10000530:	b580      	push	{r7, lr}
10000532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
10000534:	f000 f8fe 	bl	10000734 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
10000538:	f007 fe1e 	bl	10008178 <xTaskGetSchedulerState>
1000053c:	4603      	mov	r3, r0
1000053e:	2b01      	cmp	r3, #1
10000540:	d001      	beq.n	10000546 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
10000542:	f006 fab1 	bl	10006aa8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
10000546:	bf00      	nop
10000548:	bd80      	pop	{r7, pc}

1000054a <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
1000054a:	b580      	push	{r7, lr}
1000054c:	b086      	sub	sp, #24
1000054e:	af00      	add	r7, sp, #0
10000550:	60f8      	str	r0, [r7, #12]
10000552:	60b9      	str	r1, [r7, #8]
10000554:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
10000556:	2300      	movs	r3, #0
10000558:	617b      	str	r3, [r7, #20]
1000055a:	e00a      	b.n	10000572 <_read+0x28>
	{
		*ptr++ = __io_getchar();
1000055c:	f3af 8000 	nop.w
10000560:	4601      	mov	r1, r0
10000562:	68bb      	ldr	r3, [r7, #8]
10000564:	1c5a      	adds	r2, r3, #1
10000566:	60ba      	str	r2, [r7, #8]
10000568:	b2ca      	uxtb	r2, r1
1000056a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
1000056c:	697b      	ldr	r3, [r7, #20]
1000056e:	3301      	adds	r3, #1
10000570:	617b      	str	r3, [r7, #20]
10000572:	697a      	ldr	r2, [r7, #20]
10000574:	687b      	ldr	r3, [r7, #4]
10000576:	429a      	cmp	r2, r3
10000578:	dbf0      	blt.n	1000055c <_read+0x12>
	}

return len;
1000057a:	687b      	ldr	r3, [r7, #4]
}
1000057c:	4618      	mov	r0, r3
1000057e:	3718      	adds	r7, #24
10000580:	46bd      	mov	sp, r7
10000582:	bd80      	pop	{r7, pc}

10000584 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
10000584:	b580      	push	{r7, lr}
10000586:	b086      	sub	sp, #24
10000588:	af00      	add	r7, sp, #0
1000058a:	60f8      	str	r0, [r7, #12]
1000058c:	60b9      	str	r1, [r7, #8]
1000058e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
10000590:	2300      	movs	r3, #0
10000592:	617b      	str	r3, [r7, #20]
10000594:	e009      	b.n	100005aa <_write+0x26>
	{
		__io_putchar(*ptr++);
10000596:	68bb      	ldr	r3, [r7, #8]
10000598:	1c5a      	adds	r2, r3, #1
1000059a:	60ba      	str	r2, [r7, #8]
1000059c:	781b      	ldrb	r3, [r3, #0]
1000059e:	4618      	mov	r0, r3
100005a0:	f7ff fedc 	bl	1000035c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
100005a4:	697b      	ldr	r3, [r7, #20]
100005a6:	3301      	adds	r3, #1
100005a8:	617b      	str	r3, [r7, #20]
100005aa:	697a      	ldr	r2, [r7, #20]
100005ac:	687b      	ldr	r3, [r7, #4]
100005ae:	429a      	cmp	r2, r3
100005b0:	dbf1      	blt.n	10000596 <_write+0x12>
	}
	return len;
100005b2:	687b      	ldr	r3, [r7, #4]
}
100005b4:	4618      	mov	r0, r3
100005b6:	3718      	adds	r7, #24
100005b8:	46bd      	mov	sp, r7
100005ba:	bd80      	pop	{r7, pc}

100005bc <_close>:

int _close(int file)
{
100005bc:	b480      	push	{r7}
100005be:	b083      	sub	sp, #12
100005c0:	af00      	add	r7, sp, #0
100005c2:	6078      	str	r0, [r7, #4]
	return -1;
100005c4:	f04f 33ff 	mov.w	r3, #4294967295
}
100005c8:	4618      	mov	r0, r3
100005ca:	370c      	adds	r7, #12
100005cc:	46bd      	mov	sp, r7
100005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
100005d2:	4770      	bx	lr

100005d4 <_fstat>:


int _fstat(int file, struct stat *st)
{
100005d4:	b480      	push	{r7}
100005d6:	b083      	sub	sp, #12
100005d8:	af00      	add	r7, sp, #0
100005da:	6078      	str	r0, [r7, #4]
100005dc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
100005de:	683b      	ldr	r3, [r7, #0]
100005e0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
100005e4:	605a      	str	r2, [r3, #4]
	return 0;
100005e6:	2300      	movs	r3, #0
}
100005e8:	4618      	mov	r0, r3
100005ea:	370c      	adds	r7, #12
100005ec:	46bd      	mov	sp, r7
100005ee:	f85d 7b04 	ldr.w	r7, [sp], #4
100005f2:	4770      	bx	lr

100005f4 <_isatty>:

int _isatty(int file)
{
100005f4:	b480      	push	{r7}
100005f6:	b083      	sub	sp, #12
100005f8:	af00      	add	r7, sp, #0
100005fa:	6078      	str	r0, [r7, #4]
	return 1;
100005fc:	2301      	movs	r3, #1
}
100005fe:	4618      	mov	r0, r3
10000600:	370c      	adds	r7, #12
10000602:	46bd      	mov	sp, r7
10000604:	f85d 7b04 	ldr.w	r7, [sp], #4
10000608:	4770      	bx	lr

1000060a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
1000060a:	b480      	push	{r7}
1000060c:	b085      	sub	sp, #20
1000060e:	af00      	add	r7, sp, #0
10000610:	60f8      	str	r0, [r7, #12]
10000612:	60b9      	str	r1, [r7, #8]
10000614:	607a      	str	r2, [r7, #4]
	return 0;
10000616:	2300      	movs	r3, #0
}
10000618:	4618      	mov	r0, r3
1000061a:	3714      	adds	r7, #20
1000061c:	46bd      	mov	sp, r7
1000061e:	f85d 7b04 	ldr.w	r7, [sp], #4
10000622:	4770      	bx	lr

10000624 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
10000624:	b580      	push	{r7, lr}
10000626:	b086      	sub	sp, #24
10000628:	af00      	add	r7, sp, #0
1000062a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
1000062c:	4a14      	ldr	r2, [pc, #80]	; (10000680 <_sbrk+0x5c>)
1000062e:	4b15      	ldr	r3, [pc, #84]	; (10000684 <_sbrk+0x60>)
10000630:	1ad3      	subs	r3, r2, r3
10000632:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
10000634:	697b      	ldr	r3, [r7, #20]
10000636:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
10000638:	4b13      	ldr	r3, [pc, #76]	; (10000688 <_sbrk+0x64>)
1000063a:	681b      	ldr	r3, [r3, #0]
1000063c:	2b00      	cmp	r3, #0
1000063e:	d102      	bne.n	10000646 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
10000640:	4b11      	ldr	r3, [pc, #68]	; (10000688 <_sbrk+0x64>)
10000642:	4a12      	ldr	r2, [pc, #72]	; (1000068c <_sbrk+0x68>)
10000644:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
10000646:	4b10      	ldr	r3, [pc, #64]	; (10000688 <_sbrk+0x64>)
10000648:	681a      	ldr	r2, [r3, #0]
1000064a:	687b      	ldr	r3, [r7, #4]
1000064c:	4413      	add	r3, r2
1000064e:	693a      	ldr	r2, [r7, #16]
10000650:	429a      	cmp	r2, r3
10000652:	d207      	bcs.n	10000664 <_sbrk+0x40>
  {
    errno = ENOMEM;
10000654:	f008 f9b4 	bl	100089c0 <__errno>
10000658:	4602      	mov	r2, r0
1000065a:	230c      	movs	r3, #12
1000065c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
1000065e:	f04f 33ff 	mov.w	r3, #4294967295
10000662:	e009      	b.n	10000678 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
10000664:	4b08      	ldr	r3, [pc, #32]	; (10000688 <_sbrk+0x64>)
10000666:	681b      	ldr	r3, [r3, #0]
10000668:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
1000066a:	4b07      	ldr	r3, [pc, #28]	; (10000688 <_sbrk+0x64>)
1000066c:	681a      	ldr	r2, [r3, #0]
1000066e:	687b      	ldr	r3, [r7, #4]
10000670:	4413      	add	r3, r2
10000672:	4a05      	ldr	r2, [pc, #20]	; (10000688 <_sbrk+0x64>)
10000674:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
10000676:	68fb      	ldr	r3, [r7, #12]
}
10000678:	4618      	mov	r0, r3
1000067a:	3718      	adds	r7, #24
1000067c:	46bd      	mov	sp, r7
1000067e:	bd80      	pop	{r7, pc}
10000680:	10040000 	.word	0x10040000
10000684:	00000400 	.word	0x00000400
10000688:	10020090 	.word	0x10020090
1000068c:	10021a88 	.word	0x10021a88

10000690 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
10000690:	e7fe      	b.n	10000690 <ADC1_IRQHandler>
	...

10000694 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
10000694:	b580      	push	{r7, lr}
10000696:	af00      	add	r7, sp, #0
  /* Set Interrupt Group Priority */
#if defined (CORE_CM4)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
10000698:	2003      	movs	r0, #3
1000069a:	f000 f91d 	bl	100008d8 <HAL_NVIC_SetPriorityGrouping>
#endif

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSystemCoreClockFreq();
1000069e:	f001 fee1 	bl	10002464 <HAL_RCC_GetSystemCoreClockFreq>
100006a2:	4602      	mov	r2, r0
100006a4:	4b07      	ldr	r3, [pc, #28]	; (100006c4 <HAL_Init+0x30>)
100006a6:	601a      	str	r2, [r3, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
100006a8:	2000      	movs	r0, #0
100006aa:	f000 f80d 	bl	100006c8 <HAL_InitTick>
100006ae:	4603      	mov	r3, r0
100006b0:	2b00      	cmp	r3, #0
100006b2:	d001      	beq.n	100006b8 <HAL_Init+0x24>
  {
    return HAL_ERROR;
100006b4:	2301      	movs	r3, #1
100006b6:	e002      	b.n	100006be <HAL_Init+0x2a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
100006b8:	f7ff fe9d 	bl	100003f6 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
100006bc:	2300      	movs	r3, #0
}
100006be:	4618      	mov	r0, r3
100006c0:	bd80      	pop	{r7, pc}
100006c2:	bf00      	nop
100006c4:	10020000 	.word	0x10020000

100006c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
100006c8:	b580      	push	{r7, lr}
100006ca:	b082      	sub	sp, #8
100006cc:	af00      	add	r7, sp, #0
100006ce:	6078      	str	r0, [r7, #4]

#endif /* CORE_CA7 */


#if defined (CORE_CM4)
  if ((uint32_t)uwTickFreq == 0U)
100006d0:	4b15      	ldr	r3, [pc, #84]	; (10000728 <HAL_InitTick+0x60>)
100006d2:	781b      	ldrb	r3, [r3, #0]
100006d4:	2b00      	cmp	r3, #0
100006d6:	d101      	bne.n	100006dc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
100006d8:	2301      	movs	r3, #1
100006da:	e021      	b.n	10000720 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock /(1000U / uwTickFreq)) > 0U)
100006dc:	4b13      	ldr	r3, [pc, #76]	; (1000072c <HAL_InitTick+0x64>)
100006de:	681a      	ldr	r2, [r3, #0]
100006e0:	4b11      	ldr	r3, [pc, #68]	; (10000728 <HAL_InitTick+0x60>)
100006e2:	781b      	ldrb	r3, [r3, #0]
100006e4:	4619      	mov	r1, r3
100006e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
100006ea:	fbb3 f3f1 	udiv	r3, r3, r1
100006ee:	fbb2 f3f3 	udiv	r3, r2, r3
100006f2:	4618      	mov	r0, r3
100006f4:	f000 f917 	bl	10000926 <HAL_SYSTICK_Config>
100006f8:	4603      	mov	r3, r0
100006fa:	2b00      	cmp	r3, #0
100006fc:	d001      	beq.n	10000702 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
100006fe:	2301      	movs	r3, #1
10000700:	e00e      	b.n	10000720 <HAL_InitTick+0x58>
  }
  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
10000702:	687b      	ldr	r3, [r7, #4]
10000704:	2b0f      	cmp	r3, #15
10000706:	d80a      	bhi.n	1000071e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
10000708:	2200      	movs	r2, #0
1000070a:	6879      	ldr	r1, [r7, #4]
1000070c:	f04f 30ff 	mov.w	r0, #4294967295
10000710:	f000 f8ed 	bl	100008ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
10000714:	4a06      	ldr	r2, [pc, #24]	; (10000730 <HAL_InitTick+0x68>)
10000716:	687b      	ldr	r3, [r7, #4]
10000718:	6013      	str	r3, [r2, #0]
#endif /* CORE_CM4 */



  /* Return function status */
  return HAL_OK;
1000071a:	2300      	movs	r3, #0
1000071c:	e000      	b.n	10000720 <HAL_InitTick+0x58>
    return HAL_ERROR;
1000071e:	2301      	movs	r3, #1
}
10000720:	4618      	mov	r0, r3
10000722:	3708      	adds	r7, #8
10000724:	46bd      	mov	sp, r7
10000726:	bd80      	pop	{r7, pc}
10000728:	10020008 	.word	0x10020008
1000072c:	10020000 	.word	0x10020000
10000730:	10020004 	.word	0x10020004

10000734 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
10000734:	b480      	push	{r7}
10000736:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
10000738:	4b06      	ldr	r3, [pc, #24]	; (10000754 <HAL_IncTick+0x20>)
1000073a:	781b      	ldrb	r3, [r3, #0]
1000073c:	461a      	mov	r2, r3
1000073e:	4b06      	ldr	r3, [pc, #24]	; (10000758 <HAL_IncTick+0x24>)
10000740:	681b      	ldr	r3, [r3, #0]
10000742:	4413      	add	r3, r2
10000744:	4a04      	ldr	r2, [pc, #16]	; (10000758 <HAL_IncTick+0x24>)
10000746:	6013      	str	r3, [r2, #0]
}
10000748:	bf00      	nop
1000074a:	46bd      	mov	sp, r7
1000074c:	f85d 7b04 	ldr.w	r7, [sp], #4
10000750:	4770      	bx	lr
10000752:	bf00      	nop
10000754:	10020008 	.word	0x10020008
10000758:	10021a40 	.word	0x10021a40

1000075c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
1000075c:	b480      	push	{r7}
1000075e:	af00      	add	r7, sp, #0
#endif /* CORE_CA7 */


#if defined (CORE_CM4)
  /* tick is incremented in systick handler */
  return uwTick;
10000760:	4b03      	ldr	r3, [pc, #12]	; (10000770 <HAL_GetTick+0x14>)
10000762:	681b      	ldr	r3, [r3, #0]
#endif /* CORE_CM4 */

}
10000764:	4618      	mov	r0, r3
10000766:	46bd      	mov	sp, r7
10000768:	f85d 7b04 	ldr.w	r7, [sp], #4
1000076c:	4770      	bx	lr
1000076e:	bf00      	nop
10000770:	10021a40 	.word	0x10021a40

10000774 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
10000774:	b480      	push	{r7}
10000776:	b085      	sub	sp, #20
10000778:	af00      	add	r7, sp, #0
1000077a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
1000077c:	687b      	ldr	r3, [r7, #4]
1000077e:	f003 0307 	and.w	r3, r3, #7
10000782:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
10000784:	4b0c      	ldr	r3, [pc, #48]	; (100007b8 <__NVIC_SetPriorityGrouping+0x44>)
10000786:	68db      	ldr	r3, [r3, #12]
10000788:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
1000078a:	68ba      	ldr	r2, [r7, #8]
1000078c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
10000790:	4013      	ands	r3, r2
10000792:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
10000794:	68fb      	ldr	r3, [r7, #12]
10000796:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
10000798:	68bb      	ldr	r3, [r7, #8]
1000079a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
1000079c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
100007a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
100007a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
100007a6:	4a04      	ldr	r2, [pc, #16]	; (100007b8 <__NVIC_SetPriorityGrouping+0x44>)
100007a8:	68bb      	ldr	r3, [r7, #8]
100007aa:	60d3      	str	r3, [r2, #12]
}
100007ac:	bf00      	nop
100007ae:	3714      	adds	r7, #20
100007b0:	46bd      	mov	sp, r7
100007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
100007b6:	4770      	bx	lr
100007b8:	e000ed00 	.word	0xe000ed00

100007bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
100007bc:	b480      	push	{r7}
100007be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
100007c0:	4b04      	ldr	r3, [pc, #16]	; (100007d4 <__NVIC_GetPriorityGrouping+0x18>)
100007c2:	68db      	ldr	r3, [r3, #12]
100007c4:	0a1b      	lsrs	r3, r3, #8
100007c6:	f003 0307 	and.w	r3, r3, #7
}
100007ca:	4618      	mov	r0, r3
100007cc:	46bd      	mov	sp, r7
100007ce:	f85d 7b04 	ldr.w	r7, [sp], #4
100007d2:	4770      	bx	lr
100007d4:	e000ed00 	.word	0xe000ed00

100007d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
100007d8:	b480      	push	{r7}
100007da:	b083      	sub	sp, #12
100007dc:	af00      	add	r7, sp, #0
100007de:	4603      	mov	r3, r0
100007e0:	6039      	str	r1, [r7, #0]
100007e2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
100007e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
100007e8:	2b00      	cmp	r3, #0
100007ea:	db0a      	blt.n	10000802 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
100007ec:	683b      	ldr	r3, [r7, #0]
100007ee:	b2da      	uxtb	r2, r3
100007f0:	490c      	ldr	r1, [pc, #48]	; (10000824 <__NVIC_SetPriority+0x4c>)
100007f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
100007f6:	0112      	lsls	r2, r2, #4
100007f8:	b2d2      	uxtb	r2, r2
100007fa:	440b      	add	r3, r1
100007fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
10000800:	e00a      	b.n	10000818 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
10000802:	683b      	ldr	r3, [r7, #0]
10000804:	b2da      	uxtb	r2, r3
10000806:	4908      	ldr	r1, [pc, #32]	; (10000828 <__NVIC_SetPriority+0x50>)
10000808:	88fb      	ldrh	r3, [r7, #6]
1000080a:	f003 030f 	and.w	r3, r3, #15
1000080e:	3b04      	subs	r3, #4
10000810:	0112      	lsls	r2, r2, #4
10000812:	b2d2      	uxtb	r2, r2
10000814:	440b      	add	r3, r1
10000816:	761a      	strb	r2, [r3, #24]
}
10000818:	bf00      	nop
1000081a:	370c      	adds	r7, #12
1000081c:	46bd      	mov	sp, r7
1000081e:	f85d 7b04 	ldr.w	r7, [sp], #4
10000822:	4770      	bx	lr
10000824:	e000e100 	.word	0xe000e100
10000828:	e000ed00 	.word	0xe000ed00

1000082c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
1000082c:	b480      	push	{r7}
1000082e:	b089      	sub	sp, #36	; 0x24
10000830:	af00      	add	r7, sp, #0
10000832:	60f8      	str	r0, [r7, #12]
10000834:	60b9      	str	r1, [r7, #8]
10000836:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
10000838:	68fb      	ldr	r3, [r7, #12]
1000083a:	f003 0307 	and.w	r3, r3, #7
1000083e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
10000840:	69fb      	ldr	r3, [r7, #28]
10000842:	f1c3 0307 	rsb	r3, r3, #7
10000846:	2b04      	cmp	r3, #4
10000848:	bf28      	it	cs
1000084a:	2304      	movcs	r3, #4
1000084c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
1000084e:	69fb      	ldr	r3, [r7, #28]
10000850:	3304      	adds	r3, #4
10000852:	2b06      	cmp	r3, #6
10000854:	d902      	bls.n	1000085c <NVIC_EncodePriority+0x30>
10000856:	69fb      	ldr	r3, [r7, #28]
10000858:	3b03      	subs	r3, #3
1000085a:	e000      	b.n	1000085e <NVIC_EncodePriority+0x32>
1000085c:	2300      	movs	r3, #0
1000085e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
10000860:	f04f 32ff 	mov.w	r2, #4294967295
10000864:	69bb      	ldr	r3, [r7, #24]
10000866:	fa02 f303 	lsl.w	r3, r2, r3
1000086a:	43da      	mvns	r2, r3
1000086c:	68bb      	ldr	r3, [r7, #8]
1000086e:	401a      	ands	r2, r3
10000870:	697b      	ldr	r3, [r7, #20]
10000872:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
10000874:	f04f 31ff 	mov.w	r1, #4294967295
10000878:	697b      	ldr	r3, [r7, #20]
1000087a:	fa01 f303 	lsl.w	r3, r1, r3
1000087e:	43d9      	mvns	r1, r3
10000880:	687b      	ldr	r3, [r7, #4]
10000882:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
10000884:	4313      	orrs	r3, r2
         );
}
10000886:	4618      	mov	r0, r3
10000888:	3724      	adds	r7, #36	; 0x24
1000088a:	46bd      	mov	sp, r7
1000088c:	f85d 7b04 	ldr.w	r7, [sp], #4
10000890:	4770      	bx	lr
	...

10000894 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
10000894:	b580      	push	{r7, lr}
10000896:	b082      	sub	sp, #8
10000898:	af00      	add	r7, sp, #0
1000089a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
1000089c:	687b      	ldr	r3, [r7, #4]
1000089e:	3b01      	subs	r3, #1
100008a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
100008a4:	d301      	bcc.n	100008aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
100008a6:	2301      	movs	r3, #1
100008a8:	e00f      	b.n	100008ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
100008aa:	4a0a      	ldr	r2, [pc, #40]	; (100008d4 <SysTick_Config+0x40>)
100008ac:	687b      	ldr	r3, [r7, #4]
100008ae:	3b01      	subs	r3, #1
100008b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
100008b2:	210f      	movs	r1, #15
100008b4:	f04f 30ff 	mov.w	r0, #4294967295
100008b8:	f7ff ff8e 	bl	100007d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
100008bc:	4b05      	ldr	r3, [pc, #20]	; (100008d4 <SysTick_Config+0x40>)
100008be:	2200      	movs	r2, #0
100008c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
100008c2:	4b04      	ldr	r3, [pc, #16]	; (100008d4 <SysTick_Config+0x40>)
100008c4:	2207      	movs	r2, #7
100008c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
100008c8:	2300      	movs	r3, #0
}
100008ca:	4618      	mov	r0, r3
100008cc:	3708      	adds	r7, #8
100008ce:	46bd      	mov	sp, r7
100008d0:	bd80      	pop	{r7, pc}
100008d2:	bf00      	nop
100008d4:	e000e010 	.word	0xe000e010

100008d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
100008d8:	b580      	push	{r7, lr}
100008da:	b082      	sub	sp, #8
100008dc:	af00      	add	r7, sp, #0
100008de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
100008e0:	6878      	ldr	r0, [r7, #4]
100008e2:	f7ff ff47 	bl	10000774 <__NVIC_SetPriorityGrouping>
}
100008e6:	bf00      	nop
100008e8:	3708      	adds	r7, #8
100008ea:	46bd      	mov	sp, r7
100008ec:	bd80      	pop	{r7, pc}

100008ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
100008ee:	b580      	push	{r7, lr}
100008f0:	b086      	sub	sp, #24
100008f2:	af00      	add	r7, sp, #0
100008f4:	4603      	mov	r3, r0
100008f6:	60b9      	str	r1, [r7, #8]
100008f8:	607a      	str	r2, [r7, #4]
100008fa:	81fb      	strh	r3, [r7, #14]
  uint32_t prioritygroup = 0x00;
100008fc:	2300      	movs	r3, #0
100008fe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
10000900:	f7ff ff5c 	bl	100007bc <__NVIC_GetPriorityGrouping>
10000904:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
10000906:	687a      	ldr	r2, [r7, #4]
10000908:	68b9      	ldr	r1, [r7, #8]
1000090a:	6978      	ldr	r0, [r7, #20]
1000090c:	f7ff ff8e 	bl	1000082c <NVIC_EncodePriority>
10000910:	4602      	mov	r2, r0
10000912:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
10000916:	4611      	mov	r1, r2
10000918:	4618      	mov	r0, r3
1000091a:	f7ff ff5d 	bl	100007d8 <__NVIC_SetPriority>
}
1000091e:	bf00      	nop
10000920:	3718      	adds	r7, #24
10000922:	46bd      	mov	sp, r7
10000924:	bd80      	pop	{r7, pc}

10000926 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
10000926:	b580      	push	{r7, lr}
10000928:	b082      	sub	sp, #8
1000092a:	af00      	add	r7, sp, #0
1000092c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
1000092e:	6878      	ldr	r0, [r7, #4]
10000930:	f7ff ffb0 	bl	10000894 <SysTick_Config>
10000934:	4603      	mov	r3, r0
}
10000936:	4618      	mov	r0, r3
10000938:	3708      	adds	r7, #8
1000093a:	46bd      	mov	sp, r7
1000093c:	bd80      	pop	{r7, pc}
	...

10000940 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
10000940:	b480      	push	{r7}
10000942:	b089      	sub	sp, #36	; 0x24
10000944:	af00      	add	r7, sp, #0
10000946:	6078      	str	r0, [r7, #4]
10000948:	6039      	str	r1, [r7, #0]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef * EXTI_CurrentCPU;

#if defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_C2; /* EXTI for CM4 CPU */
1000094a:	4b8a      	ldr	r3, [pc, #552]	; (10000b74 <HAL_GPIO_Init+0x234>)
1000094c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
1000094e:	2300      	movs	r3, #0
10000950:	61fb      	str	r3, [r7, #28]
10000952:	e191      	b.n	10000c78 <HAL_GPIO_Init+0x338>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
10000954:	2201      	movs	r2, #1
10000956:	69fb      	ldr	r3, [r7, #28]
10000958:	fa02 f303 	lsl.w	r3, r2, r3
1000095c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
1000095e:	683b      	ldr	r3, [r7, #0]
10000960:	681b      	ldr	r3, [r3, #0]
10000962:	693a      	ldr	r2, [r7, #16]
10000964:	4013      	ands	r3, r2
10000966:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
10000968:	68fa      	ldr	r2, [r7, #12]
1000096a:	693b      	ldr	r3, [r7, #16]
1000096c:	429a      	cmp	r2, r3
1000096e:	f040 8180 	bne.w	10000c72 <HAL_GPIO_Init+0x332>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
10000972:	683b      	ldr	r3, [r7, #0]
10000974:	685b      	ldr	r3, [r3, #4]
10000976:	2b02      	cmp	r3, #2
10000978:	d003      	beq.n	10000982 <HAL_GPIO_Init+0x42>
1000097a:	683b      	ldr	r3, [r7, #0]
1000097c:	685b      	ldr	r3, [r3, #4]
1000097e:	2b12      	cmp	r3, #18
10000980:	d123      	bne.n	100009ca <HAL_GPIO_Init+0x8a>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
10000982:	69fb      	ldr	r3, [r7, #28]
10000984:	08da      	lsrs	r2, r3, #3
10000986:	687b      	ldr	r3, [r7, #4]
10000988:	3208      	adds	r2, #8
1000098a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
1000098e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
10000990:	69fb      	ldr	r3, [r7, #28]
10000992:	f003 0307 	and.w	r3, r3, #7
10000996:	009b      	lsls	r3, r3, #2
10000998:	220f      	movs	r2, #15
1000099a:	fa02 f303 	lsl.w	r3, r2, r3
1000099e:	43db      	mvns	r3, r3
100009a0:	69ba      	ldr	r2, [r7, #24]
100009a2:	4013      	ands	r3, r2
100009a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
100009a6:	683b      	ldr	r3, [r7, #0]
100009a8:	691a      	ldr	r2, [r3, #16]
100009aa:	69fb      	ldr	r3, [r7, #28]
100009ac:	f003 0307 	and.w	r3, r3, #7
100009b0:	009b      	lsls	r3, r3, #2
100009b2:	fa02 f303 	lsl.w	r3, r2, r3
100009b6:	69ba      	ldr	r2, [r7, #24]
100009b8:	4313      	orrs	r3, r2
100009ba:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
100009bc:	69fb      	ldr	r3, [r7, #28]
100009be:	08da      	lsrs	r2, r3, #3
100009c0:	687b      	ldr	r3, [r7, #4]
100009c2:	3208      	adds	r2, #8
100009c4:	69b9      	ldr	r1, [r7, #24]
100009c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
100009ca:	687b      	ldr	r3, [r7, #4]
100009cc:	681b      	ldr	r3, [r3, #0]
100009ce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
100009d0:	69fb      	ldr	r3, [r7, #28]
100009d2:	005b      	lsls	r3, r3, #1
100009d4:	2203      	movs	r2, #3
100009d6:	fa02 f303 	lsl.w	r3, r2, r3
100009da:	43db      	mvns	r3, r3
100009dc:	69ba      	ldr	r2, [r7, #24]
100009de:	4013      	ands	r3, r2
100009e0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
100009e2:	683b      	ldr	r3, [r7, #0]
100009e4:	685b      	ldr	r3, [r3, #4]
100009e6:	f003 0203 	and.w	r2, r3, #3
100009ea:	69fb      	ldr	r3, [r7, #28]
100009ec:	005b      	lsls	r3, r3, #1
100009ee:	fa02 f303 	lsl.w	r3, r2, r3
100009f2:	69ba      	ldr	r2, [r7, #24]
100009f4:	4313      	orrs	r3, r2
100009f6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
100009f8:	687b      	ldr	r3, [r7, #4]
100009fa:	69ba      	ldr	r2, [r7, #24]
100009fc:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
100009fe:	683b      	ldr	r3, [r7, #0]
10000a00:	685b      	ldr	r3, [r3, #4]
10000a02:	2b01      	cmp	r3, #1
10000a04:	d00b      	beq.n	10000a1e <HAL_GPIO_Init+0xde>
10000a06:	683b      	ldr	r3, [r7, #0]
10000a08:	685b      	ldr	r3, [r3, #4]
10000a0a:	2b02      	cmp	r3, #2
10000a0c:	d007      	beq.n	10000a1e <HAL_GPIO_Init+0xde>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
10000a0e:	683b      	ldr	r3, [r7, #0]
10000a10:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
10000a12:	2b11      	cmp	r3, #17
10000a14:	d003      	beq.n	10000a1e <HAL_GPIO_Init+0xde>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
10000a16:	683b      	ldr	r3, [r7, #0]
10000a18:	685b      	ldr	r3, [r3, #4]
10000a1a:	2b12      	cmp	r3, #18
10000a1c:	d130      	bne.n	10000a80 <HAL_GPIO_Init+0x140>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
10000a1e:	687b      	ldr	r3, [r7, #4]
10000a20:	689b      	ldr	r3, [r3, #8]
10000a22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEEDR0 << (position * 2));
10000a24:	69fb      	ldr	r3, [r7, #28]
10000a26:	005b      	lsls	r3, r3, #1
10000a28:	2203      	movs	r2, #3
10000a2a:	fa02 f303 	lsl.w	r3, r2, r3
10000a2e:	43db      	mvns	r3, r3
10000a30:	69ba      	ldr	r2, [r7, #24]
10000a32:	4013      	ands	r3, r2
10000a34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
10000a36:	683b      	ldr	r3, [r7, #0]
10000a38:	68da      	ldr	r2, [r3, #12]
10000a3a:	69fb      	ldr	r3, [r7, #28]
10000a3c:	005b      	lsls	r3, r3, #1
10000a3e:	fa02 f303 	lsl.w	r3, r2, r3
10000a42:	69ba      	ldr	r2, [r7, #24]
10000a44:	4313      	orrs	r3, r2
10000a46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
10000a48:	687b      	ldr	r3, [r7, #4]
10000a4a:	69ba      	ldr	r2, [r7, #24]
10000a4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
10000a4e:	687b      	ldr	r3, [r7, #4]
10000a50:	685b      	ldr	r3, [r3, #4]
10000a52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
10000a54:	2201      	movs	r2, #1
10000a56:	69fb      	ldr	r3, [r7, #28]
10000a58:	fa02 f303 	lsl.w	r3, r2, r3
10000a5c:	43db      	mvns	r3, r3
10000a5e:	69ba      	ldr	r2, [r7, #24]
10000a60:	4013      	ands	r3, r2
10000a62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
10000a64:	683b      	ldr	r3, [r7, #0]
10000a66:	685b      	ldr	r3, [r3, #4]
10000a68:	091b      	lsrs	r3, r3, #4
10000a6a:	f003 0201 	and.w	r2, r3, #1
10000a6e:	69fb      	ldr	r3, [r7, #28]
10000a70:	fa02 f303 	lsl.w	r3, r2, r3
10000a74:	69ba      	ldr	r2, [r7, #24]
10000a76:	4313      	orrs	r3, r2
10000a78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
10000a7a:	687b      	ldr	r3, [r7, #4]
10000a7c:	69ba      	ldr	r2, [r7, #24]
10000a7e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
10000a80:	687b      	ldr	r3, [r7, #4]
10000a82:	68db      	ldr	r3, [r3, #12]
10000a84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
10000a86:	69fb      	ldr	r3, [r7, #28]
10000a88:	005b      	lsls	r3, r3, #1
10000a8a:	2203      	movs	r2, #3
10000a8c:	fa02 f303 	lsl.w	r3, r2, r3
10000a90:	43db      	mvns	r3, r3
10000a92:	69ba      	ldr	r2, [r7, #24]
10000a94:	4013      	ands	r3, r2
10000a96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
10000a98:	683b      	ldr	r3, [r7, #0]
10000a9a:	689a      	ldr	r2, [r3, #8]
10000a9c:	69fb      	ldr	r3, [r7, #28]
10000a9e:	005b      	lsls	r3, r3, #1
10000aa0:	fa02 f303 	lsl.w	r3, r2, r3
10000aa4:	69ba      	ldr	r2, [r7, #24]
10000aa6:	4313      	orrs	r3, r2
10000aa8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
10000aaa:	687b      	ldr	r3, [r7, #4]
10000aac:	69ba      	ldr	r2, [r7, #24]
10000aae:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
10000ab0:	683b      	ldr	r3, [r7, #0]
10000ab2:	685b      	ldr	r3, [r3, #4]
10000ab4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
10000ab8:	2b00      	cmp	r3, #0
10000aba:	f000 80da 	beq.w	10000c72 <HAL_GPIO_Init+0x332>
      {
        temp = EXTI->EXTICR[position >> 2U];
10000abe:	4a2e      	ldr	r2, [pc, #184]	; (10000b78 <HAL_GPIO_Init+0x238>)
10000ac0:	69fb      	ldr	r3, [r7, #28]
10000ac2:	089b      	lsrs	r3, r3, #2
10000ac4:	3318      	adds	r3, #24
10000ac6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
10000aca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFFU << (8U * (position & 0x03U)));
10000acc:	69fb      	ldr	r3, [r7, #28]
10000ace:	f003 0303 	and.w	r3, r3, #3
10000ad2:	00db      	lsls	r3, r3, #3
10000ad4:	22ff      	movs	r2, #255	; 0xff
10000ad6:	fa02 f303 	lsl.w	r3, r2, r3
10000ada:	43db      	mvns	r3, r3
10000adc:	69ba      	ldr	r2, [r7, #24]
10000ade:	4013      	ands	r3, r2
10000ae0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
10000ae2:	687b      	ldr	r3, [r7, #4]
10000ae4:	4a25      	ldr	r2, [pc, #148]	; (10000b7c <HAL_GPIO_Init+0x23c>)
10000ae6:	4293      	cmp	r3, r2
10000ae8:	d05e      	beq.n	10000ba8 <HAL_GPIO_Init+0x268>
10000aea:	687b      	ldr	r3, [r7, #4]
10000aec:	4a24      	ldr	r2, [pc, #144]	; (10000b80 <HAL_GPIO_Init+0x240>)
10000aee:	4293      	cmp	r3, r2
10000af0:	d03d      	beq.n	10000b6e <HAL_GPIO_Init+0x22e>
10000af2:	687b      	ldr	r3, [r7, #4]
10000af4:	4a23      	ldr	r2, [pc, #140]	; (10000b84 <HAL_GPIO_Init+0x244>)
10000af6:	4293      	cmp	r3, r2
10000af8:	d037      	beq.n	10000b6a <HAL_GPIO_Init+0x22a>
10000afa:	687b      	ldr	r3, [r7, #4]
10000afc:	f1b3 2f50 	cmp.w	r3, #1342197760	; 0x50005000
10000b00:	d031      	beq.n	10000b66 <HAL_GPIO_Init+0x226>
10000b02:	687b      	ldr	r3, [r7, #4]
10000b04:	4a20      	ldr	r2, [pc, #128]	; (10000b88 <HAL_GPIO_Init+0x248>)
10000b06:	4293      	cmp	r3, r2
10000b08:	d02b      	beq.n	10000b62 <HAL_GPIO_Init+0x222>
10000b0a:	687b      	ldr	r3, [r7, #4]
10000b0c:	4a1f      	ldr	r2, [pc, #124]	; (10000b8c <HAL_GPIO_Init+0x24c>)
10000b0e:	4293      	cmp	r3, r2
10000b10:	d025      	beq.n	10000b5e <HAL_GPIO_Init+0x21e>
10000b12:	687b      	ldr	r3, [r7, #4]
10000b14:	4a1e      	ldr	r2, [pc, #120]	; (10000b90 <HAL_GPIO_Init+0x250>)
10000b16:	4293      	cmp	r3, r2
10000b18:	d01f      	beq.n	10000b5a <HAL_GPIO_Init+0x21a>
10000b1a:	687b      	ldr	r3, [r7, #4]
10000b1c:	4a1d      	ldr	r2, [pc, #116]	; (10000b94 <HAL_GPIO_Init+0x254>)
10000b1e:	4293      	cmp	r3, r2
10000b20:	d019      	beq.n	10000b56 <HAL_GPIO_Init+0x216>
10000b22:	687b      	ldr	r3, [r7, #4]
10000b24:	4a1c      	ldr	r2, [pc, #112]	; (10000b98 <HAL_GPIO_Init+0x258>)
10000b26:	4293      	cmp	r3, r2
10000b28:	d013      	beq.n	10000b52 <HAL_GPIO_Init+0x212>
10000b2a:	687b      	ldr	r3, [r7, #4]
10000b2c:	4a1b      	ldr	r2, [pc, #108]	; (10000b9c <HAL_GPIO_Init+0x25c>)
10000b2e:	4293      	cmp	r3, r2
10000b30:	d00d      	beq.n	10000b4e <HAL_GPIO_Init+0x20e>
10000b32:	687b      	ldr	r3, [r7, #4]
10000b34:	4a1a      	ldr	r2, [pc, #104]	; (10000ba0 <HAL_GPIO_Init+0x260>)
10000b36:	4293      	cmp	r3, r2
10000b38:	d007      	beq.n	10000b4a <HAL_GPIO_Init+0x20a>
10000b3a:	687b      	ldr	r3, [r7, #4]
10000b3c:	4a19      	ldr	r2, [pc, #100]	; (10000ba4 <HAL_GPIO_Init+0x264>)
10000b3e:	4293      	cmp	r3, r2
10000b40:	d101      	bne.n	10000b46 <HAL_GPIO_Init+0x206>
10000b42:	230b      	movs	r3, #11
10000b44:	e031      	b.n	10000baa <HAL_GPIO_Init+0x26a>
10000b46:	2319      	movs	r3, #25
10000b48:	e02f      	b.n	10000baa <HAL_GPIO_Init+0x26a>
10000b4a:	230a      	movs	r3, #10
10000b4c:	e02d      	b.n	10000baa <HAL_GPIO_Init+0x26a>
10000b4e:	2309      	movs	r3, #9
10000b50:	e02b      	b.n	10000baa <HAL_GPIO_Init+0x26a>
10000b52:	2308      	movs	r3, #8
10000b54:	e029      	b.n	10000baa <HAL_GPIO_Init+0x26a>
10000b56:	2307      	movs	r3, #7
10000b58:	e027      	b.n	10000baa <HAL_GPIO_Init+0x26a>
10000b5a:	2306      	movs	r3, #6
10000b5c:	e025      	b.n	10000baa <HAL_GPIO_Init+0x26a>
10000b5e:	2305      	movs	r3, #5
10000b60:	e023      	b.n	10000baa <HAL_GPIO_Init+0x26a>
10000b62:	2304      	movs	r3, #4
10000b64:	e021      	b.n	10000baa <HAL_GPIO_Init+0x26a>
10000b66:	2303      	movs	r3, #3
10000b68:	e01f      	b.n	10000baa <HAL_GPIO_Init+0x26a>
10000b6a:	2302      	movs	r3, #2
10000b6c:	e01d      	b.n	10000baa <HAL_GPIO_Init+0x26a>
10000b6e:	2301      	movs	r3, #1
10000b70:	e01b      	b.n	10000baa <HAL_GPIO_Init+0x26a>
10000b72:	bf00      	nop
10000b74:	5000d0c0 	.word	0x5000d0c0
10000b78:	5000d000 	.word	0x5000d000
10000b7c:	50002000 	.word	0x50002000
10000b80:	50003000 	.word	0x50003000
10000b84:	50004000 	.word	0x50004000
10000b88:	50006000 	.word	0x50006000
10000b8c:	50007000 	.word	0x50007000
10000b90:	50008000 	.word	0x50008000
10000b94:	50009000 	.word	0x50009000
10000b98:	5000a000 	.word	0x5000a000
10000b9c:	5000b000 	.word	0x5000b000
10000ba0:	5000c000 	.word	0x5000c000
10000ba4:	54004000 	.word	0x54004000
10000ba8:	2300      	movs	r3, #0
10000baa:	69fa      	ldr	r2, [r7, #28]
10000bac:	f002 0203 	and.w	r2, r2, #3
10000bb0:	00d2      	lsls	r2, r2, #3
10000bb2:	4093      	lsls	r3, r2
10000bb4:	461a      	mov	r2, r3
10000bb6:	69bb      	ldr	r3, [r7, #24]
10000bb8:	4313      	orrs	r3, r2
10000bba:	61bb      	str	r3, [r7, #24]
        EXTI->EXTICR[position >> 2U] = temp;
10000bbc:	4933      	ldr	r1, [pc, #204]	; (10000c8c <HAL_GPIO_Init+0x34c>)
10000bbe:	69fb      	ldr	r3, [r7, #28]
10000bc0:	089b      	lsrs	r3, r3, #2
10000bc2:	3318      	adds	r3, #24
10000bc4:	69ba      	ldr	r2, [r7, #24]
10000bc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
10000bca:	697b      	ldr	r3, [r7, #20]
10000bcc:	681b      	ldr	r3, [r3, #0]
10000bce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
10000bd0:	68fb      	ldr	r3, [r7, #12]
10000bd2:	43db      	mvns	r3, r3
10000bd4:	69ba      	ldr	r2, [r7, #24]
10000bd6:	4013      	ands	r3, r2
10000bd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
10000bda:	683b      	ldr	r3, [r7, #0]
10000bdc:	685b      	ldr	r3, [r3, #4]
10000bde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
10000be2:	2b00      	cmp	r3, #0
10000be4:	d003      	beq.n	10000bee <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
10000be6:	69ba      	ldr	r2, [r7, #24]
10000be8:	68fb      	ldr	r3, [r7, #12]
10000bea:	4313      	orrs	r3, r2
10000bec:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
10000bee:	697b      	ldr	r3, [r7, #20]
10000bf0:	69ba      	ldr	r2, [r7, #24]
10000bf2:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
10000bf4:	697b      	ldr	r3, [r7, #20]
10000bf6:	685b      	ldr	r3, [r3, #4]
10000bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
10000bfa:	68fb      	ldr	r3, [r7, #12]
10000bfc:	43db      	mvns	r3, r3
10000bfe:	69ba      	ldr	r2, [r7, #24]
10000c00:	4013      	ands	r3, r2
10000c02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
10000c04:	683b      	ldr	r3, [r7, #0]
10000c06:	685b      	ldr	r3, [r3, #4]
10000c08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
10000c0c:	2b00      	cmp	r3, #0
10000c0e:	d003      	beq.n	10000c18 <HAL_GPIO_Init+0x2d8>
        {
          temp |= iocurrent;
10000c10:	69ba      	ldr	r2, [r7, #24]
10000c12:	68fb      	ldr	r3, [r7, #12]
10000c14:	4313      	orrs	r3, r2
10000c16:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
10000c18:	697b      	ldr	r3, [r7, #20]
10000c1a:	69ba      	ldr	r2, [r7, #24]
10000c1c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
10000c1e:	4b1b      	ldr	r3, [pc, #108]	; (10000c8c <HAL_GPIO_Init+0x34c>)
10000c20:	681b      	ldr	r3, [r3, #0]
10000c22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
10000c24:	68fb      	ldr	r3, [r7, #12]
10000c26:	43db      	mvns	r3, r3
10000c28:	69ba      	ldr	r2, [r7, #24]
10000c2a:	4013      	ands	r3, r2
10000c2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
10000c2e:	683b      	ldr	r3, [r7, #0]
10000c30:	685b      	ldr	r3, [r3, #4]
10000c32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
10000c36:	2b00      	cmp	r3, #0
10000c38:	d003      	beq.n	10000c42 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
10000c3a:	69ba      	ldr	r2, [r7, #24]
10000c3c:	68fb      	ldr	r3, [r7, #12]
10000c3e:	4313      	orrs	r3, r2
10000c40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
10000c42:	4a12      	ldr	r2, [pc, #72]	; (10000c8c <HAL_GPIO_Init+0x34c>)
10000c44:	69bb      	ldr	r3, [r7, #24]
10000c46:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
10000c48:	4b10      	ldr	r3, [pc, #64]	; (10000c8c <HAL_GPIO_Init+0x34c>)
10000c4a:	685b      	ldr	r3, [r3, #4]
10000c4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
10000c4e:	68fb      	ldr	r3, [r7, #12]
10000c50:	43db      	mvns	r3, r3
10000c52:	69ba      	ldr	r2, [r7, #24]
10000c54:	4013      	ands	r3, r2
10000c56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
10000c58:	683b      	ldr	r3, [r7, #0]
10000c5a:	685b      	ldr	r3, [r3, #4]
10000c5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
10000c60:	2b00      	cmp	r3, #0
10000c62:	d003      	beq.n	10000c6c <HAL_GPIO_Init+0x32c>
        {
          temp |= iocurrent;
10000c64:	69ba      	ldr	r2, [r7, #24]
10000c66:	68fb      	ldr	r3, [r7, #12]
10000c68:	4313      	orrs	r3, r2
10000c6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
10000c6c:	4a07      	ldr	r2, [pc, #28]	; (10000c8c <HAL_GPIO_Init+0x34c>)
10000c6e:	69bb      	ldr	r3, [r7, #24]
10000c70:	6053      	str	r3, [r2, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
10000c72:	69fb      	ldr	r3, [r7, #28]
10000c74:	3301      	adds	r3, #1
10000c76:	61fb      	str	r3, [r7, #28]
10000c78:	69fb      	ldr	r3, [r7, #28]
10000c7a:	2b0f      	cmp	r3, #15
10000c7c:	f67f ae6a 	bls.w	10000954 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
10000c80:	bf00      	nop
10000c82:	3724      	adds	r7, #36	; 0x24
10000c84:	46bd      	mov	sp, r7
10000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
10000c8a:	4770      	bx	lr
10000c8c:	5000d000 	.word	0x5000d000

10000c90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
10000c90:	b480      	push	{r7}
10000c92:	b083      	sub	sp, #12
10000c94:	af00      	add	r7, sp, #0
10000c96:	6078      	str	r0, [r7, #4]
10000c98:	460b      	mov	r3, r1
10000c9a:	807b      	strh	r3, [r7, #2]
10000c9c:	4613      	mov	r3, r2
10000c9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
10000ca0:	787b      	ldrb	r3, [r7, #1]
10000ca2:	2b00      	cmp	r3, #0
10000ca4:	d003      	beq.n	10000cae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
10000ca6:	887a      	ldrh	r2, [r7, #2]
10000ca8:	687b      	ldr	r3, [r7, #4]
10000caa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
10000cac:	e003      	b.n	10000cb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
10000cae:	887b      	ldrh	r3, [r7, #2]
10000cb0:	041a      	lsls	r2, r3, #16
10000cb2:	687b      	ldr	r3, [r7, #4]
10000cb4:	619a      	str	r2, [r3, #24]
}
10000cb6:	bf00      	nop
10000cb8:	370c      	adds	r7, #12
10000cba:	46bd      	mov	sp, r7
10000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
10000cc0:	4770      	bx	lr
	...

10000cc4 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
10000cc4:	b580      	push	{r7, lr}
10000cc6:	b084      	sub	sp, #16
10000cc8:	af00      	add	r7, sp, #0
10000cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef result = HAL_OK;
10000ccc:	2300      	movs	r3, #0
10000cce:	73fb      	strb	r3, [r7, #15]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
10000cd0:	687b      	ldr	r3, [r7, #4]
10000cd2:	2b00      	cmp	r3, #0
10000cd4:	d101      	bne.n	10000cda <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
10000cd6:	2301      	movs	r3, #1
10000cd8:	e31f      	b.n	1000131a <HAL_RCC_OscConfig+0x656>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
10000cda:	687b      	ldr	r3, [r7, #4]
10000cdc:	681b      	ldr	r3, [r3, #0]
10000cde:	f003 0301 	and.w	r3, r3, #1
10000ce2:	2b00      	cmp	r3, #0
10000ce4:	f000 8081 	beq.w	10000dea <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used somewhere in the system it will not be disabled */
    if (IS_HSE_IN_USE())
10000ce8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000cec:	6a1b      	ldr	r3, [r3, #32]
10000cee:	f003 0303 	and.w	r3, r3, #3
10000cf2:	2b01      	cmp	r3, #1
10000cf4:	d107      	bne.n	10000d06 <HAL_RCC_OscConfig+0x42>
10000cf6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000cfa:	6a1b      	ldr	r3, [r3, #32]
10000cfc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10000d00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10000d04:	d054      	beq.n	10000db0 <HAL_RCC_OscConfig+0xec>
10000d06:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10000d0c:	f003 0307 	and.w	r3, r3, #7
10000d10:	2b01      	cmp	r3, #1
10000d12:	d107      	bne.n	10000d24 <HAL_RCC_OscConfig+0x60>
10000d14:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10000d1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10000d1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10000d22:	d045      	beq.n	10000db0 <HAL_RCC_OscConfig+0xec>
10000d24:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000d28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10000d2a:	f003 0303 	and.w	r3, r3, #3
10000d2e:	2b01      	cmp	r3, #1
10000d30:	d107      	bne.n	10000d42 <HAL_RCC_OscConfig+0x7e>
10000d32:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000d36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10000d38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10000d3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10000d40:	d036      	beq.n	10000db0 <HAL_RCC_OscConfig+0xec>
10000d42:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10000d48:	f003 0303 	and.w	r3, r3, #3
10000d4c:	2b01      	cmp	r3, #1
10000d4e:	d10f      	bne.n	10000d70 <HAL_RCC_OscConfig+0xac>
10000d50:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000d54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10000d58:	f003 0302 	and.w	r3, r3, #2
10000d5c:	2b02      	cmp	r3, #2
10000d5e:	d027      	beq.n	10000db0 <HAL_RCC_OscConfig+0xec>
10000d60:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000d64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10000d68:	f003 0302 	and.w	r3, r3, #2
10000d6c:	2b02      	cmp	r3, #2
10000d6e:	d01f      	beq.n	10000db0 <HAL_RCC_OscConfig+0xec>
10000d70:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000d74:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10000d78:	f003 0303 	and.w	r3, r3, #3
10000d7c:	2b01      	cmp	r3, #1
10000d7e:	d107      	bne.n	10000d90 <HAL_RCC_OscConfig+0xcc>
10000d80:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000d84:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10000d88:	f003 0302 	and.w	r3, r3, #2
10000d8c:	2b02      	cmp	r3, #2
10000d8e:	d00f      	beq.n	10000db0 <HAL_RCC_OscConfig+0xec>
10000d90:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000d94:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
10000d98:	f003 0303 	and.w	r3, r3, #3
10000d9c:	2b01      	cmp	r3, #1
10000d9e:	d117      	bne.n	10000dd0 <HAL_RCC_OscConfig+0x10c>
10000da0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000da4:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10000da8:	f003 0302 	and.w	r3, r3, #2
10000dac:	2b02      	cmp	r3, #2
10000dae:	d10f      	bne.n	10000dd0 <HAL_RCC_OscConfig+0x10c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState != RCC_HSE_ON))
10000db0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000db4:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10000db8:	f403 7380 	and.w	r3, r3, #256	; 0x100
10000dbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
10000dc0:	d112      	bne.n	10000de8 <HAL_RCC_OscConfig+0x124>
10000dc2:	687b      	ldr	r3, [r7, #4]
10000dc4:	685b      	ldr	r3, [r3, #4]
10000dc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
10000dca:	d00d      	beq.n	10000de8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
10000dcc:	2301      	movs	r3, #1
10000dce:	e2a4      	b.n	1000131a <HAL_RCC_OscConfig+0x656>
      }
    }
    else
    {
      /* Configure HSE oscillator */
      result = HAL_RCC_HSEConfig(RCC_OscInitStruct->HSEState);
10000dd0:	687b      	ldr	r3, [r7, #4]
10000dd2:	685b      	ldr	r3, [r3, #4]
10000dd4:	4618      	mov	r0, r3
10000dd6:	f000 faa5 	bl	10001324 <HAL_RCC_HSEConfig>
10000dda:	4603      	mov	r3, r0
10000ddc:	73fb      	strb	r3, [r7, #15]
      if (result != HAL_OK)
10000dde:	7bfb      	ldrb	r3, [r7, #15]
10000de0:	2b00      	cmp	r3, #0
10000de2:	d002      	beq.n	10000dea <HAL_RCC_OscConfig+0x126>
      {
        return result;
10000de4:	7bfb      	ldrb	r3, [r7, #15]
10000de6:	e298      	b.n	1000131a <HAL_RCC_OscConfig+0x656>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState != RCC_HSE_ON))
10000de8:	bf00      	nop
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
10000dea:	687b      	ldr	r3, [r7, #4]
10000dec:	681b      	ldr	r3, [r3, #0]
10000dee:	f003 0302 	and.w	r3, r3, #2
10000df2:	2b00      	cmp	r3, #0
10000df4:	f000 814e 	beq.w	10001094 <HAL_RCC_OscConfig+0x3d0>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDivValue));

    /* When the HSI is used as system clock it will not disabled */
    if (IS_HSI_IN_USE())
10000df8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000dfc:	6a1b      	ldr	r3, [r3, #32]
10000dfe:	f003 0303 	and.w	r3, r3, #3
10000e02:	2b00      	cmp	r3, #0
10000e04:	d107      	bne.n	10000e16 <HAL_RCC_OscConfig+0x152>
10000e06:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000e0a:	6a1b      	ldr	r3, [r3, #32]
10000e0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10000e10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10000e14:	d055      	beq.n	10000ec2 <HAL_RCC_OscConfig+0x1fe>
10000e16:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10000e1c:	f003 0307 	and.w	r3, r3, #7
10000e20:	2b00      	cmp	r3, #0
10000e22:	d107      	bne.n	10000e34 <HAL_RCC_OscConfig+0x170>
10000e24:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10000e2a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10000e2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10000e32:	d046      	beq.n	10000ec2 <HAL_RCC_OscConfig+0x1fe>
10000e34:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000e38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10000e3a:	f003 0303 	and.w	r3, r3, #3
10000e3e:	2b00      	cmp	r3, #0
10000e40:	d107      	bne.n	10000e52 <HAL_RCC_OscConfig+0x18e>
10000e42:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000e46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10000e48:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10000e4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10000e50:	d037      	beq.n	10000ec2 <HAL_RCC_OscConfig+0x1fe>
10000e52:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10000e58:	f003 0303 	and.w	r3, r3, #3
10000e5c:	2b00      	cmp	r3, #0
10000e5e:	d10f      	bne.n	10000e80 <HAL_RCC_OscConfig+0x1bc>
10000e60:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000e64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10000e68:	f003 0302 	and.w	r3, r3, #2
10000e6c:	2b02      	cmp	r3, #2
10000e6e:	d028      	beq.n	10000ec2 <HAL_RCC_OscConfig+0x1fe>
10000e70:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000e74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10000e78:	f003 0302 	and.w	r3, r3, #2
10000e7c:	2b02      	cmp	r3, #2
10000e7e:	d020      	beq.n	10000ec2 <HAL_RCC_OscConfig+0x1fe>
10000e80:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000e84:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10000e88:	f003 0303 	and.w	r3, r3, #3
10000e8c:	2b00      	cmp	r3, #0
10000e8e:	d107      	bne.n	10000ea0 <HAL_RCC_OscConfig+0x1dc>
10000e90:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000e94:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10000e98:	f003 0302 	and.w	r3, r3, #2
10000e9c:	2b02      	cmp	r3, #2
10000e9e:	d010      	beq.n	10000ec2 <HAL_RCC_OscConfig+0x1fe>
10000ea0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000ea4:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
10000ea8:	f003 0303 	and.w	r3, r3, #3
10000eac:	2b00      	cmp	r3, #0
10000eae:	f040 8088 	bne.w	10000fc2 <HAL_RCC_OscConfig+0x2fe>
10000eb2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000eb6:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10000eba:	f003 0302 	and.w	r3, r3, #2
10000ebe:	2b02      	cmp	r3, #2
10000ec0:	d17f      	bne.n	10000fc2 <HAL_RCC_OscConfig+0x2fe>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
10000ec2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000ec6:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10000eca:	f003 0301 	and.w	r3, r3, #1
10000ece:	2b01      	cmp	r3, #1
10000ed0:	d105      	bne.n	10000ede <HAL_RCC_OscConfig+0x21a>
10000ed2:	687b      	ldr	r3, [r7, #4]
10000ed4:	68db      	ldr	r3, [r3, #12]
10000ed6:	2b01      	cmp	r3, #1
10000ed8:	d001      	beq.n	10000ede <HAL_RCC_OscConfig+0x21a>
      {
        return HAL_ERROR;
10000eda:	2301      	movs	r3, #1
10000edc:	e21d      	b.n	1000131a <HAL_RCC_OscConfig+0x656>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
10000ede:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000ee2:	699b      	ldr	r3, [r3, #24]
10000ee4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
10000ee8:	687b      	ldr	r3, [r7, #4]
10000eea:	691b      	ldr	r3, [r3, #16]
10000eec:	021b      	lsls	r3, r3, #8
10000eee:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10000ef2:	4313      	orrs	r3, r2
10000ef4:	618b      	str	r3, [r1, #24]

        /* It is not allowed to change HSIDIV if HSI is currently used as
         * reference clock for a PLL
         */
        if (((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) ||
10000ef6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10000efc:	f003 0303 	and.w	r3, r3, #3
10000f00:	2b00      	cmp	r3, #0
10000f02:	d10f      	bne.n	10000f24 <HAL_RCC_OscConfig+0x260>
             ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY)) &&
10000f04:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000f08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10000f0c:	f003 0302 	and.w	r3, r3, #2
        if (((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) ||
10000f10:	2b02      	cmp	r3, #2
10000f12:	d047      	beq.n	10000fa4 <HAL_RCC_OscConfig+0x2e0>
              ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY))))) &&
10000f14:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000f18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10000f1c:	f003 0302 	and.w	r3, r3, #2
             ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY)) &&
10000f20:	2b02      	cmp	r3, #2
10000f22:	d03f      	beq.n	10000fa4 <HAL_RCC_OscConfig+0x2e0>
            ((__HAL_RCC_GET_PLL3_SOURCE() != RCC_PLL3SOURCE_HSI) ||
10000f24:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000f28:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10000f2c:	f003 0303 	and.w	r3, r3, #3
              ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY))))) &&
10000f30:	2b00      	cmp	r3, #0
10000f32:	d107      	bne.n	10000f44 <HAL_RCC_OscConfig+0x280>
             (!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY))) &&
10000f34:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000f38:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10000f3c:	f003 0302 	and.w	r3, r3, #2
            ((__HAL_RCC_GET_PLL3_SOURCE() != RCC_PLL3SOURCE_HSI) ||
10000f40:	2b02      	cmp	r3, #2
10000f42:	d02f      	beq.n	10000fa4 <HAL_RCC_OscConfig+0x2e0>
            ((__HAL_RCC_GET_PLL4_SOURCE() != RCC_PLL4SOURCE_HSI) ||
10000f44:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000f48:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
10000f4c:	f003 0303 	and.w	r3, r3, #3
             (!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY))) &&
10000f50:	2b00      	cmp	r3, #0
10000f52:	d107      	bne.n	10000f64 <HAL_RCC_OscConfig+0x2a0>
             (!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY))))
10000f54:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000f58:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10000f5c:	f003 0302 	and.w	r3, r3, #2
            ((__HAL_RCC_GET_PLL4_SOURCE() != RCC_PLL4SOURCE_HSI) ||
10000f60:	2b02      	cmp	r3, #2
10000f62:	d01f      	beq.n	10000fa4 <HAL_RCC_OscConfig+0x2e0>
        {
          /* Update HSIDIV value */
          __HAL_RCC_HSI_DIV(RCC_OscInitStruct->HSIDivValue);
10000f64:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000f68:	699b      	ldr	r3, [r3, #24]
10000f6a:	f023 0203 	bic.w	r2, r3, #3
10000f6e:	687b      	ldr	r3, [r7, #4]
10000f70:	695b      	ldr	r3, [r3, #20]
10000f72:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10000f76:	4313      	orrs	r3, r2
10000f78:	618b      	str	r3, [r1, #24]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
10000f7a:	f7ff fbef 	bl	1000075c <HAL_GetTick>
10000f7e:	60b8      	str	r0, [r7, #8]

          /* Wait till HSIDIV is ready */
          while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
10000f80:	e008      	b.n	10000f94 <HAL_RCC_OscConfig+0x2d0>
          {
            if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
10000f82:	f7ff fbeb 	bl	1000075c <HAL_GetTick>
10000f86:	4602      	mov	r2, r0
10000f88:	68bb      	ldr	r3, [r7, #8]
10000f8a:	1ad3      	subs	r3, r2, r3
10000f8c:	2b64      	cmp	r3, #100	; 0x64
10000f8e:	d901      	bls.n	10000f94 <HAL_RCC_OscConfig+0x2d0>
            {
              return HAL_TIMEOUT;
10000f90:	2303      	movs	r3, #3
10000f92:	e1c2      	b.n	1000131a <HAL_RCC_OscConfig+0x656>
          while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
10000f94:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000f98:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10000f9c:	f003 0304 	and.w	r3, r3, #4
10000fa0:	2b04      	cmp	r3, #4
10000fa2:	d1ee      	bne.n	10000f82 <HAL_RCC_OscConfig+0x2be>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  HAL_RCC_GetSystemCoreClockFreq();
10000fa4:	f001 fa5e 	bl	10002464 <HAL_RCC_GetSystemCoreClockFreq>
10000fa8:	4602      	mov	r2, r0
10000faa:	4bc0      	ldr	r3, [pc, #768]	; (100012ac <HAL_RCC_OscConfig+0x5e8>)
10000fac:	601a      	str	r2, [r3, #0]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
10000fae:	4bc0      	ldr	r3, [pc, #768]	; (100012b0 <HAL_RCC_OscConfig+0x5ec>)
10000fb0:	681b      	ldr	r3, [r3, #0]
10000fb2:	4618      	mov	r0, r3
10000fb4:	f7ff fb88 	bl	100006c8 <HAL_InitTick>
10000fb8:	4603      	mov	r3, r0
10000fba:	2b00      	cmp	r3, #0
10000fbc:	d069      	beq.n	10001092 <HAL_RCC_OscConfig+0x3ce>
        {
          return HAL_ERROR;
10000fbe:	2301      	movs	r3, #1
10000fc0:	e1ab      	b.n	1000131a <HAL_RCC_OscConfig+0x656>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
10000fc2:	687b      	ldr	r3, [r7, #4]
10000fc4:	68db      	ldr	r3, [r3, #12]
10000fc6:	2b00      	cmp	r3, #0
10000fc8:	d049      	beq.n	1000105e <HAL_RCC_OscConfig+0x39a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
10000fca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000fce:	68db      	ldr	r3, [r3, #12]
10000fd0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10000fd4:	f043 0301 	orr.w	r3, r3, #1
10000fd8:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10000fda:	f7ff fbbf 	bl	1000075c <HAL_GetTick>
10000fde:	60b8      	str	r0, [r7, #8]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10000fe0:	e008      	b.n	10000ff4 <HAL_RCC_OscConfig+0x330>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
10000fe2:	f7ff fbbb 	bl	1000075c <HAL_GetTick>
10000fe6:	4602      	mov	r2, r0
10000fe8:	68bb      	ldr	r3, [r7, #8]
10000fea:	1ad3      	subs	r3, r2, r3
10000fec:	2b64      	cmp	r3, #100	; 0x64
10000fee:	d901      	bls.n	10000ff4 <HAL_RCC_OscConfig+0x330>
          {
            return HAL_TIMEOUT;
10000ff0:	2303      	movs	r3, #3
10000ff2:	e192      	b.n	1000131a <HAL_RCC_OscConfig+0x656>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10000ff4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000ff8:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10000ffc:	f003 0301 	and.w	r3, r3, #1
10001000:	2b01      	cmp	r3, #1
10001002:	d1ee      	bne.n	10000fe2 <HAL_RCC_OscConfig+0x31e>
          }
        }

        /* Update HSIDIV value */
        __HAL_RCC_HSI_DIV(RCC_OscInitStruct->HSIDivValue);
10001004:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001008:	699b      	ldr	r3, [r3, #24]
1000100a:	f023 0203 	bic.w	r2, r3, #3
1000100e:	687b      	ldr	r3, [r7, #4]
10001010:	695b      	ldr	r3, [r3, #20]
10001012:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001016:	4313      	orrs	r3, r2
10001018:	618b      	str	r3, [r1, #24]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
1000101a:	f7ff fb9f 	bl	1000075c <HAL_GetTick>
1000101e:	60b8      	str	r0, [r7, #8]

        /* Wait till HSIDIV is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
10001020:	e008      	b.n	10001034 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
10001022:	f7ff fb9b 	bl	1000075c <HAL_GetTick>
10001026:	4602      	mov	r2, r0
10001028:	68bb      	ldr	r3, [r7, #8]
1000102a:	1ad3      	subs	r3, r2, r3
1000102c:	2b64      	cmp	r3, #100	; 0x64
1000102e:	d901      	bls.n	10001034 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
10001030:	2303      	movs	r3, #3
10001032:	e172      	b.n	1000131a <HAL_RCC_OscConfig+0x656>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
10001034:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001038:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
1000103c:	f003 0304 	and.w	r3, r3, #4
10001040:	2b04      	cmp	r3, #4
10001042:	d1ee      	bne.n	10001022 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
10001044:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001048:	699b      	ldr	r3, [r3, #24]
1000104a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
1000104e:	687b      	ldr	r3, [r7, #4]
10001050:	691b      	ldr	r3, [r3, #16]
10001052:	021b      	lsls	r3, r3, #8
10001054:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001058:	4313      	orrs	r3, r2
1000105a:	618b      	str	r3, [r1, #24]
1000105c:	e01a      	b.n	10001094 <HAL_RCC_OscConfig+0x3d0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
1000105e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001062:	2201      	movs	r2, #1
10001064:	611a      	str	r2, [r3, #16]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10001066:	f7ff fb79 	bl	1000075c <HAL_GetTick>
1000106a:	60b8      	str	r0, [r7, #8]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
1000106c:	e008      	b.n	10001080 <HAL_RCC_OscConfig+0x3bc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
1000106e:	f7ff fb75 	bl	1000075c <HAL_GetTick>
10001072:	4602      	mov	r2, r0
10001074:	68bb      	ldr	r3, [r7, #8]
10001076:	1ad3      	subs	r3, r2, r3
10001078:	2b64      	cmp	r3, #100	; 0x64
1000107a:	d901      	bls.n	10001080 <HAL_RCC_OscConfig+0x3bc>
          {
            return HAL_TIMEOUT;
1000107c:	2303      	movs	r3, #3
1000107e:	e14c      	b.n	1000131a <HAL_RCC_OscConfig+0x656>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
10001080:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001084:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10001088:	f003 0301 	and.w	r3, r3, #1
1000108c:	2b01      	cmp	r3, #1
1000108e:	d0ee      	beq.n	1000106e <HAL_RCC_OscConfig+0x3aa>
10001090:	e000      	b.n	10001094 <HAL_RCC_OscConfig+0x3d0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
10001092:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
10001094:	687b      	ldr	r3, [r7, #4]
10001096:	681b      	ldr	r3, [r3, #0]
10001098:	f003 0310 	and.w	r3, r3, #16
1000109c:	2b00      	cmp	r3, #0
1000109e:	f000 8091 	beq.w	100011c4 <HAL_RCC_OscConfig+0x500>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    if (IS_CSI_IN_USE())
100010a2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100010a6:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
100010aa:	f003 0303 	and.w	r3, r3, #3
100010ae:	2b02      	cmp	r3, #2
100010b0:	d107      	bne.n	100010c2 <HAL_RCC_OscConfig+0x3fe>
100010b2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100010b6:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100010ba:	f003 0302 	and.w	r3, r3, #2
100010be:	2b02      	cmp	r3, #2
100010c0:	d01e      	beq.n	10001100 <HAL_RCC_OscConfig+0x43c>
100010c2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100010c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
100010c8:	f003 0303 	and.w	r3, r3, #3
100010cc:	2b02      	cmp	r3, #2
100010ce:	d107      	bne.n	100010e0 <HAL_RCC_OscConfig+0x41c>
100010d0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100010d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
100010d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100010da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100010de:	d00f      	beq.n	10001100 <HAL_RCC_OscConfig+0x43c>
100010e0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100010e4:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
100010e8:	f003 0303 	and.w	r3, r3, #3
100010ec:	2b02      	cmp	r3, #2
100010ee:	d122      	bne.n	10001136 <HAL_RCC_OscConfig+0x472>
100010f0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100010f4:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100010f8:	f003 0302 	and.w	r3, r3, #2
100010fc:	2b02      	cmp	r3, #2
100010fe:	d11a      	bne.n	10001136 <HAL_RCC_OscConfig+0x472>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
10001100:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001104:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10001108:	f003 0310 	and.w	r3, r3, #16
1000110c:	2b10      	cmp	r3, #16
1000110e:	d105      	bne.n	1000111c <HAL_RCC_OscConfig+0x458>
10001110:	687b      	ldr	r3, [r7, #4]
10001112:	69db      	ldr	r3, [r3, #28]
10001114:	2b10      	cmp	r3, #16
10001116:	d001      	beq.n	1000111c <HAL_RCC_OscConfig+0x458>
      {
        return HAL_ERROR;
10001118:	2301      	movs	r3, #1
1000111a:	e0fe      	b.n	1000131a <HAL_RCC_OscConfig+0x656>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
1000111c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001120:	69db      	ldr	r3, [r3, #28]
10001122:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
10001126:	687b      	ldr	r3, [r7, #4]
10001128:	6a1b      	ldr	r3, [r3, #32]
1000112a:	021b      	lsls	r3, r3, #8
1000112c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001130:	4313      	orrs	r3, r2
10001132:	61cb      	str	r3, [r1, #28]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
10001134:	e046      	b.n	100011c4 <HAL_RCC_OscConfig+0x500>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
10001136:	687b      	ldr	r3, [r7, #4]
10001138:	69db      	ldr	r3, [r3, #28]
1000113a:	2b00      	cmp	r3, #0
1000113c:	d029      	beq.n	10001192 <HAL_RCC_OscConfig+0x4ce>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
1000113e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001142:	68db      	ldr	r3, [r3, #12]
10001144:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001148:	f043 0310 	orr.w	r3, r3, #16
1000114c:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
1000114e:	f7ff fb05 	bl	1000075c <HAL_GetTick>
10001152:	60b8      	str	r0, [r7, #8]

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
10001154:	e008      	b.n	10001168 <HAL_RCC_OscConfig+0x4a4>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
10001156:	f7ff fb01 	bl	1000075c <HAL_GetTick>
1000115a:	4602      	mov	r2, r0
1000115c:	68bb      	ldr	r3, [r7, #8]
1000115e:	1ad3      	subs	r3, r2, r3
10001160:	2b64      	cmp	r3, #100	; 0x64
10001162:	d901      	bls.n	10001168 <HAL_RCC_OscConfig+0x4a4>
          {
            return HAL_TIMEOUT;
10001164:	2303      	movs	r3, #3
10001166:	e0d8      	b.n	1000131a <HAL_RCC_OscConfig+0x656>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
10001168:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000116c:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10001170:	f003 0310 	and.w	r3, r3, #16
10001174:	2b10      	cmp	r3, #16
10001176:	d1ee      	bne.n	10001156 <HAL_RCC_OscConfig+0x492>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
10001178:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000117c:	69db      	ldr	r3, [r3, #28]
1000117e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
10001182:	687b      	ldr	r3, [r7, #4]
10001184:	6a1b      	ldr	r3, [r3, #32]
10001186:	021b      	lsls	r3, r3, #8
10001188:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000118c:	4313      	orrs	r3, r2
1000118e:	61cb      	str	r3, [r1, #28]
10001190:	e018      	b.n	100011c4 <HAL_RCC_OscConfig+0x500>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
10001192:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001196:	2210      	movs	r2, #16
10001198:	611a      	str	r2, [r3, #16]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
1000119a:	f7ff fadf 	bl	1000075c <HAL_GetTick>
1000119e:	60b8      	str	r0, [r7, #8]

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
100011a0:	e008      	b.n	100011b4 <HAL_RCC_OscConfig+0x4f0>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
100011a2:	f7ff fadb 	bl	1000075c <HAL_GetTick>
100011a6:	4602      	mov	r2, r0
100011a8:	68bb      	ldr	r3, [r7, #8]
100011aa:	1ad3      	subs	r3, r2, r3
100011ac:	2b64      	cmp	r3, #100	; 0x64
100011ae:	d901      	bls.n	100011b4 <HAL_RCC_OscConfig+0x4f0>
          {
            return HAL_TIMEOUT;
100011b0:	2303      	movs	r3, #3
100011b2:	e0b2      	b.n	1000131a <HAL_RCC_OscConfig+0x656>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
100011b4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100011b8:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
100011bc:	f003 0310 	and.w	r3, r3, #16
100011c0:	2b10      	cmp	r3, #16
100011c2:	d0ee      	beq.n	100011a2 <HAL_RCC_OscConfig+0x4de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
100011c4:	687b      	ldr	r3, [r7, #4]
100011c6:	681b      	ldr	r3, [r3, #0]
100011c8:	f003 0308 	and.w	r3, r3, #8
100011cc:	2b00      	cmp	r3, #0
100011ce:	d042      	beq.n	10001256 <HAL_RCC_OscConfig+0x592>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
100011d0:	687b      	ldr	r3, [r7, #4]
100011d2:	699b      	ldr	r3, [r3, #24]
100011d4:	2b00      	cmp	r3, #0
100011d6:	d01f      	beq.n	10001218 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
100011d8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100011dc:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
100011e0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100011e4:	f043 0301 	orr.w	r3, r3, #1
100011e8:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
100011ec:	f7ff fab6 	bl	1000075c <HAL_GetTick>
100011f0:	60b8      	str	r0, [r7, #8]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
100011f2:	e008      	b.n	10001206 <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
100011f4:	f7ff fab2 	bl	1000075c <HAL_GetTick>
100011f8:	4602      	mov	r2, r0
100011fa:	68bb      	ldr	r3, [r7, #8]
100011fc:	1ad3      	subs	r3, r2, r3
100011fe:	2b64      	cmp	r3, #100	; 0x64
10001200:	d901      	bls.n	10001206 <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
10001202:	2303      	movs	r3, #3
10001204:	e089      	b.n	1000131a <HAL_RCC_OscConfig+0x656>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
10001206:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000120a:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
1000120e:	f003 0302 	and.w	r3, r3, #2
10001212:	2b02      	cmp	r3, #2
10001214:	d1ee      	bne.n	100011f4 <HAL_RCC_OscConfig+0x530>
10001216:	e01e      	b.n	10001256 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
10001218:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000121c:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
10001220:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001224:	f023 0301 	bic.w	r3, r3, #1
10001228:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1000122c:	f7ff fa96 	bl	1000075c <HAL_GetTick>
10001230:	60b8      	str	r0, [r7, #8]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
10001232:	e008      	b.n	10001246 <HAL_RCC_OscConfig+0x582>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
10001234:	f7ff fa92 	bl	1000075c <HAL_GetTick>
10001238:	4602      	mov	r2, r0
1000123a:	68bb      	ldr	r3, [r7, #8]
1000123c:	1ad3      	subs	r3, r2, r3
1000123e:	2b64      	cmp	r3, #100	; 0x64
10001240:	d901      	bls.n	10001246 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
10001242:	2303      	movs	r3, #3
10001244:	e069      	b.n	1000131a <HAL_RCC_OscConfig+0x656>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
10001246:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000124a:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
1000124e:	f003 0302 	and.w	r3, r3, #2
10001252:	2b02      	cmp	r3, #2
10001254:	d0ee      	beq.n	10001234 <HAL_RCC_OscConfig+0x570>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
10001256:	687b      	ldr	r3, [r7, #4]
10001258:	681b      	ldr	r3, [r3, #0]
1000125a:	f003 0304 	and.w	r3, r3, #4
1000125e:	2b00      	cmp	r3, #0
10001260:	d02a      	beq.n	100012b8 <HAL_RCC_OscConfig+0x5f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
10001262:	4b14      	ldr	r3, [pc, #80]	; (100012b4 <HAL_RCC_OscConfig+0x5f0>)
10001264:	681b      	ldr	r3, [r3, #0]
10001266:	4a13      	ldr	r2, [pc, #76]	; (100012b4 <HAL_RCC_OscConfig+0x5f0>)
10001268:	f443 7380 	orr.w	r3, r3, #256	; 0x100
1000126c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
1000126e:	f7ff fa75 	bl	1000075c <HAL_GetTick>
10001272:	60b8      	str	r0, [r7, #8]

    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
10001274:	e008      	b.n	10001288 <HAL_RCC_OscConfig+0x5c4>
    {
      if ((HAL_GetTick() - tickstart) > DBP_TIMEOUT_VALUE)
10001276:	f7ff fa71 	bl	1000075c <HAL_GetTick>
1000127a:	4602      	mov	r2, r0
1000127c:	68bb      	ldr	r3, [r7, #8]
1000127e:	1ad3      	subs	r3, r2, r3
10001280:	2b64      	cmp	r3, #100	; 0x64
10001282:	d901      	bls.n	10001288 <HAL_RCC_OscConfig+0x5c4>
      {
        return HAL_TIMEOUT;
10001284:	2303      	movs	r3, #3
10001286:	e048      	b.n	1000131a <HAL_RCC_OscConfig+0x656>
    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
10001288:	4b0a      	ldr	r3, [pc, #40]	; (100012b4 <HAL_RCC_OscConfig+0x5f0>)
1000128a:	681b      	ldr	r3, [r3, #0]
1000128c:	f403 7380 	and.w	r3, r3, #256	; 0x100
10001290:	2b00      	cmp	r3, #0
10001292:	d0f0      	beq.n	10001276 <HAL_RCC_OscConfig+0x5b2>
      }
    }

    result = HAL_RCC_LSEConfig(RCC_OscInitStruct->LSEState);
10001294:	687b      	ldr	r3, [r7, #4]
10001296:	689b      	ldr	r3, [r3, #8]
10001298:	4618      	mov	r0, r3
1000129a:	f000 f8ae 	bl	100013fa <HAL_RCC_LSEConfig>
1000129e:	4603      	mov	r3, r0
100012a0:	73fb      	strb	r3, [r7, #15]
    if (result != HAL_OK)
100012a2:	7bfb      	ldrb	r3, [r7, #15]
100012a4:	2b00      	cmp	r3, #0
100012a6:	d007      	beq.n	100012b8 <HAL_RCC_OscConfig+0x5f4>
    {
      return result;
100012a8:	7bfb      	ldrb	r3, [r7, #15]
100012aa:	e036      	b.n	1000131a <HAL_RCC_OscConfig+0x656>
100012ac:	10020000 	.word	0x10020000
100012b0:	10020004 	.word	0x10020004
100012b4:	50001000 	.word	0x50001000
  } /* Close LSE Configuration */

  /*-------------------------------- PLL Configuration -----------------------*/

  /* Configure PLL1 */
  result = RCC_PLL1_Config(&(RCC_OscInitStruct->PLL));
100012b8:	687b      	ldr	r3, [r7, #4]
100012ba:	3324      	adds	r3, #36	; 0x24
100012bc:	4618      	mov	r0, r3
100012be:	f000 f919 	bl	100014f4 <RCC_PLL1_Config>
100012c2:	4603      	mov	r3, r0
100012c4:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
100012c6:	7bfb      	ldrb	r3, [r7, #15]
100012c8:	2b00      	cmp	r3, #0
100012ca:	d001      	beq.n	100012d0 <HAL_RCC_OscConfig+0x60c>
  {
    return result;
100012cc:	7bfb      	ldrb	r3, [r7, #15]
100012ce:	e024      	b.n	1000131a <HAL_RCC_OscConfig+0x656>
  }

  /* Configure PLL2 */
  result = RCCEx_PLL2_Config(&(RCC_OscInitStruct->PLL2));
100012d0:	687b      	ldr	r3, [r7, #4]
100012d2:	3360      	adds	r3, #96	; 0x60
100012d4:	4618      	mov	r0, r3
100012d6:	f001 f943 	bl	10002560 <RCCEx_PLL2_Config>
100012da:	4603      	mov	r3, r0
100012dc:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
100012de:	7bfb      	ldrb	r3, [r7, #15]
100012e0:	2b00      	cmp	r3, #0
100012e2:	d001      	beq.n	100012e8 <HAL_RCC_OscConfig+0x624>
  {
    return result;
100012e4:	7bfb      	ldrb	r3, [r7, #15]
100012e6:	e018      	b.n	1000131a <HAL_RCC_OscConfig+0x656>
  }

  /* Configure PLL3 */
  result = RCCEx_PLL3_Config(&(RCC_OscInitStruct->PLL3));
100012e8:	687b      	ldr	r3, [r7, #4]
100012ea:	339c      	adds	r3, #156	; 0x9c
100012ec:	4618      	mov	r0, r3
100012ee:	f001 fab9 	bl	10002864 <RCCEx_PLL3_Config>
100012f2:	4603      	mov	r3, r0
100012f4:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
100012f6:	7bfb      	ldrb	r3, [r7, #15]
100012f8:	2b00      	cmp	r3, #0
100012fa:	d001      	beq.n	10001300 <HAL_RCC_OscConfig+0x63c>
  {
    return result;
100012fc:	7bfb      	ldrb	r3, [r7, #15]
100012fe:	e00c      	b.n	1000131a <HAL_RCC_OscConfig+0x656>
  }

  /* Configure PLL4 */
  result = RCCEx_PLL4_Config(&(RCC_OscInitStruct->PLL4));
10001300:	687b      	ldr	r3, [r7, #4]
10001302:	33d8      	adds	r3, #216	; 0xd8
10001304:	4618      	mov	r0, r3
10001306:	f001 fc17 	bl	10002b38 <RCCEx_PLL4_Config>
1000130a:	4603      	mov	r3, r0
1000130c:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
1000130e:	7bfb      	ldrb	r3, [r7, #15]
10001310:	2b00      	cmp	r3, #0
10001312:	d001      	beq.n	10001318 <HAL_RCC_OscConfig+0x654>
  {
    return result;
10001314:	7bfb      	ldrb	r3, [r7, #15]
10001316:	e000      	b.n	1000131a <HAL_RCC_OscConfig+0x656>
  }

  return HAL_OK;
10001318:	2300      	movs	r3, #0
}
1000131a:	4618      	mov	r0, r3
1000131c:	3710      	adds	r7, #16
1000131e:	46bd      	mov	sp, r7
10001320:	bd80      	pop	{r7, pc}
10001322:	bf00      	nop

10001324 <HAL_RCC_HSEConfig>:
  *               @arg RCC_HSE_BYPASS_DIG: HSE oscillator bypassed with external
  *                    clock using a full-swing digital signal provided to OSC_IN
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_HSEConfig(uint32_t State)
{
10001324:	b580      	push	{r7, lr}
10001326:	b084      	sub	sp, #16
10001328:	af00      	add	r7, sp, #0
1000132a:	6078      	str	r0, [r7, #4]

  /* Check parameter */
  assert_param(IS_RCC_HSE(State));

  /* Disable HSEON before configuring the HSE --------------*/
  WRITE_REG(RCC->OCENCLRR, RCC_OCENCLRR_HSEON);
1000132c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001330:	f44f 7280 	mov.w	r2, #256	; 0x100
10001334:	611a      	str	r2, [r3, #16]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10001336:	f7ff fa11 	bl	1000075c <HAL_GetTick>
1000133a:	60f8      	str	r0, [r7, #12]

  /* Wait till HSE is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
1000133c:	e008      	b.n	10001350 <HAL_RCC_HSEConfig+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
1000133e:	f7ff fa0d 	bl	1000075c <HAL_GetTick>
10001342:	4602      	mov	r2, r0
10001344:	68fb      	ldr	r3, [r7, #12]
10001346:	1ad3      	subs	r3, r2, r3
10001348:	2b64      	cmp	r3, #100	; 0x64
1000134a:	d901      	bls.n	10001350 <HAL_RCC_HSEConfig+0x2c>
    {
      return HAL_TIMEOUT;
1000134c:	2303      	movs	r3, #3
1000134e:	e050      	b.n	100013f2 <HAL_RCC_HSEConfig+0xce>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
10001350:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001354:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10001358:	f403 7380 	and.w	r3, r3, #256	; 0x100
1000135c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
10001360:	d0ed      	beq.n	1000133e <HAL_RCC_HSEConfig+0x1a>
    }
  }

  /* Clear remaining bits */
  WRITE_REG(RCC->OCENCLRR, (RCC_OCENCLRR_DIGBYP | RCC_OCENSETR_HSEBYP));
10001362:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001366:	f44f 6290 	mov.w	r2, #1152	; 0x480
1000136a:	611a      	str	r2, [r3, #16]

  /* Enable HSE if needed ---------------------------------------*/
  if (State != RCC_HSE_OFF)
1000136c:	687b      	ldr	r3, [r7, #4]
1000136e:	2b00      	cmp	r3, #0
10001370:	d03e      	beq.n	100013f0 <HAL_RCC_HSEConfig+0xcc>
  {
    if (State == RCC_HSE_BYPASS)
10001372:	687b      	ldr	r3, [r7, #4]
10001374:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
10001378:	d108      	bne.n	1000138c <HAL_RCC_HSEConfig+0x68>
    {
      SET_BIT(RCC->OCENSETR, RCC_OCENSETR_HSEBYP);
1000137a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000137e:	68db      	ldr	r3, [r3, #12]
10001380:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001384:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
10001388:	60d3      	str	r3, [r2, #12]
1000138a:	e013      	b.n	100013b4 <HAL_RCC_HSEConfig+0x90>
    }
    else if (State == RCC_HSE_BYPASS_DIG)
1000138c:	687b      	ldr	r3, [r7, #4]
1000138e:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
10001392:	d10f      	bne.n	100013b4 <HAL_RCC_HSEConfig+0x90>
    {
      SET_BIT(RCC->OCENSETR, RCC_OCENCLRR_DIGBYP);
10001394:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001398:	68db      	ldr	r3, [r3, #12]
1000139a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000139e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
100013a2:	60d3      	str	r3, [r2, #12]
      SET_BIT(RCC->OCENSETR, RCC_OCENSETR_HSEBYP);
100013a4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100013a8:	68db      	ldr	r3, [r3, #12]
100013aa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100013ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
100013b2:	60d3      	str	r3, [r2, #12]
    }

    /* Enable oscillator */
    SET_BIT(RCC->OCENSETR, RCC_OCENSETR_HSEON);
100013b4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100013b8:	68db      	ldr	r3, [r3, #12]
100013ba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100013be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
100013c2:	60d3      	str	r3, [r2, #12]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
100013c4:	f7ff f9ca 	bl	1000075c <HAL_GetTick>
100013c8:	60f8      	str	r0, [r7, #12]

    /* Wait till HSE is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
100013ca:	e008      	b.n	100013de <HAL_RCC_HSEConfig+0xba>
    {
      if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
100013cc:	f7ff f9c6 	bl	1000075c <HAL_GetTick>
100013d0:	4602      	mov	r2, r0
100013d2:	68fb      	ldr	r3, [r7, #12]
100013d4:	1ad3      	subs	r3, r2, r3
100013d6:	2b64      	cmp	r3, #100	; 0x64
100013d8:	d901      	bls.n	100013de <HAL_RCC_HSEConfig+0xba>
      {
        return HAL_TIMEOUT;
100013da:	2303      	movs	r3, #3
100013dc:	e009      	b.n	100013f2 <HAL_RCC_HSEConfig+0xce>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
100013de:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100013e2:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
100013e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
100013ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
100013ee:	d1ed      	bne.n	100013cc <HAL_RCC_HSEConfig+0xa8>
      }
    }
  }

  return HAL_OK;
100013f0:	2300      	movs	r3, #0
}
100013f2:	4618      	mov	r0, r3
100013f4:	3710      	adds	r7, #16
100013f6:	46bd      	mov	sp, r7
100013f8:	bd80      	pop	{r7, pc}

100013fa <HAL_RCC_LSEConfig>:
  *            @arg RCC_LSE_BYPASS_DIG: LSE oscillator bypassed with external
  *                 clock using a full-swing digital signal provided to OSC32_IN
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_LSEConfig(uint32_t State)
{
100013fa:	b580      	push	{r7, lr}
100013fc:	b084      	sub	sp, #16
100013fe:	af00      	add	r7, sp, #0
10001400:	6078      	str	r0, [r7, #4]

  /* Check parameter */
  assert_param(IS_RCC_LSE(State));

  /* Turning LSE off is needed before configuring */
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
10001402:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001406:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
1000140a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000140e:	f023 0301 	bic.w	r3, r3, #1
10001412:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10001416:	f7ff f9a1 	bl	1000075c <HAL_GetTick>
1000141a:	60f8      	str	r0, [r7, #12]

  /* Wait till LSE is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
1000141c:	e00a      	b.n	10001434 <HAL_RCC_LSEConfig+0x3a>
  {
    if ((HAL_GetTick() - tickstart) > LSE_TIMEOUT_VALUE)
1000141e:	f7ff f99d 	bl	1000075c <HAL_GetTick>
10001422:	4602      	mov	r2, r0
10001424:	68fb      	ldr	r3, [r7, #12]
10001426:	1ad3      	subs	r3, r2, r3
10001428:	f241 3288 	movw	r2, #5000	; 0x1388
1000142c:	4293      	cmp	r3, r2
1000142e:	d901      	bls.n	10001434 <HAL_RCC_LSEConfig+0x3a>
    {
      return HAL_TIMEOUT;
10001430:	2303      	movs	r3, #3
10001432:	e05b      	b.n	100014ec <HAL_RCC_LSEConfig+0xf2>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
10001434:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001438:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
1000143c:	f003 0304 	and.w	r3, r3, #4
10001440:	2b04      	cmp	r3, #4
10001442:	d0ec      	beq.n	1000141e <HAL_RCC_LSEConfig+0x24>
    }
  }

  /* Clear remaining bits */
  CLEAR_BIT(RCC->BDCR, (RCC_BDCR_LSEBYP | RCC_BDCR_DIGBYP));
10001444:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001448:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
1000144c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001450:	f023 030a 	bic.w	r3, r3, #10
10001454:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

  /* Enable LSE if needed */
  if (State != RCC_LSE_OFF)
10001458:	687b      	ldr	r3, [r7, #4]
1000145a:	2b00      	cmp	r3, #0
1000145c:	d045      	beq.n	100014ea <HAL_RCC_LSEConfig+0xf0>
  {
    if (State == RCC_LSE_BYPASS)
1000145e:	687b      	ldr	r3, [r7, #4]
10001460:	2b03      	cmp	r3, #3
10001462:	d10a      	bne.n	1000147a <HAL_RCC_LSEConfig+0x80>
    {
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
10001464:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001468:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
1000146c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001470:	f043 0302 	orr.w	r3, r3, #2
10001474:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
10001478:	e016      	b.n	100014a8 <HAL_RCC_LSEConfig+0xae>
    }
    else if (State == RCC_LSE_BYPASS_DIG)
1000147a:	687b      	ldr	r3, [r7, #4]
1000147c:	2b0b      	cmp	r3, #11
1000147e:	d113      	bne.n	100014a8 <HAL_RCC_LSEConfig+0xae>
    {
      SET_BIT(RCC->BDCR, RCC_BDCR_DIGBYP);
10001480:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001484:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10001488:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000148c:	f043 0308 	orr.w	r3, r3, #8
10001490:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
10001494:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001498:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
1000149c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100014a0:	f043 0302 	orr.w	r3, r3, #2
100014a4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
    }

    /* Enable oscillator */
    SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
100014a8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100014ac:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
100014b0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100014b4:	f043 0301 	orr.w	r3, r3, #1
100014b8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
100014bc:	f7ff f94e 	bl	1000075c <HAL_GetTick>
100014c0:	60f8      	str	r0, [r7, #12]

    /* Wait till LSE is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
100014c2:	e00a      	b.n	100014da <HAL_RCC_LSEConfig+0xe0>
    {
      if ((HAL_GetTick() - tickstart) > LSE_TIMEOUT_VALUE)
100014c4:	f7ff f94a 	bl	1000075c <HAL_GetTick>
100014c8:	4602      	mov	r2, r0
100014ca:	68fb      	ldr	r3, [r7, #12]
100014cc:	1ad3      	subs	r3, r2, r3
100014ce:	f241 3288 	movw	r2, #5000	; 0x1388
100014d2:	4293      	cmp	r3, r2
100014d4:	d901      	bls.n	100014da <HAL_RCC_LSEConfig+0xe0>
      {
        return HAL_TIMEOUT;
100014d6:	2303      	movs	r3, #3
100014d8:	e008      	b.n	100014ec <HAL_RCC_LSEConfig+0xf2>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
100014da:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100014de:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
100014e2:	f003 0304 	and.w	r3, r3, #4
100014e6:	2b04      	cmp	r3, #4
100014e8:	d1ec      	bne.n	100014c4 <HAL_RCC_LSEConfig+0xca>
      }
    }
  } /* Enable LSE if needed */

  return HAL_OK;
100014ea:	2300      	movs	r3, #0
}
100014ec:	4618      	mov	r0, r3
100014ee:	3710      	adds	r7, #16
100014f0:	46bd      	mov	sp, r7
100014f2:	bd80      	pop	{r7, pc}

100014f4 <RCC_PLL1_Config>:

HAL_StatusTypeDef RCC_PLL1_Config(RCC_PLLInitTypeDef *pll1)
{
100014f4:	b580      	push	{r7, lr}
100014f6:	b084      	sub	sp, #16
100014f8:	af00      	add	r7, sp, #0
100014fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll1->PLLState));
  if ((pll1->PLLState) != RCC_PLL_NONE)
100014fc:	687b      	ldr	r3, [r7, #4]
100014fe:	681b      	ldr	r3, [r3, #0]
10001500:	2b00      	cmp	r3, #0
10001502:	f000 8174 	beq.w	100017ee <RCC_PLL1_Config+0x2fa>
  {
    /* Check if the PLL is used as system clock or not (MPU, MCU, AXISS)*/
    if (!__IS_PLL1_IN_USE()) /* If not used then */
10001506:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000150a:	6a1b      	ldr	r3, [r3, #32]
1000150c:	f003 0303 	and.w	r3, r3, #3
10001510:	2b02      	cmp	r3, #2
10001512:	d108      	bne.n	10001526 <RCC_PLL1_Config+0x32>
10001514:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001518:	6a1b      	ldr	r3, [r3, #32]
1000151a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
1000151e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001522:	f000 8162 	beq.w	100017ea <RCC_PLL1_Config+0x2f6>
10001526:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000152a:	6a1b      	ldr	r3, [r3, #32]
1000152c:	f003 0303 	and.w	r3, r3, #3
10001530:	2b03      	cmp	r3, #3
10001532:	d108      	bne.n	10001546 <RCC_PLL1_Config+0x52>
10001534:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001538:	6a1b      	ldr	r3, [r3, #32]
1000153a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
1000153e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001542:	f000 8152 	beq.w	100017ea <RCC_PLL1_Config+0x2f6>
    {
      if ((pll1->PLLState) == RCC_PLL_ON)
10001546:	687b      	ldr	r3, [r7, #4]
10001548:	681b      	ldr	r3, [r3, #0]
1000154a:	2b02      	cmp	r3, #2
1000154c:	f040 8123 	bne.w	10001796 <RCC_PLL1_Config+0x2a2>
        assert_param(IS_RCC_PLLP1_VALUE(pll1->PLLP));
        assert_param(IS_RCC_PLLQ1_VALUE(pll1->PLLQ));
        assert_param(IS_RCC_PLLR1_VALUE(pll1->PLLR));

        /*Disable the post-dividers*/
        __HAL_RCC_PLL1CLKOUT_DISABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
10001550:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001554:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10001558:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000155c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
10001560:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
        /* Disable the main PLL. */
        __HAL_RCC_PLL1_DISABLE();
10001564:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001568:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
1000156c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001570:	f023 0301 	bic.w	r3, r3, #1
10001574:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10001578:	f7ff f8f0 	bl	1000075c <HAL_GetTick>
1000157c:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
1000157e:	e008      	b.n	10001592 <RCC_PLL1_Config+0x9e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10001580:	f7ff f8ec 	bl	1000075c <HAL_GetTick>
10001584:	4602      	mov	r2, r0
10001586:	68fb      	ldr	r3, [r7, #12]
10001588:	1ad3      	subs	r3, r2, r3
1000158a:	2b64      	cmp	r3, #100	; 0x64
1000158c:	d901      	bls.n	10001592 <RCC_PLL1_Config+0x9e>
          {
            return HAL_TIMEOUT;
1000158e:	2303      	movs	r3, #3
10001590:	e12e      	b.n	100017f0 <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
10001592:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001596:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
1000159a:	f003 0302 	and.w	r3, r3, #2
1000159e:	2b02      	cmp	r3, #2
100015a0:	d0ee      	beq.n	10001580 <RCC_PLL1_Config+0x8c>
        -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
        -Fractional Division Enable (PLLxFRACNEN)
        -Fractional Division factor (FRACNx)*/

        /* Do not change pll src if already in use */
        if (__IS_PLL2_IN_USE())
100015a2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100015a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100015a8:	f003 0307 	and.w	r3, r3, #7
100015ac:	2b02      	cmp	r3, #2
100015ae:	d112      	bne.n	100015d6 <RCC_PLL1_Config+0xe2>
100015b0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100015b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100015b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100015ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100015be:	d10a      	bne.n	100015d6 <RCC_PLL1_Config+0xe2>
        {
          if (pll1->PLLSource != __HAL_RCC_GET_PLL12_SOURCE())
100015c0:	687b      	ldr	r3, [r7, #4]
100015c2:	685a      	ldr	r2, [r3, #4]
100015c4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100015c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
100015ca:	f003 0303 	and.w	r3, r3, #3
100015ce:	429a      	cmp	r2, r3
100015d0:	d00c      	beq.n	100015ec <RCC_PLL1_Config+0xf8>
          {
            return HAL_ERROR;
100015d2:	2301      	movs	r3, #1
100015d4:	e10c      	b.n	100017f0 <RCC_PLL1_Config+0x2fc>
          }
        }
        else
        {
          /* Configure PLL1 and PLL2 clock source */
          __HAL_RCC_PLL12_SOURCE(pll1->PLLSource);
100015d6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100015da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
100015dc:	f023 0203 	bic.w	r2, r3, #3
100015e0:	687b      	ldr	r3, [r7, #4]
100015e2:	685b      	ldr	r3, [r3, #4]
100015e4:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100015e8:	4313      	orrs	r3, r2
100015ea:	628b      	str	r3, [r1, #40]	; 0x28
        }

        /* Wait till PLL SOURCE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL12SRCRDY) == RESET)
100015ec:	e008      	b.n	10001600 <RCC_PLL1_Config+0x10c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100015ee:	f7ff f8b5 	bl	1000075c <HAL_GetTick>
100015f2:	4602      	mov	r2, r0
100015f4:	68fb      	ldr	r3, [r7, #12]
100015f6:	1ad3      	subs	r3, r2, r3
100015f8:	2b64      	cmp	r3, #100	; 0x64
100015fa:	d901      	bls.n	10001600 <RCC_PLL1_Config+0x10c>
          {
            return HAL_TIMEOUT;
100015fc:	2303      	movs	r3, #3
100015fe:	e0f7      	b.n	100017f0 <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL12SRCRDY) == RESET)
10001600:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10001606:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
1000160a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
1000160e:	d1ee      	bne.n	100015ee <RCC_PLL1_Config+0xfa>
          }
        }

        /* Configure the PLL1 multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(
10001610:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001614:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
10001618:	4b77      	ldr	r3, [pc, #476]	; (100017f8 <RCC_PLL1_Config+0x304>)
1000161a:	4013      	ands	r3, r2
1000161c:	687a      	ldr	r2, [r7, #4]
1000161e:	68d2      	ldr	r2, [r2, #12]
10001620:	1e51      	subs	r1, r2, #1
10001622:	687a      	ldr	r2, [r7, #4]
10001624:	6892      	ldr	r2, [r2, #8]
10001626:	3a01      	subs	r2, #1
10001628:	0412      	lsls	r2, r2, #16
1000162a:	430a      	orrs	r2, r1
1000162c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001630:	4313      	orrs	r3, r2
10001632:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
10001636:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000163a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
1000163e:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
10001642:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
10001646:	687a      	ldr	r2, [r7, #4]
10001648:	6912      	ldr	r2, [r2, #16]
1000164a:	1e51      	subs	r1, r2, #1
1000164c:	687a      	ldr	r2, [r7, #4]
1000164e:	6952      	ldr	r2, [r2, #20]
10001650:	3a01      	subs	r2, #1
10001652:	0212      	lsls	r2, r2, #8
10001654:	4311      	orrs	r1, r2
10001656:	687a      	ldr	r2, [r7, #4]
10001658:	6992      	ldr	r2, [r2, #24]
1000165a:	3a01      	subs	r2, #1
1000165c:	0412      	lsls	r2, r2, #16
1000165e:	430a      	orrs	r2, r1
10001660:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001664:	4313      	orrs	r3, r2
10001666:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
          pll1->PLLQ,
          pll1->PLLR);


        /* Configure the Fractional Divider */
        __HAL_RCC_PLL1FRACV_DISABLE(); /*Set FRACLE to '0' */
1000166a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000166e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
10001672:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001676:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
1000167a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
        /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
        if ((pll1->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll1->PLLMODE == RCC_PLL_INTEGER))
1000167e:	687b      	ldr	r3, [r7, #4]
10001680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10001682:	2b02      	cmp	r3, #2
10001684:	d003      	beq.n	1000168e <RCC_PLL1_Config+0x19a>
10001686:	687b      	ldr	r3, [r7, #4]
10001688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000168a:	2b00      	cmp	r3, #0
1000168c:	d10c      	bne.n	100016a8 <RCC_PLL1_Config+0x1b4>
        {
          /* Do not use the fractional divider */
          __HAL_RCC_PLL1FRACV_CONFIG(0U); /* Set FRACV to '0' */
1000168e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001692:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
10001696:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000169a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
1000169e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
100016a2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
100016a6:	e00f      	b.n	100016c8 <RCC_PLL1_Config+0x1d4>
        }
        else
        {
          /* Configure PLL  PLL1FRACV  in fractional mode*/
          __HAL_RCC_PLL1FRACV_CONFIG(pll1->PLLFRACV);
100016a8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100016ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
100016b0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
100016b4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
100016b8:	687a      	ldr	r2, [r7, #4]
100016ba:	6a12      	ldr	r2, [r2, #32]
100016bc:	00d2      	lsls	r2, r2, #3
100016be:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100016c2:	4313      	orrs	r3, r2
100016c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
        }
        __HAL_RCC_PLL1FRACV_ENABLE(); /* Set FRACLE to 1 */
100016c8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100016cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
100016d0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100016d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
100016d8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c


        /* Configure the Spread Control */
        if (pll1->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
100016dc:	687b      	ldr	r3, [r7, #4]
100016de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100016e0:	2b02      	cmp	r3, #2
100016e2:	d124      	bne.n	1000172e <RCC_PLL1_Config+0x23a>
          assert_param(IS_RCC_SSCG_MODE(pll1->SSCG_MODE));
          assert_param(IS_RCC_RPDFN_DIS(pll1->RPDFN_DIS));
          assert_param(IS_RCC_TPDFN_DIS(pll1->TPDFN_DIS));
          assert_param(IS_RCC_MOD_PER(pll1->MOD_PER));

          __HAL_RCC_PLL1CSGCONFIG(pll1->MOD_PER, pll1->TPDFN_DIS, pll1->RPDFN_DIS,
100016e4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100016e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
100016ec:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
100016f0:	687b      	ldr	r3, [r7, #4]
100016f2:	6a99      	ldr	r1, [r3, #40]	; 0x28
100016f4:	687b      	ldr	r3, [r7, #4]
100016f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
100016f8:	4319      	orrs	r1, r3
100016fa:	687b      	ldr	r3, [r7, #4]
100016fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
100016fe:	4319      	orrs	r1, r3
10001700:	687b      	ldr	r3, [r7, #4]
10001702:	6b5b      	ldr	r3, [r3, #52]	; 0x34
10001704:	4319      	orrs	r1, r3
10001706:	687b      	ldr	r3, [r7, #4]
10001708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
1000170a:	041b      	lsls	r3, r3, #16
1000170c:	430b      	orrs	r3, r1
1000170e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001712:	4313      	orrs	r3, r2
10001714:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
                                  pll1->SSCG_MODE, pll1->INC_STEP);

          __HAL_RCC_PLL1_SSMODE_ENABLE();
10001718:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000171c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10001720:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001724:	f043 0304 	orr.w	r3, r3, #4
10001728:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
1000172c:	e009      	b.n	10001742 <RCC_PLL1_Config+0x24e>
        }
        else
        {
          __HAL_RCC_PLL1_SSMODE_DISABLE();
1000172e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001732:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10001736:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000173a:	f023 0304 	bic.w	r3, r3, #4
1000173e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
        }

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
10001742:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001746:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
1000174a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000174e:	f043 0301 	orr.w	r3, r3, #1
10001752:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10001756:	f7ff f801 	bl	1000075c <HAL_GetTick>
1000175a:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
1000175c:	e008      	b.n	10001770 <RCC_PLL1_Config+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
1000175e:	f7fe fffd 	bl	1000075c <HAL_GetTick>
10001762:	4602      	mov	r2, r0
10001764:	68fb      	ldr	r3, [r7, #12]
10001766:	1ad3      	subs	r3, r2, r3
10001768:	2b64      	cmp	r3, #100	; 0x64
1000176a:	d901      	bls.n	10001770 <RCC_PLL1_Config+0x27c>
          {
            return HAL_TIMEOUT;
1000176c:	2303      	movs	r3, #3
1000176e:	e03f      	b.n	100017f0 <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
10001770:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001774:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10001778:	f003 0302 	and.w	r3, r3, #2
1000177c:	2b02      	cmp	r3, #2
1000177e:	d1ee      	bne.n	1000175e <RCC_PLL1_Config+0x26a>
          }
        }
        /* Enable post-dividers */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
10001780:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001784:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10001788:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000178c:	f043 0370 	orr.w	r3, r3, #112	; 0x70
10001790:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      if ((pll1->PLLState) == RCC_PLL_ON)
10001794:	e02b      	b.n	100017ee <RCC_PLL1_Config+0x2fa>
      }
      else
      {
        /*Disable the post-dividers*/
        __HAL_RCC_PLL1CLKOUT_DISABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
10001796:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000179a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
1000179e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100017a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
100017a6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
100017aa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100017ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
100017b2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100017b6:	f023 0301 	bic.w	r3, r3, #1
100017ba:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100017be:	f7fe ffcd 	bl	1000075c <HAL_GetTick>
100017c2:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
100017c4:	e008      	b.n	100017d8 <RCC_PLL1_Config+0x2e4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100017c6:	f7fe ffc9 	bl	1000075c <HAL_GetTick>
100017ca:	4602      	mov	r2, r0
100017cc:	68fb      	ldr	r3, [r7, #12]
100017ce:	1ad3      	subs	r3, r2, r3
100017d0:	2b64      	cmp	r3, #100	; 0x64
100017d2:	d901      	bls.n	100017d8 <RCC_PLL1_Config+0x2e4>
          {
            return HAL_TIMEOUT;
100017d4:	2303      	movs	r3, #3
100017d6:	e00b      	b.n	100017f0 <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
100017d8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100017dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
100017e0:	f003 0302 	and.w	r3, r3, #2
100017e4:	2b02      	cmp	r3, #2
100017e6:	d0ee      	beq.n	100017c6 <RCC_PLL1_Config+0x2d2>
      if ((pll1->PLLState) == RCC_PLL_ON)
100017e8:	e001      	b.n	100017ee <RCC_PLL1_Config+0x2fa>
        }
      }
    }
    else
    {
      return HAL_ERROR;
100017ea:	2301      	movs	r3, #1
100017ec:	e000      	b.n	100017f0 <RCC_PLL1_Config+0x2fc>
    }
  }
  return HAL_OK;
100017ee:	2300      	movs	r3, #0

}
100017f0:	4618      	mov	r0, r3
100017f2:	3710      	adds	r7, #16
100017f4:	46bd      	mov	sp, r7
100017f6:	bd80      	pop	{r7, pc}
100017f8:	ffc0fe00 	.word	0xffc0fe00

100017fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct)
{
100017fc:	b580      	push	{r7, lr}
100017fe:	b084      	sub	sp, #16
10001800:	af00      	add	r7, sp, #0
10001802:	6078      	str	r0, [r7, #4]

  HAL_StatusTypeDef status = HAL_OK;
10001804:	2300      	movs	r3, #0
10001806:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
10001808:	687b      	ldr	r3, [r7, #4]
1000180a:	2b00      	cmp	r3, #0
1000180c:	d101      	bne.n	10001812 <HAL_RCC_ClockConfig+0x16>
  {
    return HAL_ERROR;
1000180e:	2301      	movs	r3, #1
10001810:	e102      	b.n	10001a18 <HAL_RCC_ClockConfig+0x21c>
  }

  assert_param(IS_RCC_CLOCKTYPETYPE(RCC_ClkInitStruct->ClockType));

  /* Configure MPU block if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_MPU) == RCC_CLOCKTYPE_MPU)
10001812:	687b      	ldr	r3, [r7, #4]
10001814:	681b      	ldr	r3, [r3, #0]
10001816:	f003 0301 	and.w	r3, r3, #1
1000181a:	2b00      	cmp	r3, #0
1000181c:	d00b      	beq.n	10001836 <HAL_RCC_ClockConfig+0x3a>
  {
    status = RCC_MPUConfig(&(RCC_ClkInitStruct->MPUInit));
1000181e:	687b      	ldr	r3, [r7, #4]
10001820:	3304      	adds	r3, #4
10001822:	4618      	mov	r0, r3
10001824:	f000 f8fc 	bl	10001a20 <RCC_MPUConfig>
10001828:	4603      	mov	r3, r0
1000182a:	73fb      	strb	r3, [r7, #15]
    if (status  != HAL_OK)
1000182c:	7bfb      	ldrb	r3, [r7, #15]
1000182e:	2b00      	cmp	r3, #0
10001830:	d001      	beq.n	10001836 <HAL_RCC_ClockConfig+0x3a>
    {
      return status;
10001832:	7bfb      	ldrb	r3, [r7, #15]
10001834:	e0f0      	b.n	10001a18 <HAL_RCC_ClockConfig+0x21c>
    }
  }

  /* Configure AXISS block if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_ACLK) == RCC_CLOCKTYPE_ACLK)
10001836:	687b      	ldr	r3, [r7, #4]
10001838:	681b      	ldr	r3, [r3, #0]
1000183a:	f003 0302 	and.w	r3, r3, #2
1000183e:	2b00      	cmp	r3, #0
10001840:	d00b      	beq.n	1000185a <HAL_RCC_ClockConfig+0x5e>
  {
    status = RCC_AXISSConfig(&(RCC_ClkInitStruct->AXISSInit));
10001842:	687b      	ldr	r3, [r7, #4]
10001844:	330c      	adds	r3, #12
10001846:	4618      	mov	r0, r3
10001848:	f000 f960 	bl	10001b0c <RCC_AXISSConfig>
1000184c:	4603      	mov	r3, r0
1000184e:	73fb      	strb	r3, [r7, #15]
    if (status  != HAL_OK)
10001850:	7bfb      	ldrb	r3, [r7, #15]
10001852:	2b00      	cmp	r3, #0
10001854:	d001      	beq.n	1000185a <HAL_RCC_ClockConfig+0x5e>
    {
      return status;
10001856:	7bfb      	ldrb	r3, [r7, #15]
10001858:	e0de      	b.n	10001a18 <HAL_RCC_ClockConfig+0x21c>
    }
  }

  /* Configure MCU block if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
1000185a:	687b      	ldr	r3, [r7, #4]
1000185c:	681b      	ldr	r3, [r3, #0]
1000185e:	f003 0304 	and.w	r3, r3, #4
10001862:	2b00      	cmp	r3, #0
10001864:	d00b      	beq.n	1000187e <HAL_RCC_ClockConfig+0x82>
  {
    status = RCC_MCUConfig(&(RCC_ClkInitStruct->MCUInit));
10001866:	687b      	ldr	r3, [r7, #4]
10001868:	3314      	adds	r3, #20
1000186a:	4618      	mov	r0, r3
1000186c:	f000 f9e2 	bl	10001c34 <RCC_MCUConfig>
10001870:	4603      	mov	r3, r0
10001872:	73fb      	strb	r3, [r7, #15]
    if (status  != HAL_OK)
10001874:	7bfb      	ldrb	r3, [r7, #15]
10001876:	2b00      	cmp	r3, #0
10001878:	d001      	beq.n	1000187e <HAL_RCC_ClockConfig+0x82>
    {
      return status;
1000187a:	7bfb      	ldrb	r3, [r7, #15]
1000187c:	e0cc      	b.n	10001a18 <HAL_RCC_ClockConfig+0x21c>
    }
  }

  /* Configure APB4 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
1000187e:	687b      	ldr	r3, [r7, #4]
10001880:	681b      	ldr	r3, [r3, #0]
10001882:	f003 0308 	and.w	r3, r3, #8
10001886:	2b00      	cmp	r3, #0
10001888:	d020      	beq.n	100018cc <HAL_RCC_ClockConfig+0xd0>
  {
    assert_param(IS_RCC_APB4DIV(RCC_ClkInitStruct->APB4_Div));
    /* Set APB4 division factor */
    __HAL_RCC_APB4_DIV(RCC_ClkInitStruct->APB4_Div);
1000188a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000188e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10001890:	f023 0207 	bic.w	r2, r3, #7
10001894:	687b      	ldr	r3, [r7, #4]
10001896:	69db      	ldr	r3, [r3, #28]
10001898:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000189c:	4313      	orrs	r3, r2
1000189e:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
100018a0:	f7fe ff5c 	bl	1000075c <HAL_GetTick>
100018a4:	60b8      	str	r0, [r7, #8]

    /* Wait till APB4 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB4DIVRDY) == RESET)
100018a6:	e009      	b.n	100018bc <HAL_RCC_ClockConfig+0xc0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
100018a8:	f7fe ff58 	bl	1000075c <HAL_GetTick>
100018ac:	4602      	mov	r2, r0
100018ae:	68bb      	ldr	r3, [r7, #8]
100018b0:	1ad3      	subs	r3, r2, r3
100018b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
100018b6:	d901      	bls.n	100018bc <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_TIMEOUT;
100018b8:	2303      	movs	r3, #3
100018ba:	e0ad      	b.n	10001a18 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB4DIVRDY) == RESET)
100018bc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100018c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
100018c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100018c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100018ca:	d1ed      	bne.n	100018a8 <HAL_RCC_ClockConfig+0xac>
      }
    }
  }

  /* Configure APB5 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
100018cc:	687b      	ldr	r3, [r7, #4]
100018ce:	681b      	ldr	r3, [r3, #0]
100018d0:	f003 0310 	and.w	r3, r3, #16
100018d4:	2b00      	cmp	r3, #0
100018d6:	d020      	beq.n	1000191a <HAL_RCC_ClockConfig+0x11e>
  {
    assert_param(IS_RCC_APB5DIV(RCC_ClkInitStruct->APB5_Div));
    /* Set APB5 division factor */
    __HAL_RCC_APB5_DIV(RCC_ClkInitStruct->APB5_Div);
100018d8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100018dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
100018de:	f023 0207 	bic.w	r2, r3, #7
100018e2:	687b      	ldr	r3, [r7, #4]
100018e4:	6a1b      	ldr	r3, [r3, #32]
100018e6:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100018ea:	4313      	orrs	r3, r2
100018ec:	640b      	str	r3, [r1, #64]	; 0x40

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
100018ee:	f7fe ff35 	bl	1000075c <HAL_GetTick>
100018f2:	60b8      	str	r0, [r7, #8]

    /* Wait till APB5 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB5DIVRDY) == RESET)
100018f4:	e009      	b.n	1000190a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
100018f6:	f7fe ff31 	bl	1000075c <HAL_GetTick>
100018fa:	4602      	mov	r2, r0
100018fc:	68bb      	ldr	r3, [r7, #8]
100018fe:	1ad3      	subs	r3, r2, r3
10001900:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10001904:	d901      	bls.n	1000190a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
10001906:	2303      	movs	r3, #3
10001908:	e086      	b.n	10001a18 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB5DIVRDY) == RESET)
1000190a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000190e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10001910:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001914:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001918:	d1ed      	bne.n	100018f6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Configure APB1 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
1000191a:	687b      	ldr	r3, [r7, #4]
1000191c:	681b      	ldr	r3, [r3, #0]
1000191e:	f003 0320 	and.w	r3, r3, #32
10001922:	2b00      	cmp	r3, #0
10001924:	d023      	beq.n	1000196e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_APB1DIV(RCC_ClkInitStruct->APB1_Div));
    /* Set APB1 division factor */
    __HAL_RCC_APB1_DIV(RCC_ClkInitStruct->APB1_Div);
10001926:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000192a:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
1000192e:	f023 0207 	bic.w	r2, r3, #7
10001932:	687b      	ldr	r3, [r7, #4]
10001934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10001936:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000193a:	4313      	orrs	r3, r2
1000193c:	f8c1 3834 	str.w	r3, [r1, #2100]	; 0x834

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10001940:	f7fe ff0c 	bl	1000075c <HAL_GetTick>
10001944:	60b8      	str	r0, [r7, #8]

    /* Wait till APB1 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB1DIVRDY) == RESET)
10001946:	e009      	b.n	1000195c <HAL_RCC_ClockConfig+0x160>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001948:	f7fe ff08 	bl	1000075c <HAL_GetTick>
1000194c:	4602      	mov	r2, r0
1000194e:	68bb      	ldr	r3, [r7, #8]
10001950:	1ad3      	subs	r3, r2, r3
10001952:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10001956:	d901      	bls.n	1000195c <HAL_RCC_ClockConfig+0x160>
      {
        return HAL_TIMEOUT;
10001958:	2303      	movs	r3, #3
1000195a:	e05d      	b.n	10001a18 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB1DIVRDY) == RESET)
1000195c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001960:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
10001964:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001968:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
1000196c:	d1ec      	bne.n	10001948 <HAL_RCC_ClockConfig+0x14c>
      }
    }
  }

  /* Configure APB2 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
1000196e:	687b      	ldr	r3, [r7, #4]
10001970:	681b      	ldr	r3, [r3, #0]
10001972:	f003 0340 	and.w	r3, r3, #64	; 0x40
10001976:	2b00      	cmp	r3, #0
10001978:	d023      	beq.n	100019c2 <HAL_RCC_ClockConfig+0x1c6>
  {
    assert_param(IS_RCC_APB2DIV(RCC_ClkInitStruct->APB2_Div));
    /* Set APB2 division factor */
    __HAL_RCC_APB2_DIV(RCC_ClkInitStruct->APB2_Div);
1000197a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000197e:	f8d3 3838 	ldr.w	r3, [r3, #2104]	; 0x838
10001982:	f023 0207 	bic.w	r2, r3, #7
10001986:	687b      	ldr	r3, [r7, #4]
10001988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000198a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000198e:	4313      	orrs	r3, r2
10001990:	f8c1 3838 	str.w	r3, [r1, #2104]	; 0x838

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10001994:	f7fe fee2 	bl	1000075c <HAL_GetTick>
10001998:	60b8      	str	r0, [r7, #8]

    /* Wait till APB2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB2DIVRDY) == RESET)
1000199a:	e009      	b.n	100019b0 <HAL_RCC_ClockConfig+0x1b4>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
1000199c:	f7fe fede 	bl	1000075c <HAL_GetTick>
100019a0:	4602      	mov	r2, r0
100019a2:	68bb      	ldr	r3, [r7, #8]
100019a4:	1ad3      	subs	r3, r2, r3
100019a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
100019aa:	d901      	bls.n	100019b0 <HAL_RCC_ClockConfig+0x1b4>
      {
        return HAL_TIMEOUT;
100019ac:	2303      	movs	r3, #3
100019ae:	e033      	b.n	10001a18 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB2DIVRDY) == RESET)
100019b0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100019b4:	f8d3 3838 	ldr.w	r3, [r3, #2104]	; 0x838
100019b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100019bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100019c0:	d1ec      	bne.n	1000199c <HAL_RCC_ClockConfig+0x1a0>
      }
    }
  }

  /* Configure APB3 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
100019c2:	687b      	ldr	r3, [r7, #4]
100019c4:	681b      	ldr	r3, [r3, #0]
100019c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
100019ca:	2b00      	cmp	r3, #0
100019cc:	d023      	beq.n	10001a16 <HAL_RCC_ClockConfig+0x21a>
  {
    assert_param(IS_RCC_APB3DIV(RCC_ClkInitStruct->APB3_Div));
    /* Set APB3 division factor */
    __HAL_RCC_APB3_DIV(RCC_ClkInitStruct->APB3_Div);
100019ce:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100019d2:	f8d3 383c 	ldr.w	r3, [r3, #2108]	; 0x83c
100019d6:	f023 0207 	bic.w	r2, r3, #7
100019da:	687b      	ldr	r3, [r7, #4]
100019dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
100019de:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100019e2:	4313      	orrs	r3, r2
100019e4:	f8c1 383c 	str.w	r3, [r1, #2108]	; 0x83c

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
100019e8:	f7fe feb8 	bl	1000075c <HAL_GetTick>
100019ec:	60b8      	str	r0, [r7, #8]

    /* Wait till APB3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB3DIVRDY) == RESET)
100019ee:	e009      	b.n	10001a04 <HAL_RCC_ClockConfig+0x208>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
100019f0:	f7fe feb4 	bl	1000075c <HAL_GetTick>
100019f4:	4602      	mov	r2, r0
100019f6:	68bb      	ldr	r3, [r7, #8]
100019f8:	1ad3      	subs	r3, r2, r3
100019fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
100019fe:	d901      	bls.n	10001a04 <HAL_RCC_ClockConfig+0x208>
      {
        return HAL_TIMEOUT;
10001a00:	2303      	movs	r3, #3
10001a02:	e009      	b.n	10001a18 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB3DIVRDY) == RESET)
10001a04:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001a08:	f8d3 383c 	ldr.w	r3, [r3, #2108]	; 0x83c
10001a0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001a10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001a14:	d1ec      	bne.n	100019f0 <HAL_RCC_ClockConfig+0x1f4>
      }
    }
  }

  return HAL_OK;
10001a16:	2300      	movs	r3, #0
}
10001a18:	4618      	mov	r0, r3
10001a1a:	3710      	adds	r7, #16
10001a1c:	46bd      	mov	sp, r7
10001a1e:	bd80      	pop	{r7, pc}

10001a20 <RCC_MPUConfig>:

HAL_StatusTypeDef RCC_MPUConfig(RCC_MPUInitTypeDef *RCC_MPUInitStruct)
{
10001a20:	b580      	push	{r7, lr}
10001a22:	b084      	sub	sp, #16
10001a24:	af00      	add	r7, sp, #0
10001a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  assert_param(IS_RCC_MPUSOURCE(RCC_MPUInitStruct->MPU_Clock));

  /* Ensure clock source is ready*/
  switch (RCC_MPUInitStruct->MPU_Clock)
10001a28:	687b      	ldr	r3, [r7, #4]
10001a2a:	681b      	ldr	r3, [r3, #0]
10001a2c:	2b03      	cmp	r3, #3
10001a2e:	d840      	bhi.n	10001ab2 <RCC_MPUConfig+0x92>
10001a30:	a201      	add	r2, pc, #4	; (adr r2, 10001a38 <RCC_MPUConfig+0x18>)
10001a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10001a36:	bf00      	nop
10001a38:	10001a49 	.word	0x10001a49
10001a3c:	10001a5d 	.word	0x10001a5d
10001a40:	10001a73 	.word	0x10001a73
10001a44:	10001a87 	.word	0x10001a87
  {
    case (RCC_MPUSOURCE_HSI):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10001a48:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001a4c:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10001a50:	f003 0301 	and.w	r3, r3, #1
10001a54:	2b01      	cmp	r3, #1
10001a56:	d02e      	beq.n	10001ab6 <RCC_MPUConfig+0x96>
      {
        return HAL_ERROR;
10001a58:	2301      	movs	r3, #1
10001a5a:	e053      	b.n	10001b04 <RCC_MPUConfig+0xe4>
    }

    case (RCC_MPUSOURCE_HSE):
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
10001a5c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001a60:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10001a64:	f403 7380 	and.w	r3, r3, #256	; 0x100
10001a68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
10001a6c:	d025      	beq.n	10001aba <RCC_MPUConfig+0x9a>
      {
        return HAL_ERROR;
10001a6e:	2301      	movs	r3, #1
10001a70:	e048      	b.n	10001b04 <RCC_MPUConfig+0xe4>
    }

    case (RCC_MPUSOURCE_PLL1):
    {
      /* Check the PLL1 ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
10001a72:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001a76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10001a7a:	f003 0302 	and.w	r3, r3, #2
10001a7e:	2b02      	cmp	r3, #2
10001a80:	d01d      	beq.n	10001abe <RCC_MPUConfig+0x9e>
      {
        return HAL_ERROR;
10001a82:	2301      	movs	r3, #1
10001a84:	e03e      	b.n	10001b04 <RCC_MPUConfig+0xe4>
    case (RCC_MPUSOURCE_MPUDIV):
    {
      assert_param(IS_RCC_MPUDIV(RCC_MPUInitStruct->MPU_Div));

      /* Check the PLL1 ready flag (as PLL1_P is the MPUDIV source */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
10001a86:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001a8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10001a8e:	f003 0302 	and.w	r3, r3, #2
10001a92:	2b02      	cmp	r3, #2
10001a94:	d001      	beq.n	10001a9a <RCC_MPUConfig+0x7a>
      {
        return HAL_ERROR;
10001a96:	2301      	movs	r3, #1
10001a98:	e034      	b.n	10001b04 <RCC_MPUConfig+0xe4>
      }

      /* Set MPU division factor */
      __HAL_RCC_MPU_DIV(RCC_MPUInitStruct->MPU_Div);
10001a9a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10001aa0:	f023 0207 	bic.w	r2, r3, #7
10001aa4:	687b      	ldr	r3, [r7, #4]
10001aa6:	685b      	ldr	r3, [r3, #4]
10001aa8:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001aac:	4313      	orrs	r3, r2
10001aae:	62cb      	str	r3, [r1, #44]	; 0x2c

      break;
10001ab0:	e006      	b.n	10001ac0 <RCC_MPUConfig+0xa0>
    }

    default:
      /* This case is impossible */
      return HAL_ERROR;
10001ab2:	2301      	movs	r3, #1
10001ab4:	e026      	b.n	10001b04 <RCC_MPUConfig+0xe4>
      break;
10001ab6:	bf00      	nop
10001ab8:	e002      	b.n	10001ac0 <RCC_MPUConfig+0xa0>
      break;
10001aba:	bf00      	nop
10001abc:	e000      	b.n	10001ac0 <RCC_MPUConfig+0xa0>
      break;
10001abe:	bf00      	nop

  }

  /* Set MPU clock source */
  __HAL_RCC_MPU_SOURCE(RCC_MPUInitStruct->MPU_Clock);
10001ac0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001ac4:	6a1b      	ldr	r3, [r3, #32]
10001ac6:	f023 0203 	bic.w	r2, r3, #3
10001aca:	687b      	ldr	r3, [r7, #4]
10001acc:	681b      	ldr	r3, [r3, #0]
10001ace:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001ad2:	4313      	orrs	r3, r2
10001ad4:	620b      	str	r3, [r1, #32]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10001ad6:	f7fe fe41 	bl	1000075c <HAL_GetTick>
10001ada:	60f8      	str	r0, [r7, #12]

  /* Wait till MPU is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MPUSRCRDY) == RESET)
10001adc:	e009      	b.n	10001af2 <RCC_MPUConfig+0xd2>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001ade:	f7fe fe3d 	bl	1000075c <HAL_GetTick>
10001ae2:	4602      	mov	r2, r0
10001ae4:	68fb      	ldr	r3, [r7, #12]
10001ae6:	1ad3      	subs	r3, r2, r3
10001ae8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10001aec:	d901      	bls.n	10001af2 <RCC_MPUConfig+0xd2>
    {
      return HAL_TIMEOUT;
10001aee:	2303      	movs	r3, #3
10001af0:	e008      	b.n	10001b04 <RCC_MPUConfig+0xe4>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MPUSRCRDY) == RESET)
10001af2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001af6:	6a1b      	ldr	r3, [r3, #32]
10001af8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001afc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001b00:	d1ed      	bne.n	10001ade <RCC_MPUConfig+0xbe>

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
#endif

  return HAL_OK;
10001b02:	2300      	movs	r3, #0
}
10001b04:	4618      	mov	r0, r3
10001b06:	3710      	adds	r7, #16
10001b08:	46bd      	mov	sp, r7
10001b0a:	bd80      	pop	{r7, pc}

10001b0c <RCC_AXISSConfig>:


HAL_StatusTypeDef RCC_AXISSConfig(RCC_AXISSInitTypeDef *RCC_AXISSInitStruct)
{
10001b0c:	b580      	push	{r7, lr}
10001b0e:	b084      	sub	sp, #16
10001b10:	af00      	add	r7, sp, #0
10001b12:	6078      	str	r0, [r7, #4]

  assert_param(IS_RCC_AXISSOURCE(RCC_AXISSInitStruct->AXI_Clock));
  assert_param(IS_RCC_AXIDIV(RCC_AXISSInitStruct->AXI_Div));

  /* Ensure clock source is ready*/
  switch (RCC_AXISSInitStruct->AXI_Clock)
10001b14:	687b      	ldr	r3, [r7, #4]
10001b16:	681b      	ldr	r3, [r3, #0]
10001b18:	2b01      	cmp	r3, #1
10001b1a:	d00e      	beq.n	10001b3a <RCC_AXISSConfig+0x2e>
10001b1c:	2b01      	cmp	r3, #1
10001b1e:	d302      	bcc.n	10001b26 <RCC_AXISSConfig+0x1a>
10001b20:	2b02      	cmp	r3, #2
10001b22:	d015      	beq.n	10001b50 <RCC_AXISSConfig+0x44>
      }
      break;
    }

    default:
      break;
10001b24:	e023      	b.n	10001b6e <RCC_AXISSConfig+0x62>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10001b26:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001b2a:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10001b2e:	f003 0301 	and.w	r3, r3, #1
10001b32:	2b01      	cmp	r3, #1
10001b34:	d016      	beq.n	10001b64 <RCC_AXISSConfig+0x58>
        return HAL_ERROR;
10001b36:	2301      	movs	r3, #1
10001b38:	e077      	b.n	10001c2a <RCC_AXISSConfig+0x11e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
10001b3a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001b3e:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10001b42:	f403 7380 	and.w	r3, r3, #256	; 0x100
10001b46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
10001b4a:	d00d      	beq.n	10001b68 <RCC_AXISSConfig+0x5c>
        return HAL_ERROR;
10001b4c:	2301      	movs	r3, #1
10001b4e:	e06c      	b.n	10001c2a <RCC_AXISSConfig+0x11e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
10001b50:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001b54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10001b58:	f003 0302 	and.w	r3, r3, #2
10001b5c:	2b02      	cmp	r3, #2
10001b5e:	d005      	beq.n	10001b6c <RCC_AXISSConfig+0x60>
        return HAL_ERROR;
10001b60:	2301      	movs	r3, #1
10001b62:	e062      	b.n	10001c2a <RCC_AXISSConfig+0x11e>
      break;
10001b64:	bf00      	nop
10001b66:	e002      	b.n	10001b6e <RCC_AXISSConfig+0x62>
      break;
10001b68:	bf00      	nop
10001b6a:	e000      	b.n	10001b6e <RCC_AXISSConfig+0x62>
      break;
10001b6c:	bf00      	nop

  }

  /* Set AXISS clock source */
  __HAL_RCC_AXISS_SOURCE(RCC_AXISSInitStruct->AXI_Clock);
10001b6e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10001b74:	f023 0207 	bic.w	r2, r3, #7
10001b78:	687b      	ldr	r3, [r7, #4]
10001b7a:	681b      	ldr	r3, [r3, #0]
10001b7c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001b80:	4313      	orrs	r3, r2
10001b82:	624b      	str	r3, [r1, #36]	; 0x24

  if (RCC_AXISSInitStruct->AXI_Clock != RCC_AXISSOURCE_OFF)
10001b84:	687b      	ldr	r3, [r7, #4]
10001b86:	681b      	ldr	r3, [r3, #0]
10001b88:	2b03      	cmp	r3, #3
10001b8a:	d016      	beq.n	10001bba <RCC_AXISSConfig+0xae>
  {
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10001b8c:	f7fe fde6 	bl	1000075c <HAL_GetTick>
10001b90:	60f8      	str	r0, [r7, #12]

    /* Wait till AXISS is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) == RESET)
10001b92:	e009      	b.n	10001ba8 <RCC_AXISSConfig+0x9c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001b94:	f7fe fde2 	bl	1000075c <HAL_GetTick>
10001b98:	4602      	mov	r2, r0
10001b9a:	68fb      	ldr	r3, [r7, #12]
10001b9c:	1ad3      	subs	r3, r2, r3
10001b9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10001ba2:	d901      	bls.n	10001ba8 <RCC_AXISSConfig+0x9c>
      {
        return HAL_TIMEOUT;
10001ba4:	2303      	movs	r3, #3
10001ba6:	e040      	b.n	10001c2a <RCC_AXISSConfig+0x11e>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) == RESET)
10001ba8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10001bae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001bb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001bb6:	d1ed      	bne.n	10001b94 <RCC_AXISSConfig+0x88>
10001bb8:	e015      	b.n	10001be6 <RCC_AXISSConfig+0xda>
  }
  else
  {
    // RCC_AXISSOURCE_OFF case
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10001bba:	f7fe fdcf 	bl	1000075c <HAL_GetTick>
10001bbe:	60f8      	str	r0, [r7, #12]

    /* Wait till AXISS is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) != RESET)
10001bc0:	e009      	b.n	10001bd6 <RCC_AXISSConfig+0xca>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001bc2:	f7fe fdcb 	bl	1000075c <HAL_GetTick>
10001bc6:	4602      	mov	r2, r0
10001bc8:	68fb      	ldr	r3, [r7, #12]
10001bca:	1ad3      	subs	r3, r2, r3
10001bcc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10001bd0:	d901      	bls.n	10001bd6 <RCC_AXISSConfig+0xca>
      {
        return HAL_TIMEOUT;
10001bd2:	2303      	movs	r3, #3
10001bd4:	e029      	b.n	10001c2a <RCC_AXISSConfig+0x11e>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) != RESET)
10001bd6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10001bdc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001be0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001be4:	d0ed      	beq.n	10001bc2 <RCC_AXISSConfig+0xb6>
      }
    }
  }

  /* Set AXISS division factor */
  __HAL_RCC_AXI_DIV(RCC_AXISSInitStruct->AXI_Div);
10001be6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10001bec:	f023 0207 	bic.w	r2, r3, #7
10001bf0:	687b      	ldr	r3, [r7, #4]
10001bf2:	685b      	ldr	r3, [r3, #4]
10001bf4:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001bf8:	4313      	orrs	r3, r2
10001bfa:	630b      	str	r3, [r1, #48]	; 0x30

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10001bfc:	f7fe fdae 	bl	1000075c <HAL_GetTick>
10001c00:	60f8      	str	r0, [r7, #12]

  /* Wait till AXISS is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXIDIVRDY) == RESET)
10001c02:	e009      	b.n	10001c18 <RCC_AXISSConfig+0x10c>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001c04:	f7fe fdaa 	bl	1000075c <HAL_GetTick>
10001c08:	4602      	mov	r2, r0
10001c0a:	68fb      	ldr	r3, [r7, #12]
10001c0c:	1ad3      	subs	r3, r2, r3
10001c0e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10001c12:	d901      	bls.n	10001c18 <RCC_AXISSConfig+0x10c>
    {
      return HAL_TIMEOUT;
10001c14:	2303      	movs	r3, #3
10001c16:	e008      	b.n	10001c2a <RCC_AXISSConfig+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXIDIVRDY) == RESET)
10001c18:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10001c1e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001c22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001c26:	d1ed      	bne.n	10001c04 <RCC_AXISSConfig+0xf8>
    }
  }

  return HAL_OK;
10001c28:	2300      	movs	r3, #0
}
10001c2a:	4618      	mov	r0, r3
10001c2c:	3710      	adds	r7, #16
10001c2e:	46bd      	mov	sp, r7
10001c30:	bd80      	pop	{r7, pc}
	...

10001c34 <RCC_MCUConfig>:


HAL_StatusTypeDef RCC_MCUConfig(RCC_MCUInitTypeDef *MCUInitStruct)
{
10001c34:	b580      	push	{r7, lr}
10001c36:	b084      	sub	sp, #16
10001c38:	af00      	add	r7, sp, #0
10001c3a:	6078      	str	r0, [r7, #4]

  assert_param(IS_RCC_MCUSSOURCE(MCUInitStruct->MCU_Clock));
  assert_param(IS_RCC_MCUDIV(MCUInitStruct->MCU_Div));

  /* Ensure clock source is ready*/
  switch (MCUInitStruct->MCU_Clock)
10001c3c:	687b      	ldr	r3, [r7, #4]
10001c3e:	681b      	ldr	r3, [r3, #0]
10001c40:	2b03      	cmp	r3, #3
10001c42:	d834      	bhi.n	10001cae <RCC_MCUConfig+0x7a>
10001c44:	a201      	add	r2, pc, #4	; (adr r2, 10001c4c <RCC_MCUConfig+0x18>)
10001c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10001c4a:	bf00      	nop
10001c4c:	10001c5d 	.word	0x10001c5d
10001c50:	10001c71 	.word	0x10001c71
10001c54:	10001c87 	.word	0x10001c87
10001c58:	10001c9b 	.word	0x10001c9b
  {
    case (RCC_MCUSSOURCE_HSI):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10001c5c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001c60:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10001c64:	f003 0301 	and.w	r3, r3, #1
10001c68:	2b01      	cmp	r3, #1
10001c6a:	d022      	beq.n	10001cb2 <RCC_MCUConfig+0x7e>
      {
        return HAL_ERROR;
10001c6c:	2301      	movs	r3, #1
10001c6e:	e081      	b.n	10001d74 <RCC_MCUConfig+0x140>
    }

    case (RCC_MCUSSOURCE_HSE):
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
10001c70:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001c74:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10001c78:	f403 7380 	and.w	r3, r3, #256	; 0x100
10001c7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
10001c80:	d019      	beq.n	10001cb6 <RCC_MCUConfig+0x82>
      {
        return HAL_ERROR;
10001c82:	2301      	movs	r3, #1
10001c84:	e076      	b.n	10001d74 <RCC_MCUConfig+0x140>
    }

    case (RCC_MCUSSOURCE_CSI):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
10001c86:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001c8a:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10001c8e:	f003 0310 	and.w	r3, r3, #16
10001c92:	2b10      	cmp	r3, #16
10001c94:	d011      	beq.n	10001cba <RCC_MCUConfig+0x86>
      {
        return HAL_ERROR;
10001c96:	2301      	movs	r3, #1
10001c98:	e06c      	b.n	10001d74 <RCC_MCUConfig+0x140>
    }

    case (RCC_MCUSSOURCE_PLL3):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
10001c9a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001c9e:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10001ca2:	f003 0302 	and.w	r3, r3, #2
10001ca6:	2b02      	cmp	r3, #2
10001ca8:	d009      	beq.n	10001cbe <RCC_MCUConfig+0x8a>
      {
        return HAL_ERROR;
10001caa:	2301      	movs	r3, #1
10001cac:	e062      	b.n	10001d74 <RCC_MCUConfig+0x140>
      }
      break;
    }

    default:
      break;
10001cae:	bf00      	nop
10001cb0:	e006      	b.n	10001cc0 <RCC_MCUConfig+0x8c>
      break;
10001cb2:	bf00      	nop
10001cb4:	e004      	b.n	10001cc0 <RCC_MCUConfig+0x8c>
      break;
10001cb6:	bf00      	nop
10001cb8:	e002      	b.n	10001cc0 <RCC_MCUConfig+0x8c>
      break;
10001cba:	bf00      	nop
10001cbc:	e000      	b.n	10001cc0 <RCC_MCUConfig+0x8c>
      break;
10001cbe:	bf00      	nop

  }

  /* Set MCU clock source */
  __HAL_RCC_MCU_SOURCE(MCUInitStruct->MCU_Clock);
10001cc0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001cc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10001cc6:	f023 0203 	bic.w	r2, r3, #3
10001cca:	687b      	ldr	r3, [r7, #4]
10001ccc:	681b      	ldr	r3, [r3, #0]
10001cce:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001cd2:	4313      	orrs	r3, r2
10001cd4:	648b      	str	r3, [r1, #72]	; 0x48

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10001cd6:	f7fe fd41 	bl	1000075c <HAL_GetTick>
10001cda:	60f8      	str	r0, [r7, #12]

  /* Wait till MCU is ready */

  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUSSRCRDY) == RESET)
10001cdc:	e009      	b.n	10001cf2 <RCC_MCUConfig+0xbe>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001cde:	f7fe fd3d 	bl	1000075c <HAL_GetTick>
10001ce2:	4602      	mov	r2, r0
10001ce4:	68fb      	ldr	r3, [r7, #12]
10001ce6:	1ad3      	subs	r3, r2, r3
10001ce8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10001cec:	d901      	bls.n	10001cf2 <RCC_MCUConfig+0xbe>
    {
      return HAL_TIMEOUT;
10001cee:	2303      	movs	r3, #3
10001cf0:	e040      	b.n	10001d74 <RCC_MCUConfig+0x140>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUSSRCRDY) == RESET)
10001cf2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001cf6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10001cf8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001cfc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001d00:	d1ed      	bne.n	10001cde <RCC_MCUConfig+0xaa>
    }
  }

#ifdef CORE_CM4
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSystemCoreClockFreq();
10001d02:	f000 fbaf 	bl	10002464 <HAL_RCC_GetSystemCoreClockFreq>
10001d06:	4602      	mov	r2, r0
10001d08:	4b1c      	ldr	r3, [pc, #112]	; (10001d7c <RCC_MCUConfig+0x148>)
10001d0a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
10001d0c:	4b1c      	ldr	r3, [pc, #112]	; (10001d80 <RCC_MCUConfig+0x14c>)
10001d0e:	681b      	ldr	r3, [r3, #0]
10001d10:	4618      	mov	r0, r3
10001d12:	f7fe fcd9 	bl	100006c8 <HAL_InitTick>
#endif

  /* Set MCU division factor */
  __HAL_RCC_MCU_DIV(MCUInitStruct->MCU_Div);
10001d16:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001d1a:	f8d3 3830 	ldr.w	r3, [r3, #2096]	; 0x830
10001d1e:	f023 020f 	bic.w	r2, r3, #15
10001d22:	687b      	ldr	r3, [r7, #4]
10001d24:	685b      	ldr	r3, [r3, #4]
10001d26:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001d2a:	4313      	orrs	r3, r2
10001d2c:	f8c1 3830 	str.w	r3, [r1, #2096]	; 0x830

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10001d30:	f7fe fd14 	bl	1000075c <HAL_GetTick>
10001d34:	60f8      	str	r0, [r7, #12]

  /* Wait till MCU is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUDIVRDY) == RESET)
10001d36:	e009      	b.n	10001d4c <RCC_MCUConfig+0x118>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001d38:	f7fe fd10 	bl	1000075c <HAL_GetTick>
10001d3c:	4602      	mov	r2, r0
10001d3e:	68fb      	ldr	r3, [r7, #12]
10001d40:	1ad3      	subs	r3, r2, r3
10001d42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10001d46:	d901      	bls.n	10001d4c <RCC_MCUConfig+0x118>
    {
      return HAL_TIMEOUT;
10001d48:	2303      	movs	r3, #3
10001d4a:	e013      	b.n	10001d74 <RCC_MCUConfig+0x140>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUDIVRDY) == RESET)
10001d4c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001d50:	f8d3 3830 	ldr.w	r3, [r3, #2096]	; 0x830
10001d54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001d58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001d5c:	d1ec      	bne.n	10001d38 <RCC_MCUConfig+0x104>
    }
  }
#ifdef CORE_CM4
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSystemCoreClockFreq();
10001d5e:	f000 fb81 	bl	10002464 <HAL_RCC_GetSystemCoreClockFreq>
10001d62:	4602      	mov	r2, r0
10001d64:	4b05      	ldr	r3, [pc, #20]	; (10001d7c <RCC_MCUConfig+0x148>)
10001d66:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
10001d68:	4b05      	ldr	r3, [pc, #20]	; (10001d80 <RCC_MCUConfig+0x14c>)
10001d6a:	681b      	ldr	r3, [r3, #0]
10001d6c:	4618      	mov	r0, r3
10001d6e:	f7fe fcab 	bl	100006c8 <HAL_InitTick>
#endif

  return HAL_OK;
10001d72:	2300      	movs	r3, #0
}
10001d74:	4618      	mov	r0, r3
10001d76:	3710      	adds	r7, #16
10001d78:	46bd      	mov	sp, r7
10001d7a:	bd80      	pop	{r7, pc}
10001d7c:	10020000 	.word	0x10020000
10001d80:	10020004 	.word	0x10020004

10001d84 <HAL_RCC_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
__weak void HAL_RCC_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
10001d84:	b480      	push	{r7}
10001d86:	b089      	sub	sp, #36	; 0x24
10001d88:	af00      	add	r7, sp, #0
10001d8a:	6078      	str	r0, [r7, #4]
  uint32_t   pllsource = 0U, pll2m = 1U, pll2fracen = 0U, hsivalue = 0U;
10001d8c:	2300      	movs	r3, #0
10001d8e:	61bb      	str	r3, [r7, #24]
10001d90:	2301      	movs	r3, #1
10001d92:	617b      	str	r3, [r7, #20]
10001d94:	2300      	movs	r3, #0
10001d96:	613b      	str	r3, [r7, #16]
10001d98:	2300      	movs	r3, #0
10001d9a:	60fb      	str	r3, [r7, #12]
  float fracn1, pll2vco = 0;
10001d9c:	f04f 0300 	mov.w	r3, #0
10001da0:	61fb      	str	r3, [r7, #28]

  pllsource = __HAL_RCC_GET_PLL12_SOURCE();
10001da2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10001da8:	f003 0303 	and.w	r3, r3, #3
10001dac:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLL2CFGR1 & RCC_PLL2CFGR1_DIVM2) >> RCC_PLL2CFGR1_DIVM2_Pos) + 1U;
10001dae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001db2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
10001db6:	0c1b      	lsrs	r3, r3, #16
10001db8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
10001dbc:	3301      	adds	r3, #1
10001dbe:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLL2FRACR & RCC_PLL2FRACR_FRACLE) >> RCC_PLL2FRACR_FRACLE_Pos;
10001dc0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001dc4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
10001dc8:	0c1b      	lsrs	r3, r3, #16
10001dca:	f003 0301 	and.w	r3, r3, #1
10001dce:	613b      	str	r3, [r7, #16]
  fracn1 = (float)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACV) >> RCC_PLL2FRACR_FRACV_Pos));
10001dd0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001dd4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
10001dd8:	08db      	lsrs	r3, r3, #3
10001dda:	f3c3 030c 	ubfx	r3, r3, #0, #13
10001dde:	693a      	ldr	r2, [r7, #16]
10001de0:	fb02 f303 	mul.w	r3, r2, r3
10001de4:	ee07 3a90 	vmov	s15, r3
10001de8:	eef8 7a67 	vcvt.f32.u32	s15, s15
10001dec:	edc7 7a02 	vstr	s15, [r7, #8]
  pll2vco = (float)((float)((RCC->PLL2CFGR1 & RCC_PLL2CFGR1_DIVN) + 1U) + (fracn1 / (float)0x1FFF));  //Intermediary value
10001df0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001df4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
10001df8:	f3c3 0308 	ubfx	r3, r3, #0, #9
10001dfc:	3301      	adds	r3, #1
10001dfe:	ee07 3a90 	vmov	s15, r3
10001e02:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10001e06:	edd7 6a02 	vldr	s13, [r7, #8]
10001e0a:	ed9f 6a4e 	vldr	s12, [pc, #312]	; 10001f44 <HAL_RCC_GetPLL2ClockFreq+0x1c0>
10001e0e:	eec6 7a86 	vdiv.f32	s15, s13, s12
10001e12:	ee77 7a27 	vadd.f32	s15, s14, s15
10001e16:	edc7 7a07 	vstr	s15, [r7, #28]
  switch (pllsource)
10001e1a:	69bb      	ldr	r3, [r7, #24]
10001e1c:	2b01      	cmp	r3, #1
10001e1e:	d033      	beq.n	10001e88 <HAL_RCC_GetPLL2ClockFreq+0x104>
10001e20:	2b01      	cmp	r3, #1
10001e22:	d302      	bcc.n	10001e2a <HAL_RCC_GetPLL2ClockFreq+0xa6>
10001e24:	2b02      	cmp	r3, #2
10001e26:	d03e      	beq.n	10001ea6 <HAL_RCC_GetPLL2ClockFreq+0x122>
10001e28:	e041      	b.n	10001eae <HAL_RCC_GetPLL2ClockFreq+0x12a>
  {
    case RCC_PLL12SOURCE_HSI:  /* HSI used as PLL clock source */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) != 0U)
10001e2a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001e2e:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10001e32:	f003 0304 	and.w	r3, r3, #4
10001e36:	2b04      	cmp	r3, #4
10001e38:	d117      	bne.n	10001e6a <HAL_RCC_GetPLL2ClockFreq+0xe6>
      {
        hsivalue = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10001e3a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001e3e:	699b      	ldr	r3, [r3, #24]
10001e40:	f003 0303 	and.w	r3, r3, #3
10001e44:	4a40      	ldr	r2, [pc, #256]	; (10001f48 <HAL_RCC_GetPLL2ClockFreq+0x1c4>)
10001e46:	fa22 f303 	lsr.w	r3, r2, r3
10001e4a:	60fb      	str	r3, [r7, #12]
        pll2vco *= (float)(hsivalue / pll2m);
10001e4c:	68fa      	ldr	r2, [r7, #12]
10001e4e:	697b      	ldr	r3, [r7, #20]
10001e50:	fbb2 f3f3 	udiv	r3, r2, r3
10001e54:	ee07 3a90 	vmov	s15, r3
10001e58:	eef8 7a67 	vcvt.f32.u32	s15, s15
10001e5c:	ed97 7a07 	vldr	s14, [r7, #28]
10001e60:	ee67 7a27 	vmul.f32	s15, s14, s15
10001e64:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco *= (float)(HSI_VALUE / pll2m);
      }
      break;
10001e68:	e025      	b.n	10001eb6 <HAL_RCC_GetPLL2ClockFreq+0x132>
        pll2vco *= (float)(HSI_VALUE / pll2m);
10001e6a:	4a37      	ldr	r2, [pc, #220]	; (10001f48 <HAL_RCC_GetPLL2ClockFreq+0x1c4>)
10001e6c:	697b      	ldr	r3, [r7, #20]
10001e6e:	fbb2 f3f3 	udiv	r3, r2, r3
10001e72:	ee07 3a90 	vmov	s15, r3
10001e76:	eef8 7a67 	vcvt.f32.u32	s15, s15
10001e7a:	ed97 7a07 	vldr	s14, [r7, #28]
10001e7e:	ee67 7a27 	vmul.f32	s15, s14, s15
10001e82:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10001e86:	e016      	b.n	10001eb6 <HAL_RCC_GetPLL2ClockFreq+0x132>

    case RCC_PLL12SOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco *= (float)(HSE_VALUE / pll2m);
10001e88:	4a30      	ldr	r2, [pc, #192]	; (10001f4c <HAL_RCC_GetPLL2ClockFreq+0x1c8>)
10001e8a:	697b      	ldr	r3, [r7, #20]
10001e8c:	fbb2 f3f3 	udiv	r3, r2, r3
10001e90:	ee07 3a90 	vmov	s15, r3
10001e94:	eef8 7a67 	vcvt.f32.u32	s15, s15
10001e98:	ed97 7a07 	vldr	s14, [r7, #28]
10001e9c:	ee67 7a27 	vmul.f32	s15, s14, s15
10001ea0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10001ea4:	e007      	b.n	10001eb6 <HAL_RCC_GetPLL2ClockFreq+0x132>

    case RCC_PLL12SOURCE_OFF:  /* No clock source for PLL */
      pll2vco = 0;
10001ea6:	f04f 0300 	mov.w	r3, #0
10001eaa:	61fb      	str	r3, [r7, #28]
      break;
10001eac:	e003      	b.n	10001eb6 <HAL_RCC_GetPLL2ClockFreq+0x132>

    default:
      pll2vco = 0;
10001eae:	f04f 0300 	mov.w	r3, #0
10001eb2:	61fb      	str	r3, [r7, #28]
      break;
10001eb4:	bf00      	nop
  }

  PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(pll2vco / ((float)(((RCC->PLL2CFGR2 & RCC_PLL2CFGR2_DIVP) >> RCC_PLL2CFGR2_DIVP_Pos) + 1U)));
10001eb6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001eba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
10001ebe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
10001ec2:	3301      	adds	r3, #1
10001ec4:	ee07 3a90 	vmov	s15, r3
10001ec8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10001ecc:	edd7 6a07 	vldr	s13, [r7, #28]
10001ed0:	eec6 7a87 	vdiv.f32	s15, s13, s14
10001ed4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10001ed8:	ee17 2a90 	vmov	r2, s15
10001edc:	687b      	ldr	r3, [r7, #4]
10001ede:	601a      	str	r2, [r3, #0]
  PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(pll2vco / ((float)(((RCC->PLL2CFGR2 & RCC_PLL2CFGR2_DIVQ) >> RCC_PLL2CFGR2_DIVQ_Pos) + 1U)));
10001ee0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001ee4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
10001ee8:	0a1b      	lsrs	r3, r3, #8
10001eea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
10001eee:	3301      	adds	r3, #1
10001ef0:	ee07 3a90 	vmov	s15, r3
10001ef4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10001ef8:	edd7 6a07 	vldr	s13, [r7, #28]
10001efc:	eec6 7a87 	vdiv.f32	s15, s13, s14
10001f00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10001f04:	ee17 2a90 	vmov	r2, s15
10001f08:	687b      	ldr	r3, [r7, #4]
10001f0a:	605a      	str	r2, [r3, #4]
  PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(pll2vco / ((float)(((RCC->PLL2CFGR2 & RCC_PLL2CFGR2_DIVR) >> RCC_PLL2CFGR2_DIVR_Pos) + 1U)));
10001f0c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001f10:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
10001f14:	0c1b      	lsrs	r3, r3, #16
10001f16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
10001f1a:	3301      	adds	r3, #1
10001f1c:	ee07 3a90 	vmov	s15, r3
10001f20:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10001f24:	edd7 6a07 	vldr	s13, [r7, #28]
10001f28:	eec6 7a87 	vdiv.f32	s15, s13, s14
10001f2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10001f30:	ee17 2a90 	vmov	r2, s15
10001f34:	687b      	ldr	r3, [r7, #4]
10001f36:	609a      	str	r2, [r3, #8]
}
10001f38:	bf00      	nop
10001f3a:	3724      	adds	r7, #36	; 0x24
10001f3c:	46bd      	mov	sp, r7
10001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
10001f42:	4770      	bx	lr
10001f44:	45fff800 	.word	0x45fff800
10001f48:	03d09000 	.word	0x03d09000
10001f4c:	016e3600 	.word	0x016e3600

10001f50 <HAL_RCC_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
__weak void HAL_RCC_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
10001f50:	b480      	push	{r7}
10001f52:	b089      	sub	sp, #36	; 0x24
10001f54:	af00      	add	r7, sp, #0
10001f56:	6078      	str	r0, [r7, #4]
  uint32_t   pllsource = 0, pll3m = 1, pll3fracen = 0, hsivalue = 0;
10001f58:	2300      	movs	r3, #0
10001f5a:	61bb      	str	r3, [r7, #24]
10001f5c:	2301      	movs	r3, #1
10001f5e:	617b      	str	r3, [r7, #20]
10001f60:	2300      	movs	r3, #0
10001f62:	613b      	str	r3, [r7, #16]
10001f64:	2300      	movs	r3, #0
10001f66:	60fb      	str	r3, [r7, #12]
  float fracn1, pll3vco = 0;
10001f68:	f04f 0300 	mov.w	r3, #0
10001f6c:	61fb      	str	r3, [r7, #28]

  pllsource = __HAL_RCC_GET_PLL3_SOURCE();
10001f6e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001f72:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10001f76:	f003 0303 	and.w	r3, r3, #3
10001f7a:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLL3CFGR1 & RCC_PLL3CFGR1_DIVM3) >> RCC_PLL3CFGR1_DIVM3_Pos) + 1U;
10001f7c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001f80:	f8d3 3884 	ldr.w	r3, [r3, #2180]	; 0x884
10001f84:	0c1b      	lsrs	r3, r3, #16
10001f86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
10001f8a:	3301      	adds	r3, #1
10001f8c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLL3FRACR & RCC_PLL3FRACR_FRACLE) >> RCC_PLL3FRACR_FRACLE_Pos;
10001f8e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001f92:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
10001f96:	0c1b      	lsrs	r3, r3, #16
10001f98:	f003 0301 	and.w	r3, r3, #1
10001f9c:	613b      	str	r3, [r7, #16]
  fracn1 = (float)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACV) >> RCC_PLL3FRACR_FRACV_Pos));
10001f9e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001fa2:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
10001fa6:	08db      	lsrs	r3, r3, #3
10001fa8:	f3c3 030c 	ubfx	r3, r3, #0, #13
10001fac:	693a      	ldr	r2, [r7, #16]
10001fae:	fb02 f303 	mul.w	r3, r2, r3
10001fb2:	ee07 3a90 	vmov	s15, r3
10001fb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
10001fba:	edc7 7a02 	vstr	s15, [r7, #8]
  pll3vco = (float)((float)((RCC->PLL3CFGR1 & RCC_PLL3CFGR1_DIVN) + 1U) + (fracn1 / (float) 0x1FFF));  //Intermediary value
10001fbe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001fc2:	f8d3 3884 	ldr.w	r3, [r3, #2180]	; 0x884
10001fc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
10001fca:	3301      	adds	r3, #1
10001fcc:	ee07 3a90 	vmov	s15, r3
10001fd0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10001fd4:	edd7 6a02 	vldr	s13, [r7, #8]
10001fd8:	ed9f 6a56 	vldr	s12, [pc, #344]	; 10002134 <HAL_RCC_GetPLL3ClockFreq+0x1e4>
10001fdc:	eec6 7a86 	vdiv.f32	s15, s13, s12
10001fe0:	ee77 7a27 	vadd.f32	s15, s14, s15
10001fe4:	edc7 7a07 	vstr	s15, [r7, #28]
  switch (pllsource)
10001fe8:	69bb      	ldr	r3, [r7, #24]
10001fea:	2b03      	cmp	r3, #3
10001fec:	d85b      	bhi.n	100020a6 <HAL_RCC_GetPLL3ClockFreq+0x156>
10001fee:	a201      	add	r2, pc, #4	; (adr r2, 10001ff4 <HAL_RCC_GetPLL3ClockFreq+0xa4>)
10001ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10001ff4:	10002005 	.word	0x10002005
10001ff8:	10002063 	.word	0x10002063
10001ffc:	10002081 	.word	0x10002081
10002000:	1000209f 	.word	0x1000209f
  {
    case RCC_PLL3SOURCE_HSI:  /* HSI used as PLL clock source */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) != 0U)
10002004:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002008:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
1000200c:	f003 0304 	and.w	r3, r3, #4
10002010:	2b04      	cmp	r3, #4
10002012:	d117      	bne.n	10002044 <HAL_RCC_GetPLL3ClockFreq+0xf4>
      {
        hsivalue = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10002014:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002018:	699b      	ldr	r3, [r3, #24]
1000201a:	f003 0303 	and.w	r3, r3, #3
1000201e:	4a46      	ldr	r2, [pc, #280]	; (10002138 <HAL_RCC_GetPLL3ClockFreq+0x1e8>)
10002020:	fa22 f303 	lsr.w	r3, r2, r3
10002024:	60fb      	str	r3, [r7, #12]
        pll3vco *= (float)(hsivalue / pll3m);
10002026:	68fa      	ldr	r2, [r7, #12]
10002028:	697b      	ldr	r3, [r7, #20]
1000202a:	fbb2 f3f3 	udiv	r3, r2, r3
1000202e:	ee07 3a90 	vmov	s15, r3
10002032:	eef8 7a67 	vcvt.f32.u32	s15, s15
10002036:	ed97 7a07 	vldr	s14, [r7, #28]
1000203a:	ee67 7a27 	vmul.f32	s15, s14, s15
1000203e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco *= (float)(HSI_VALUE / pll3m);
      }
      break;
10002042:	e030      	b.n	100020a6 <HAL_RCC_GetPLL3ClockFreq+0x156>
        pll3vco *= (float)(HSI_VALUE / pll3m);
10002044:	4a3c      	ldr	r2, [pc, #240]	; (10002138 <HAL_RCC_GetPLL3ClockFreq+0x1e8>)
10002046:	697b      	ldr	r3, [r7, #20]
10002048:	fbb2 f3f3 	udiv	r3, r2, r3
1000204c:	ee07 3a90 	vmov	s15, r3
10002050:	eef8 7a67 	vcvt.f32.u32	s15, s15
10002054:	ed97 7a07 	vldr	s14, [r7, #28]
10002058:	ee67 7a27 	vmul.f32	s15, s14, s15
1000205c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10002060:	e021      	b.n	100020a6 <HAL_RCC_GetPLL3ClockFreq+0x156>

    case RCC_PLL3SOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco *= (float)(HSE_VALUE / pll3m);
10002062:	4a36      	ldr	r2, [pc, #216]	; (1000213c <HAL_RCC_GetPLL3ClockFreq+0x1ec>)
10002064:	697b      	ldr	r3, [r7, #20]
10002066:	fbb2 f3f3 	udiv	r3, r2, r3
1000206a:	ee07 3a90 	vmov	s15, r3
1000206e:	eef8 7a67 	vcvt.f32.u32	s15, s15
10002072:	ed97 7a07 	vldr	s14, [r7, #28]
10002076:	ee67 7a27 	vmul.f32	s15, s14, s15
1000207a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
1000207e:	e012      	b.n	100020a6 <HAL_RCC_GetPLL3ClockFreq+0x156>



    case RCC_PLL3SOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco *= (float)(CSI_VALUE / pll3m);
10002080:	4a2f      	ldr	r2, [pc, #188]	; (10002140 <HAL_RCC_GetPLL3ClockFreq+0x1f0>)
10002082:	697b      	ldr	r3, [r7, #20]
10002084:	fbb2 f3f3 	udiv	r3, r2, r3
10002088:	ee07 3a90 	vmov	s15, r3
1000208c:	eef8 7a67 	vcvt.f32.u32	s15, s15
10002090:	ed97 7a07 	vldr	s14, [r7, #28]
10002094:	ee67 7a27 	vmul.f32	s15, s14, s15
10002098:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
1000209c:	e003      	b.n	100020a6 <HAL_RCC_GetPLL3ClockFreq+0x156>

    case RCC_PLL3SOURCE_OFF:  /* No clock source for PLL */
      pll3vco = 0;
1000209e:	f04f 0300 	mov.w	r3, #0
100020a2:	61fb      	str	r3, [r7, #28]
      break;
100020a4:	bf00      	nop
  }

  PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(pll3vco / ((float)(((RCC->PLL3CFGR2 & RCC_PLL3CFGR2_DIVP) >> RCC_PLL3CFGR2_DIVP_Pos) + 1U)));
100020a6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100020aa:	f8d3 3888 	ldr.w	r3, [r3, #2184]	; 0x888
100020ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
100020b2:	3301      	adds	r3, #1
100020b4:	ee07 3a90 	vmov	s15, r3
100020b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
100020bc:	edd7 6a07 	vldr	s13, [r7, #28]
100020c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
100020c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
100020c8:	ee17 2a90 	vmov	r2, s15
100020cc:	687b      	ldr	r3, [r7, #4]
100020ce:	601a      	str	r2, [r3, #0]
  PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(pll3vco / ((float)(((RCC->PLL3CFGR2 & RCC_PLL3CFGR2_DIVQ) >> RCC_PLL3CFGR2_DIVQ_Pos) + 1U)));
100020d0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100020d4:	f8d3 3888 	ldr.w	r3, [r3, #2184]	; 0x888
100020d8:	0a1b      	lsrs	r3, r3, #8
100020da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
100020de:	3301      	adds	r3, #1
100020e0:	ee07 3a90 	vmov	s15, r3
100020e4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
100020e8:	edd7 6a07 	vldr	s13, [r7, #28]
100020ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
100020f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
100020f4:	ee17 2a90 	vmov	r2, s15
100020f8:	687b      	ldr	r3, [r7, #4]
100020fa:	605a      	str	r2, [r3, #4]
  PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(pll3vco / ((float)(((RCC->PLL3CFGR2 & RCC_PLL3CFGR2_DIVR) >> RCC_PLL3CFGR2_DIVR_Pos) + 1U)));
100020fc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002100:	f8d3 3888 	ldr.w	r3, [r3, #2184]	; 0x888
10002104:	0c1b      	lsrs	r3, r3, #16
10002106:	f003 037f 	and.w	r3, r3, #127	; 0x7f
1000210a:	3301      	adds	r3, #1
1000210c:	ee07 3a90 	vmov	s15, r3
10002110:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10002114:	edd7 6a07 	vldr	s13, [r7, #28]
10002118:	eec6 7a87 	vdiv.f32	s15, s13, s14
1000211c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10002120:	ee17 2a90 	vmov	r2, s15
10002124:	687b      	ldr	r3, [r7, #4]
10002126:	609a      	str	r2, [r3, #8]
}
10002128:	bf00      	nop
1000212a:	3724      	adds	r7, #36	; 0x24
1000212c:	46bd      	mov	sp, r7
1000212e:	f85d 7b04 	ldr.w	r7, [sp], #4
10002132:	4770      	bx	lr
10002134:	45fff800 	.word	0x45fff800
10002138:	03d09000 	.word	0x03d09000
1000213c:	016e3600 	.word	0x016e3600
10002140:	003d0900 	.word	0x003d0900

10002144 <HAL_RCC_GetPLL4ClockFreq>:
  *         right PLL4CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL4_Clocks structure.
  * @retval None
  */
__weak void HAL_RCC_GetPLL4ClockFreq(PLL4_ClocksTypeDef *PLL4_Clocks)
{
10002144:	b480      	push	{r7}
10002146:	b089      	sub	sp, #36	; 0x24
10002148:	af00      	add	r7, sp, #0
1000214a:	6078      	str	r0, [r7, #4]
  uint32_t   pllsource = 0U, pll4m = 1U, pll4fracen = 0U, hsivalue = 0U;
1000214c:	2300      	movs	r3, #0
1000214e:	61bb      	str	r3, [r7, #24]
10002150:	2301      	movs	r3, #1
10002152:	617b      	str	r3, [r7, #20]
10002154:	2300      	movs	r3, #0
10002156:	613b      	str	r3, [r7, #16]
10002158:	2300      	movs	r3, #0
1000215a:	60fb      	str	r3, [r7, #12]
  float fracn1, pll4vco = 0;
1000215c:	f04f 0300 	mov.w	r3, #0
10002160:	61fb      	str	r3, [r7, #28]

  pllsource = __HAL_RCC_GET_PLL4_SOURCE();
10002162:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002166:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
1000216a:	f003 0303 	and.w	r3, r3, #3
1000216e:	61bb      	str	r3, [r7, #24]
  pll4m = ((RCC->PLL4CFGR1 & RCC_PLL4CFGR1_DIVM4) >> RCC_PLL4CFGR1_DIVM4_Pos) + 1U;
10002170:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002174:	f8d3 3898 	ldr.w	r3, [r3, #2200]	; 0x898
10002178:	0c1b      	lsrs	r3, r3, #16
1000217a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
1000217e:	3301      	adds	r3, #1
10002180:	617b      	str	r3, [r7, #20]
  pll4fracen = (RCC->PLL4FRACR & RCC_PLL4FRACR_FRACLE) >> RCC_PLL4FRACR_FRACLE_Pos;
10002182:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002186:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
1000218a:	0c1b      	lsrs	r3, r3, #16
1000218c:	f003 0301 	and.w	r3, r3, #1
10002190:	613b      	str	r3, [r7, #16]
  fracn1 = (float)(pll4fracen * ((RCC->PLL4FRACR & RCC_PLL4FRACR_FRACV) >> RCC_PLL4FRACR_FRACV_Pos));
10002192:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002196:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
1000219a:	08db      	lsrs	r3, r3, #3
1000219c:	f3c3 030c 	ubfx	r3, r3, #0, #13
100021a0:	693a      	ldr	r2, [r7, #16]
100021a2:	fb02 f303 	mul.w	r3, r2, r3
100021a6:	ee07 3a90 	vmov	s15, r3
100021aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
100021ae:	edc7 7a02 	vstr	s15, [r7, #8]
  pll4vco = (float)((float)((RCC->PLL4CFGR1 & RCC_PLL4CFGR1_DIVN) + 1U) + (fracn1 / (float) 0x1FFF));  //Intermediary value
100021b2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100021b6:	f8d3 3898 	ldr.w	r3, [r3, #2200]	; 0x898
100021ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
100021be:	3301      	adds	r3, #1
100021c0:	ee07 3a90 	vmov	s15, r3
100021c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
100021c8:	edd7 6a02 	vldr	s13, [r7, #8]
100021cc:	ed9f 6a5c 	vldr	s12, [pc, #368]	; 10002340 <HAL_RCC_GetPLL4ClockFreq+0x1fc>
100021d0:	eec6 7a86 	vdiv.f32	s15, s13, s12
100021d4:	ee77 7a27 	vadd.f32	s15, s14, s15
100021d8:	edc7 7a07 	vstr	s15, [r7, #28]
  switch (pllsource)
100021dc:	69bb      	ldr	r3, [r7, #24]
100021de:	2b03      	cmp	r3, #3
100021e0:	d866      	bhi.n	100022b0 <HAL_RCC_GetPLL4ClockFreq+0x16c>
100021e2:	a201      	add	r2, pc, #4	; (adr r2, 100021e8 <HAL_RCC_GetPLL4ClockFreq+0xa4>)
100021e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100021e8:	100021f9 	.word	0x100021f9
100021ec:	10002257 	.word	0x10002257
100021f0:	10002275 	.word	0x10002275
100021f4:	10002293 	.word	0x10002293
  {
    case RCC_PLL4SOURCE_HSI:  /* HSI used as PLL clock source */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) != 0U)
100021f8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100021fc:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10002200:	f003 0304 	and.w	r3, r3, #4
10002204:	2b04      	cmp	r3, #4
10002206:	d117      	bne.n	10002238 <HAL_RCC_GetPLL4ClockFreq+0xf4>
      {
        hsivalue = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10002208:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000220c:	699b      	ldr	r3, [r3, #24]
1000220e:	f003 0303 	and.w	r3, r3, #3
10002212:	4a4c      	ldr	r2, [pc, #304]	; (10002344 <HAL_RCC_GetPLL4ClockFreq+0x200>)
10002214:	fa22 f303 	lsr.w	r3, r2, r3
10002218:	60fb      	str	r3, [r7, #12]
        pll4vco *= (float)(hsivalue / pll4m);
1000221a:	68fa      	ldr	r2, [r7, #12]
1000221c:	697b      	ldr	r3, [r7, #20]
1000221e:	fbb2 f3f3 	udiv	r3, r2, r3
10002222:	ee07 3a90 	vmov	s15, r3
10002226:	eef8 7a67 	vcvt.f32.u32	s15, s15
1000222a:	ed97 7a07 	vldr	s14, [r7, #28]
1000222e:	ee67 7a27 	vmul.f32	s15, s14, s15
10002232:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll4vco *= (float)(HSI_VALUE / pll4m);
      }
      break;
10002236:	e03b      	b.n	100022b0 <HAL_RCC_GetPLL4ClockFreq+0x16c>
        pll4vco *= (float)(HSI_VALUE / pll4m);
10002238:	4a42      	ldr	r2, [pc, #264]	; (10002344 <HAL_RCC_GetPLL4ClockFreq+0x200>)
1000223a:	697b      	ldr	r3, [r7, #20]
1000223c:	fbb2 f3f3 	udiv	r3, r2, r3
10002240:	ee07 3a90 	vmov	s15, r3
10002244:	eef8 7a67 	vcvt.f32.u32	s15, s15
10002248:	ed97 7a07 	vldr	s14, [r7, #28]
1000224c:	ee67 7a27 	vmul.f32	s15, s14, s15
10002250:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10002254:	e02c      	b.n	100022b0 <HAL_RCC_GetPLL4ClockFreq+0x16c>

    case RCC_PLL4SOURCE_HSE:  /* HSE used as PLL clock source */
      pll4vco *= (float)(HSE_VALUE / pll4m);
10002256:	4a3c      	ldr	r2, [pc, #240]	; (10002348 <HAL_RCC_GetPLL4ClockFreq+0x204>)
10002258:	697b      	ldr	r3, [r7, #20]
1000225a:	fbb2 f3f3 	udiv	r3, r2, r3
1000225e:	ee07 3a90 	vmov	s15, r3
10002262:	eef8 7a67 	vcvt.f32.u32	s15, s15
10002266:	ed97 7a07 	vldr	s14, [r7, #28]
1000226a:	ee67 7a27 	vmul.f32	s15, s14, s15
1000226e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10002272:	e01d      	b.n	100022b0 <HAL_RCC_GetPLL4ClockFreq+0x16c>

    case RCC_PLL4SOURCE_CSI:  /* CSI used as PLL clock source */
      pll4vco *= (float)(CSI_VALUE / pll4m);
10002274:	4a35      	ldr	r2, [pc, #212]	; (1000234c <HAL_RCC_GetPLL4ClockFreq+0x208>)
10002276:	697b      	ldr	r3, [r7, #20]
10002278:	fbb2 f3f3 	udiv	r3, r2, r3
1000227c:	ee07 3a90 	vmov	s15, r3
10002280:	eef8 7a67 	vcvt.f32.u32	s15, s15
10002284:	ed97 7a07 	vldr	s14, [r7, #28]
10002288:	ee67 7a27 	vmul.f32	s15, s14, s15
1000228c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10002290:	e00e      	b.n	100022b0 <HAL_RCC_GetPLL4ClockFreq+0x16c>

    case RCC_PLL4SOURCE_I2S_CKIN:  /* Signal I2S_CKIN used as reference clock */
      pll4vco *= (float)(EXTERNAL_CLOCK_VALUE / pll4m);
10002292:	4a2f      	ldr	r2, [pc, #188]	; (10002350 <HAL_RCC_GetPLL4ClockFreq+0x20c>)
10002294:	697b      	ldr	r3, [r7, #20]
10002296:	fbb2 f3f3 	udiv	r3, r2, r3
1000229a:	ee07 3a90 	vmov	s15, r3
1000229e:	eef8 7a67 	vcvt.f32.u32	s15, s15
100022a2:	ed97 7a07 	vldr	s14, [r7, #28]
100022a6:	ee67 7a27 	vmul.f32	s15, s14, s15
100022aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
100022ae:	bf00      	nop
  }

  PLL4_Clocks->PLL4_P_Frequency = (uint32_t)(pll4vco / ((float)(((RCC->PLL4CFGR2 & RCC_PLL4CFGR2_DIVP) >> RCC_PLL4CFGR2_DIVP_Pos) + 1U)));
100022b0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100022b4:	f8d3 389c 	ldr.w	r3, [r3, #2204]	; 0x89c
100022b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
100022bc:	3301      	adds	r3, #1
100022be:	ee07 3a90 	vmov	s15, r3
100022c2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
100022c6:	edd7 6a07 	vldr	s13, [r7, #28]
100022ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
100022ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
100022d2:	ee17 2a90 	vmov	r2, s15
100022d6:	687b      	ldr	r3, [r7, #4]
100022d8:	601a      	str	r2, [r3, #0]
  PLL4_Clocks->PLL4_Q_Frequency = (uint32_t)(pll4vco / ((float)(((RCC->PLL4CFGR2 & RCC_PLL4CFGR2_DIVQ) >> RCC_PLL4CFGR2_DIVQ_Pos) + 1U)));
100022da:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100022de:	f8d3 389c 	ldr.w	r3, [r3, #2204]	; 0x89c
100022e2:	0a1b      	lsrs	r3, r3, #8
100022e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
100022e8:	3301      	adds	r3, #1
100022ea:	ee07 3a90 	vmov	s15, r3
100022ee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
100022f2:	edd7 6a07 	vldr	s13, [r7, #28]
100022f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
100022fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
100022fe:	ee17 2a90 	vmov	r2, s15
10002302:	687b      	ldr	r3, [r7, #4]
10002304:	605a      	str	r2, [r3, #4]
  PLL4_Clocks->PLL4_R_Frequency = (uint32_t)(pll4vco / ((float)(((RCC->PLL4CFGR2 & RCC_PLL4CFGR2_DIVR) >> RCC_PLL4CFGR2_DIVR_Pos) + 1U)));
10002306:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000230a:	f8d3 389c 	ldr.w	r3, [r3, #2204]	; 0x89c
1000230e:	0c1b      	lsrs	r3, r3, #16
10002310:	f003 037f 	and.w	r3, r3, #127	; 0x7f
10002314:	3301      	adds	r3, #1
10002316:	ee07 3a90 	vmov	s15, r3
1000231a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
1000231e:	edd7 6a07 	vldr	s13, [r7, #28]
10002322:	eec6 7a87 	vdiv.f32	s15, s13, s14
10002326:	eefc 7ae7 	vcvt.u32.f32	s15, s15
1000232a:	ee17 2a90 	vmov	r2, s15
1000232e:	687b      	ldr	r3, [r7, #4]
10002330:	609a      	str	r2, [r3, #8]
}
10002332:	bf00      	nop
10002334:	3724      	adds	r7, #36	; 0x24
10002336:	46bd      	mov	sp, r7
10002338:	f85d 7b04 	ldr.w	r7, [sp], #4
1000233c:	4770      	bx	lr
1000233e:	bf00      	nop
10002340:	45fff800 	.word	0x45fff800
10002344:	03d09000 	.word	0x03d09000
10002348:	016e3600 	.word	0x016e3600
1000234c:	003d0900 	.word	0x003d0900
10002350:	00bb8000 	.word	0x00bb8000

10002354 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
10002354:	b580      	push	{r7, lr}
10002356:	b082      	sub	sp, #8
10002358:	af00      	add	r7, sp, #0
  uint32_t apb1div = 0;
1000235a:	2300      	movs	r3, #0
1000235c:	607b      	str	r3, [r7, #4]

  /* Compute PCLK1 frequency ---------------------------*/
  apb1div = __HAL_RCC_GET_APB1_DIV();
1000235e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002362:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
10002366:	f003 0307 	and.w	r3, r3, #7
1000236a:	607b      	str	r3, [r7, #4]
  if (apb1div > RCC_APB1_DIV16)
1000236c:	687b      	ldr	r3, [r7, #4]
1000236e:	2b04      	cmp	r3, #4
10002370:	d901      	bls.n	10002376 <HAL_RCC_GetPCLK1Freq+0x22>
  {
    apb1div = RCC_APB1_DIV16;
10002372:	2304      	movs	r3, #4
10002374:	607b      	str	r3, [r7, #4]
  }

  return (HAL_RCC_GetMCUFreq() >> apb1div);
10002376:	f000 f85a 	bl	1000242e <HAL_RCC_GetMCUFreq>
1000237a:	4602      	mov	r2, r0
1000237c:	687b      	ldr	r3, [r7, #4]
1000237e:	fa22 f303 	lsr.w	r3, r2, r3
}
10002382:	4618      	mov	r0, r3
10002384:	3708      	adds	r7, #8
10002386:	46bd      	mov	sp, r7
10002388:	bd80      	pop	{r7, pc}

1000238a <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
1000238a:	b580      	push	{r7, lr}
1000238c:	b082      	sub	sp, #8
1000238e:	af00      	add	r7, sp, #0
  uint32_t apb2div = 0;
10002390:	2300      	movs	r3, #0
10002392:	607b      	str	r3, [r7, #4]

  /* Compute PCLK2 frequency ---------------------------*/
  apb2div = __HAL_RCC_GET_APB2_DIV();
10002394:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002398:	f8d3 3838 	ldr.w	r3, [r3, #2104]	; 0x838
1000239c:	f003 0307 	and.w	r3, r3, #7
100023a0:	607b      	str	r3, [r7, #4]
  if (apb2div > RCC_APB2_DIV16)
100023a2:	687b      	ldr	r3, [r7, #4]
100023a4:	2b04      	cmp	r3, #4
100023a6:	d901      	bls.n	100023ac <HAL_RCC_GetPCLK2Freq+0x22>
  {
    apb2div = RCC_APB2_DIV16;
100023a8:	2304      	movs	r3, #4
100023aa:	607b      	str	r3, [r7, #4]
  }

  return (HAL_RCC_GetMCUFreq() >> apb2div);
100023ac:	f000 f83f 	bl	1000242e <HAL_RCC_GetMCUFreq>
100023b0:	4602      	mov	r2, r0
100023b2:	687b      	ldr	r3, [r7, #4]
100023b4:	fa22 f303 	lsr.w	r3, r2, r3
}
100023b8:	4618      	mov	r0, r3
100023ba:	3708      	adds	r7, #8
100023bc:	46bd      	mov	sp, r7
100023be:	bd80      	pop	{r7, pc}

100023c0 <HAL_RCC_GetPCLK5Freq>:
  * @note   Each time PCLK5 changes, this function must be called to update the
  *         right PCLK5 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK5 frequency
  */
uint32_t HAL_RCC_GetPCLK5Freq(void)
{
100023c0:	b580      	push	{r7, lr}
100023c2:	b082      	sub	sp, #8
100023c4:	af00      	add	r7, sp, #0
  uint32_t apb5div = 0;
100023c6:	2300      	movs	r3, #0
100023c8:	607b      	str	r3, [r7, #4]

  /* Compute PCLK5 frequency ---------------------------*/
  apb5div = __HAL_RCC_GET_APB5_DIV();
100023ca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100023ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
100023d0:	f003 0307 	and.w	r3, r3, #7
100023d4:	607b      	str	r3, [r7, #4]
  if (apb5div > RCC_APB5_DIV16)
100023d6:	687b      	ldr	r3, [r7, #4]
100023d8:	2b04      	cmp	r3, #4
100023da:	d901      	bls.n	100023e0 <HAL_RCC_GetPCLK5Freq+0x20>
  {
    apb5div = RCC_APB5_DIV16;
100023dc:	2304      	movs	r3, #4
100023de:	607b      	str	r3, [r7, #4]
  }

  return (HAL_RCC_GetACLKFreq() >> apb5div);
100023e0:	f000 f808 	bl	100023f4 <HAL_RCC_GetACLKFreq>
100023e4:	4602      	mov	r2, r0
100023e6:	687b      	ldr	r3, [r7, #4]
100023e8:	fa22 f303 	lsr.w	r3, r2, r3
}
100023ec:	4618      	mov	r0, r3
100023ee:	3708      	adds	r7, #8
100023f0:	46bd      	mov	sp, r7
100023f2:	bd80      	pop	{r7, pc}

100023f4 <HAL_RCC_GetACLKFreq>:
  * @note   Each time ACLK changes, this function must be called to update the
  *         right ACLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval ACLK frequency
  */
uint32_t HAL_RCC_GetACLKFreq(void)
{
100023f4:	b580      	push	{r7, lr}
100023f6:	b082      	sub	sp, #8
100023f8:	af00      	add	r7, sp, #0
  uint32_t axidiv = 0;
100023fa:	2300      	movs	r3, #0
100023fc:	607b      	str	r3, [r7, #4]

  /* Compute ACLK frequency ---------------------------*/
  axidiv = __HAL_RCC_GET_AXI_DIV();
100023fe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10002404:	f003 0307 	and.w	r3, r3, #7
10002408:	607b      	str	r3, [r7, #4]
  if (axidiv > RCC_AXI_DIV4)
1000240a:	687b      	ldr	r3, [r7, #4]
1000240c:	2b03      	cmp	r3, #3
1000240e:	d901      	bls.n	10002414 <HAL_RCC_GetACLKFreq+0x20>
  {
    axidiv = RCC_AXI_DIV4;
10002410:	2303      	movs	r3, #3
10002412:	607b      	str	r3, [r7, #4]
  }
  axidiv += 1;
10002414:	687b      	ldr	r3, [r7, #4]
10002416:	3301      	adds	r3, #1
10002418:	607b      	str	r3, [r7, #4]

  return HAL_RCC_GetAXISSFreq() / axidiv;
1000241a:	f000 f82b 	bl	10002474 <HAL_RCC_GetAXISSFreq>
1000241e:	4602      	mov	r2, r0
10002420:	687b      	ldr	r3, [r7, #4]
10002422:	fbb2 f3f3 	udiv	r3, r2, r3
}
10002426:	4618      	mov	r0, r3
10002428:	3708      	adds	r7, #8
1000242a:	46bd      	mov	sp, r7
1000242c:	bd80      	pop	{r7, pc}

1000242e <HAL_RCC_GetMCUFreq>:
  * @note   Each time MCU changes, this function must be called to update the
  *         right MCU value. Otherwise, any configuration based on this function will be incorrect.
  * @retval MCU frequency
  */
uint32_t HAL_RCC_GetMCUFreq(void)
{
1000242e:	b580      	push	{r7, lr}
10002430:	b082      	sub	sp, #8
10002432:	af00      	add	r7, sp, #0
  uint32_t mcudiv = 0;
10002434:	2300      	movs	r3, #0
10002436:	607b      	str	r3, [r7, #4]

  /* Compute MCU frequency ---------------------------*/
  mcudiv = __HAL_RCC_GET_MCU_DIV();
10002438:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000243c:	f8d3 3830 	ldr.w	r3, [r3, #2096]	; 0x830
10002440:	f003 030f 	and.w	r3, r3, #15
10002444:	607b      	str	r3, [r7, #4]
  if (mcudiv > RCC_MCU_DIV512)
10002446:	687b      	ldr	r3, [r7, #4]
10002448:	2b09      	cmp	r3, #9
1000244a:	d901      	bls.n	10002450 <HAL_RCC_GetMCUFreq+0x22>
  {
    mcudiv = RCC_MCU_DIV512;
1000244c:	2309      	movs	r3, #9
1000244e:	607b      	str	r3, [r7, #4]
  }

  return HAL_RCC_GetMCUSSFreq() >> mcudiv;
10002450:	f000 f84c 	bl	100024ec <HAL_RCC_GetMCUSSFreq>
10002454:	4602      	mov	r2, r0
10002456:	687b      	ldr	r3, [r7, #4]
10002458:	fa22 f303 	lsr.w	r3, r2, r3
}
1000245c:	4618      	mov	r0, r3
1000245e:	3708      	adds	r7, #8
10002460:	46bd      	mov	sp, r7
10002462:	bd80      	pop	{r7, pc}

10002464 <HAL_RCC_GetSystemCoreClockFreq>:
  *         frequency in the chip. It is calculated based on the predefined
  *         constants and the selected clock source
  * @retval System Core frequency
  */
uint32_t HAL_RCC_GetSystemCoreClockFreq(void)
{
10002464:	b580      	push	{r7, lr}
10002466:	af00      	add	r7, sp, #0
#ifdef CORE_CA7
  return HAL_RCC_GetMPUSSFreq();
#else /* CORE_CM4 */
  return HAL_RCC_GetMCUFreq();
10002468:	f7ff ffe1 	bl	1000242e <HAL_RCC_GetMCUFreq>
1000246c:	4603      	mov	r3, r0
#endif
}
1000246e:	4618      	mov	r0, r3
10002470:	bd80      	pop	{r7, pc}
	...

10002474 <HAL_RCC_GetAXISSFreq>:
  return mpussfreq;
}


uint32_t HAL_RCC_GetAXISSFreq()
{
10002474:	b580      	push	{r7, lr}
10002476:	b084      	sub	sp, #16
10002478:	af00      	add	r7, sp, #0
  uint32_t axissfreq = 0;
1000247a:	2300      	movs	r3, #0
1000247c:	60fb      	str	r3, [r7, #12]
  PLL2_ClocksTypeDef pll2_clocks;

  switch (__HAL_RCC_GET_AXIS_SOURCE())
1000247e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10002484:	f003 0307 	and.w	r3, r3, #7
10002488:	2b01      	cmp	r3, #1
1000248a:	d01f      	beq.n	100024cc <HAL_RCC_GetAXISSFreq+0x58>
1000248c:	2b01      	cmp	r3, #1
1000248e:	d308      	bcc.n	100024a2 <HAL_RCC_GetAXISSFreq+0x2e>
10002490:	2b02      	cmp	r3, #2
10002492:	d11e      	bne.n	100024d2 <HAL_RCC_GetAXISSFreq+0x5e>
  {
    case RCC_AXISSOURCE_PLL2:
      HAL_RCC_GetPLL2ClockFreq(&pll2_clocks);
10002494:	463b      	mov	r3, r7
10002496:	4618      	mov	r0, r3
10002498:	f7ff fc74 	bl	10001d84 <HAL_RCC_GetPLL2ClockFreq>
      axissfreq = pll2_clocks.PLL2_P_Frequency;
1000249c:	683b      	ldr	r3, [r7, #0]
1000249e:	60fb      	str	r3, [r7, #12]
      break;
100024a0:	e01a      	b.n	100024d8 <HAL_RCC_GetAXISSFreq+0x64>

    case RCC_AXISSOURCE_HSI:
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) != 0U)
100024a2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100024a6:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
100024aa:	f003 0304 	and.w	r3, r3, #4
100024ae:	2b04      	cmp	r3, #4
100024b0:	d109      	bne.n	100024c6 <HAL_RCC_GetAXISSFreq+0x52>
      {
        axissfreq = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
100024b2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100024b6:	699b      	ldr	r3, [r3, #24]
100024b8:	f003 0303 	and.w	r3, r3, #3
100024bc:	4a09      	ldr	r2, [pc, #36]	; (100024e4 <HAL_RCC_GetAXISSFreq+0x70>)
100024be:	fa22 f303 	lsr.w	r3, r2, r3
100024c2:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        axissfreq = HSI_VALUE;
      }
      break;
100024c4:	e008      	b.n	100024d8 <HAL_RCC_GetAXISSFreq+0x64>
        axissfreq = HSI_VALUE;
100024c6:	4b07      	ldr	r3, [pc, #28]	; (100024e4 <HAL_RCC_GetAXISSFreq+0x70>)
100024c8:	60fb      	str	r3, [r7, #12]
      break;
100024ca:	e005      	b.n	100024d8 <HAL_RCC_GetAXISSFreq+0x64>

    case RCC_AXISSOURCE_HSE:
      axissfreq = HSE_VALUE;
100024cc:	4b06      	ldr	r3, [pc, #24]	; (100024e8 <HAL_RCC_GetAXISSFreq+0x74>)
100024ce:	60fb      	str	r3, [r7, #12]
      break;
100024d0:	e002      	b.n	100024d8 <HAL_RCC_GetAXISSFreq+0x64>

    case RCC_AXISSOURCE_OFF:
    default:
      axissfreq = 0; /* ck_axiss is gated */
100024d2:	2300      	movs	r3, #0
100024d4:	60fb      	str	r3, [r7, #12]
      break;
100024d6:	bf00      	nop
  }

  return axissfreq;
100024d8:	68fb      	ldr	r3, [r7, #12]
}
100024da:	4618      	mov	r0, r3
100024dc:	3710      	adds	r7, #16
100024de:	46bd      	mov	sp, r7
100024e0:	bd80      	pop	{r7, pc}
100024e2:	bf00      	nop
100024e4:	03d09000 	.word	0x03d09000
100024e8:	016e3600 	.word	0x016e3600

100024ec <HAL_RCC_GetMCUSSFreq>:

uint32_t HAL_RCC_GetMCUSSFreq()
{
100024ec:	b580      	push	{r7, lr}
100024ee:	b084      	sub	sp, #16
100024f0:	af00      	add	r7, sp, #0
  uint32_t mcussfreq = 0;
100024f2:	2300      	movs	r3, #0
100024f4:	60fb      	str	r3, [r7, #12]
  PLL3_ClocksTypeDef pll3_clocks;

  switch (__HAL_RCC_GET_MCU_SOURCE())
100024f6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100024fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
100024fc:	f003 0303 	and.w	r3, r3, #3
10002500:	2b03      	cmp	r3, #3
10002502:	d822      	bhi.n	1000254a <HAL_RCC_GetMCUSSFreq+0x5e>
10002504:	a201      	add	r2, pc, #4	; (adr r2, 1000250c <HAL_RCC_GetMCUSSFreq+0x20>)
10002506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1000250a:	bf00      	nop
1000250c:	1000252b 	.word	0x1000252b
10002510:	1000253f 	.word	0x1000253f
10002514:	10002545 	.word	0x10002545
10002518:	1000251d 	.word	0x1000251d
  {
    case RCC_MCUSSOURCE_PLL3:
      HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
1000251c:	463b      	mov	r3, r7
1000251e:	4618      	mov	r0, r3
10002520:	f7ff fd16 	bl	10001f50 <HAL_RCC_GetPLL3ClockFreq>
      mcussfreq = pll3_clocks.PLL3_P_Frequency;
10002524:	683b      	ldr	r3, [r7, #0]
10002526:	60fb      	str	r3, [r7, #12]
      break;
10002528:	e00f      	b.n	1000254a <HAL_RCC_GetMCUSSFreq+0x5e>

    case RCC_MCUSSOURCE_HSI:
      mcussfreq = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
1000252a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000252e:	699b      	ldr	r3, [r3, #24]
10002530:	f003 0303 	and.w	r3, r3, #3
10002534:	4a07      	ldr	r2, [pc, #28]	; (10002554 <HAL_RCC_GetMCUSSFreq+0x68>)
10002536:	fa22 f303 	lsr.w	r3, r2, r3
1000253a:	60fb      	str	r3, [r7, #12]

      break;
1000253c:	e005      	b.n	1000254a <HAL_RCC_GetMCUSSFreq+0x5e>

    case RCC_MCUSSOURCE_HSE:
      mcussfreq = HSE_VALUE;
1000253e:	4b06      	ldr	r3, [pc, #24]	; (10002558 <HAL_RCC_GetMCUSSFreq+0x6c>)
10002540:	60fb      	str	r3, [r7, #12]
      break;
10002542:	e002      	b.n	1000254a <HAL_RCC_GetMCUSSFreq+0x5e>

    case RCC_MCUSSOURCE_CSI:
      mcussfreq = CSI_VALUE;
10002544:	4b05      	ldr	r3, [pc, #20]	; (1000255c <HAL_RCC_GetMCUSSFreq+0x70>)
10002546:	60fb      	str	r3, [r7, #12]
      break;
10002548:	bf00      	nop
  }

  return mcussfreq;
1000254a:	68fb      	ldr	r3, [r7, #12]
}
1000254c:	4618      	mov	r0, r3
1000254e:	3710      	adds	r7, #16
10002550:	46bd      	mov	sp, r7
10002552:	bd80      	pop	{r7, pc}
10002554:	03d09000 	.word	0x03d09000
10002558:	016e3600 	.word	0x016e3600
1000255c:	003d0900 	.word	0x003d0900

10002560 <RCCEx_PLL2_Config>:
  *
  * @retval HAL status
  */

HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLLInitTypeDef *pll2)
{
10002560:	b580      	push	{r7, lr}
10002562:	b084      	sub	sp, #16
10002564:	af00      	add	r7, sp, #0
10002566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll2->PLLState));
  if ((pll2->PLLState) != RCC_PLL_NONE)
10002568:	687b      	ldr	r3, [r7, #4]
1000256a:	681b      	ldr	r3, [r3, #0]
1000256c:	2b00      	cmp	r3, #0
1000256e:	f000 8171 	beq.w	10002854 <RCCEx_PLL2_Config+0x2f4>
  {
    /* Check if the PLL is used as system clock or not (MPU, MCU, AXISS)*/
    if (!__IS_PLL2_IN_USE()) /* If not used then */
10002572:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10002578:	f003 0307 	and.w	r3, r3, #7
1000257c:	2b02      	cmp	r3, #2
1000257e:	d108      	bne.n	10002592 <RCCEx_PLL2_Config+0x32>
10002580:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10002586:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
1000258a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
1000258e:	f000 815f 	beq.w	10002850 <RCCEx_PLL2_Config+0x2f0>
    {
      if ((pll2->PLLState) == RCC_PLL_ON)
10002592:	687b      	ldr	r3, [r7, #4]
10002594:	681b      	ldr	r3, [r3, #0]
10002596:	2b02      	cmp	r3, #2
10002598:	f040 8130 	bne.w	100027fc <RCCEx_PLL2_Config+0x29c>
        assert_param(IS_RCC_PLLP2_VALUE(pll2->PLLP));
        assert_param(IS_RCC_PLLQ2_VALUE(pll2->PLLQ));
        assert_param(IS_RCC_PLLR2_VALUE(pll2->PLLR));

        /* Check that PLL2 OSC clock source is already set */
        if ((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) &&
1000259c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100025a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
100025a2:	f003 0303 	and.w	r3, r3, #3
100025a6:	2b00      	cmp	r3, #0
100025a8:	d008      	beq.n	100025bc <RCCEx_PLL2_Config+0x5c>
            (__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSE))
100025aa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100025ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
100025b0:	f003 0303 	and.w	r3, r3, #3
        if ((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) &&
100025b4:	2b01      	cmp	r3, #1
100025b6:	d001      	beq.n	100025bc <RCCEx_PLL2_Config+0x5c>
        {
          return HAL_ERROR;
100025b8:	2301      	movs	r3, #1
100025ba:	e14c      	b.n	10002856 <RCCEx_PLL2_Config+0x2f6>
        }

        /*Disable the post-dividers*/
        __HAL_RCC_PLL2CLKOUT_DISABLE(RCC_PLL2_DIVP | RCC_PLL2_DIVQ | RCC_PLL2_DIVR);
100025bc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100025c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
100025c4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100025c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
100025cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        /* Disable the main PLL. */
        __HAL_RCC_PLL2_DISABLE();
100025d0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100025d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
100025d8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100025dc:	f023 0301 	bic.w	r3, r3, #1
100025e0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100025e4:	f7fe f8ba 	bl	1000075c <HAL_GetTick>
100025e8:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
100025ea:	e008      	b.n	100025fe <RCCEx_PLL2_Config+0x9e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100025ec:	f7fe f8b6 	bl	1000075c <HAL_GetTick>
100025f0:	4602      	mov	r2, r0
100025f2:	68fb      	ldr	r3, [r7, #12]
100025f4:	1ad3      	subs	r3, r2, r3
100025f6:	2b64      	cmp	r3, #100	; 0x64
100025f8:	d901      	bls.n	100025fe <RCCEx_PLL2_Config+0x9e>
          {
            return HAL_TIMEOUT;
100025fa:	2303      	movs	r3, #3
100025fc:	e12b      	b.n	10002856 <RCCEx_PLL2_Config+0x2f6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
100025fe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002602:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10002606:	f003 0302 	and.w	r3, r3, #2
1000260a:	2b02      	cmp	r3, #2
1000260c:	d0ee      	beq.n	100025ec <RCCEx_PLL2_Config+0x8c>
        -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
        -Fractional Division Enable (PLLxFRACNEN)
        -Fractional Division factor (FRACNx)*/

        /* Do not change pll src if already in use */
        if (__IS_PLL1_IN_USE())
1000260e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002612:	6a1b      	ldr	r3, [r3, #32]
10002614:	f003 0303 	and.w	r3, r3, #3
10002618:	2b02      	cmp	r3, #2
1000261a:	d107      	bne.n	1000262c <RCCEx_PLL2_Config+0xcc>
1000261c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002620:	6a1b      	ldr	r3, [r3, #32]
10002622:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10002626:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
1000262a:	d00e      	beq.n	1000264a <RCCEx_PLL2_Config+0xea>
1000262c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002630:	6a1b      	ldr	r3, [r3, #32]
10002632:	f003 0303 	and.w	r3, r3, #3
10002636:	2b03      	cmp	r3, #3
10002638:	d112      	bne.n	10002660 <RCCEx_PLL2_Config+0x100>
1000263a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000263e:	6a1b      	ldr	r3, [r3, #32]
10002640:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10002644:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10002648:	d10a      	bne.n	10002660 <RCCEx_PLL2_Config+0x100>
        {
          if (pll2->PLLSource != __HAL_RCC_GET_PLL12_SOURCE())
1000264a:	687b      	ldr	r3, [r7, #4]
1000264c:	685a      	ldr	r2, [r3, #4]
1000264e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10002654:	f003 0303 	and.w	r3, r3, #3
10002658:	429a      	cmp	r2, r3
1000265a:	d00c      	beq.n	10002676 <RCCEx_PLL2_Config+0x116>
          {
            return HAL_ERROR;
1000265c:	2301      	movs	r3, #1
1000265e:	e0fa      	b.n	10002856 <RCCEx_PLL2_Config+0x2f6>
          }
        }
        else
        {
          /* Configure PLL1 and PLL2 clock source */
          __HAL_RCC_PLL12_SOURCE(pll2->PLLSource);
10002660:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10002666:	f023 0203 	bic.w	r2, r3, #3
1000266a:	687b      	ldr	r3, [r7, #4]
1000266c:	685b      	ldr	r3, [r3, #4]
1000266e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002672:	4313      	orrs	r3, r2
10002674:	628b      	str	r3, [r1, #40]	; 0x28
        }

        /* Configure the PLL2 multiplication and division factors. */
        __HAL_RCC_PLL2_CONFIG(
10002676:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000267a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
1000267e:	4b78      	ldr	r3, [pc, #480]	; (10002860 <RCCEx_PLL2_Config+0x300>)
10002680:	4013      	ands	r3, r2
10002682:	687a      	ldr	r2, [r7, #4]
10002684:	68d2      	ldr	r2, [r2, #12]
10002686:	1e51      	subs	r1, r2, #1
10002688:	687a      	ldr	r2, [r7, #4]
1000268a:	6892      	ldr	r2, [r2, #8]
1000268c:	3a01      	subs	r2, #1
1000268e:	0412      	lsls	r2, r2, #16
10002690:	430a      	orrs	r2, r1
10002692:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002696:	4313      	orrs	r3, r2
10002698:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
1000269c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100026a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
100026a4:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
100026a8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
100026ac:	687a      	ldr	r2, [r7, #4]
100026ae:	6912      	ldr	r2, [r2, #16]
100026b0:	1e51      	subs	r1, r2, #1
100026b2:	687a      	ldr	r2, [r7, #4]
100026b4:	6952      	ldr	r2, [r2, #20]
100026b6:	3a01      	subs	r2, #1
100026b8:	0212      	lsls	r2, r2, #8
100026ba:	4311      	orrs	r1, r2
100026bc:	687a      	ldr	r2, [r7, #4]
100026be:	6992      	ldr	r2, [r2, #24]
100026c0:	3a01      	subs	r2, #1
100026c2:	0412      	lsls	r2, r2, #16
100026c4:	430a      	orrs	r2, r1
100026c6:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100026ca:	4313      	orrs	r3, r2
100026cc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
          pll2->PLLQ,
          pll2->PLLR);


        /* Configure the Fractional Divider */
        __HAL_RCC_PLL2FRACV_DISABLE(); //Set FRACLE to ‘0’
100026d0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100026d4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
100026d8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100026dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
100026e0:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
        /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
        if ((pll2->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll2->PLLMODE == RCC_PLL_INTEGER))
100026e4:	687b      	ldr	r3, [r7, #4]
100026e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100026e8:	2b02      	cmp	r3, #2
100026ea:	d003      	beq.n	100026f4 <RCCEx_PLL2_Config+0x194>
100026ec:	687b      	ldr	r3, [r7, #4]
100026ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100026f0:	2b00      	cmp	r3, #0
100026f2:	d10c      	bne.n	1000270e <RCCEx_PLL2_Config+0x1ae>
        {
          /* Do not use the fractional divider */
          __HAL_RCC_PLL2FRACV_CONFIG(0); //Set FRACV to '0'
100026f4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100026f8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
100026fc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002700:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
10002704:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
10002708:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
1000270c:	e00f      	b.n	1000272e <RCCEx_PLL2_Config+0x1ce>
        }
        else
        {
          /* Configure PLL  PLL2FRACV  in fractional mode*/
          __HAL_RCC_PLL2FRACV_CONFIG(pll2->PLLFRACV);
1000270e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002712:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
10002716:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
1000271a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
1000271e:	687a      	ldr	r2, [r7, #4]
10002720:	6a12      	ldr	r2, [r2, #32]
10002722:	00d2      	lsls	r2, r2, #3
10002724:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002728:	4313      	orrs	r3, r2
1000272a:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
        }
        __HAL_RCC_PLL2FRACV_ENABLE(); //Set FRACLE to ‘1’
1000272e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002732:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
10002736:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000273a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
1000273e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0


        /* Configure the Spread Control */
        if (pll2->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
10002742:	687b      	ldr	r3, [r7, #4]
10002744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10002746:	2b02      	cmp	r3, #2
10002748:	d124      	bne.n	10002794 <RCCEx_PLL2_Config+0x234>
          assert_param(IS_RCC_SSCG_MODE(pll2->SSCG_MODE));
          assert_param(IS_RCC_RPDFN_DIS(pll2->RPDFN_DIS));
          assert_param(IS_RCC_TPDFN_DIS(pll2->TPDFN_DIS));
          assert_param(IS_RCC_MOD_PER(pll2->MOD_PER));

          __HAL_RCC_PLL2CSGCONFIG(pll2->MOD_PER, pll2->TPDFN_DIS, pll2->RPDFN_DIS,
1000274a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000274e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
10002752:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
10002756:	687b      	ldr	r3, [r7, #4]
10002758:	6a99      	ldr	r1, [r3, #40]	; 0x28
1000275a:	687b      	ldr	r3, [r7, #4]
1000275c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1000275e:	4319      	orrs	r1, r3
10002760:	687b      	ldr	r3, [r7, #4]
10002762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10002764:	4319      	orrs	r1, r3
10002766:	687b      	ldr	r3, [r7, #4]
10002768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
1000276a:	4319      	orrs	r1, r3
1000276c:	687b      	ldr	r3, [r7, #4]
1000276e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
10002770:	041b      	lsls	r3, r3, #16
10002772:	430b      	orrs	r3, r1
10002774:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002778:	4313      	orrs	r3, r2
1000277a:	f8c1 30a4 	str.w	r3, [r1, #164]	; 0xa4
                                  pll2->SSCG_MODE, pll2->INC_STEP);
          __HAL_RCC_PLL2_SSMODE_ENABLE();
1000277e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002782:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10002786:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000278a:	f043 0304 	orr.w	r3, r3, #4
1000278e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
10002792:	e009      	b.n	100027a8 <RCCEx_PLL2_Config+0x248>
        }
        else
        {
          __HAL_RCC_PLL2_SSMODE_DISABLE();
10002794:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002798:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
1000279c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100027a0:	f023 0304 	bic.w	r3, r3, #4
100027a4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }


        /* Enable the PLL2. */
        __HAL_RCC_PLL2_ENABLE();
100027a8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100027ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
100027b0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100027b4:	f043 0301 	orr.w	r3, r3, #1
100027b8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100027bc:	f7fd ffce 	bl	1000075c <HAL_GetTick>
100027c0:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
100027c2:	e008      	b.n	100027d6 <RCCEx_PLL2_Config+0x276>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100027c4:	f7fd ffca 	bl	1000075c <HAL_GetTick>
100027c8:	4602      	mov	r2, r0
100027ca:	68fb      	ldr	r3, [r7, #12]
100027cc:	1ad3      	subs	r3, r2, r3
100027ce:	2b64      	cmp	r3, #100	; 0x64
100027d0:	d901      	bls.n	100027d6 <RCCEx_PLL2_Config+0x276>
          {
            return HAL_TIMEOUT;
100027d2:	2303      	movs	r3, #3
100027d4:	e03f      	b.n	10002856 <RCCEx_PLL2_Config+0x2f6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
100027d6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100027da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
100027de:	f003 0302 	and.w	r3, r3, #2
100027e2:	2b02      	cmp	r3, #2
100027e4:	d1ee      	bne.n	100027c4 <RCCEx_PLL2_Config+0x264>
          }
        }
        /*Enable the post-dividers*/
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP | RCC_PLL2_DIVQ | RCC_PLL2_DIVR);
100027e6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100027ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
100027ee:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100027f2:	f043 0370 	orr.w	r3, r3, #112	; 0x70
100027f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      if ((pll2->PLLState) == RCC_PLL_ON)
100027fa:	e02b      	b.n	10002854 <RCCEx_PLL2_Config+0x2f4>
      }
      else
      {
        /*Disable the post-dividers*/
        __HAL_RCC_PLL2CLKOUT_DISABLE(RCC_PLL2_DIVP | RCC_PLL2_DIVQ | RCC_PLL2_DIVR);
100027fc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002800:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10002804:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002808:	f023 0370 	bic.w	r3, r3, #112	; 0x70
1000280c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        /* Disable the PLL2. */
        __HAL_RCC_PLL2_DISABLE();
10002810:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002814:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10002818:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000281c:	f023 0301 	bic.w	r3, r3, #1
10002820:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10002824:	f7fd ff9a 	bl	1000075c <HAL_GetTick>
10002828:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
1000282a:	e008      	b.n	1000283e <RCCEx_PLL2_Config+0x2de>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
1000282c:	f7fd ff96 	bl	1000075c <HAL_GetTick>
10002830:	4602      	mov	r2, r0
10002832:	68fb      	ldr	r3, [r7, #12]
10002834:	1ad3      	subs	r3, r2, r3
10002836:	2b64      	cmp	r3, #100	; 0x64
10002838:	d901      	bls.n	1000283e <RCCEx_PLL2_Config+0x2de>
          {
            return HAL_TIMEOUT;
1000283a:	2303      	movs	r3, #3
1000283c:	e00b      	b.n	10002856 <RCCEx_PLL2_Config+0x2f6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
1000283e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002842:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10002846:	f003 0302 	and.w	r3, r3, #2
1000284a:	2b02      	cmp	r3, #2
1000284c:	d0ee      	beq.n	1000282c <RCCEx_PLL2_Config+0x2cc>
      if ((pll2->PLLState) == RCC_PLL_ON)
1000284e:	e001      	b.n	10002854 <RCCEx_PLL2_Config+0x2f4>
        }
      }
    }
    else
    {
      return HAL_ERROR;
10002850:	2301      	movs	r3, #1
10002852:	e000      	b.n	10002856 <RCCEx_PLL2_Config+0x2f6>
    }
  }
  return HAL_OK;
10002854:	2300      	movs	r3, #0

}
10002856:	4618      	mov	r0, r3
10002858:	3710      	adds	r7, #16
1000285a:	46bd      	mov	sp, r7
1000285c:	bd80      	pop	{r7, pc}
1000285e:	bf00      	nop
10002860:	ffc0fe00 	.word	0xffc0fe00

10002864 <RCCEx_PLL3_Config>:
  * @param  pll3: pointer to a RCC_PLLInitTypeDef structure
  *
  * @retval HAL status
  */
HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLLInitTypeDef *pll3)
{
10002864:	b580      	push	{r7, lr}
10002866:	b084      	sub	sp, #16
10002868:	af00      	add	r7, sp, #0
1000286a:	6078      	str	r0, [r7, #4]

  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll3->PLLState));
  if ((pll3->PLLState) != RCC_PLL_NONE)
1000286c:	687b      	ldr	r3, [r7, #4]
1000286e:	681b      	ldr	r3, [r3, #0]
10002870:	2b00      	cmp	r3, #0
10002872:	f000 815a 	beq.w	10002b2a <RCCEx_PLL3_Config+0x2c6>
  {
    /* Check if the PLL is used as system clock or not (MPU, MCU, AXISS)*/
    if (!__IS_PLL3_IN_USE()) /* If not used then*/
10002876:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000287a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
1000287c:	f003 0303 	and.w	r3, r3, #3
10002880:	2b03      	cmp	r3, #3
10002882:	d108      	bne.n	10002896 <RCCEx_PLL3_Config+0x32>
10002884:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002888:	6c9b      	ldr	r3, [r3, #72]	; 0x48
1000288a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
1000288e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10002892:	f000 8148 	beq.w	10002b26 <RCCEx_PLL3_Config+0x2c2>
    {
      if ((pll3->PLLState) == RCC_PLL_ON)
10002896:	687b      	ldr	r3, [r7, #4]
10002898:	681b      	ldr	r3, [r3, #0]
1000289a:	2b02      	cmp	r3, #2
1000289c:	f040 8119 	bne.w	10002ad2 <RCCEx_PLL3_Config+0x26e>
        assert_param(IS_RCC_PLLP3_VALUE(pll3->PLLP));
        assert_param(IS_RCC_PLLQ3_VALUE(pll3->PLLQ));
        assert_param(IS_RCC_PLLR3_VALUE(pll3->PLLR));

        /*Disable the post-dividers*/
        __HAL_RCC_PLL3CLKOUT_DISABLE(RCC_PLL3_DIVP | RCC_PLL3_DIVQ | RCC_PLL3_DIVR);
100028a0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100028a4:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100028a8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100028ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
100028b0:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
        /* Disable the main PLL. */
        __HAL_RCC_PLL3_DISABLE();
100028b4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100028b8:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100028bc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100028c0:	f023 0301 	bic.w	r3, r3, #1
100028c4:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100028c8:	f7fd ff48 	bl	1000075c <HAL_GetTick>
100028cc:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
100028ce:	e008      	b.n	100028e2 <RCCEx_PLL3_Config+0x7e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100028d0:	f7fd ff44 	bl	1000075c <HAL_GetTick>
100028d4:	4602      	mov	r2, r0
100028d6:	68fb      	ldr	r3, [r7, #12]
100028d8:	1ad3      	subs	r3, r2, r3
100028da:	2b64      	cmp	r3, #100	; 0x64
100028dc:	d901      	bls.n	100028e2 <RCCEx_PLL3_Config+0x7e>
          {
            return HAL_TIMEOUT;
100028de:	2303      	movs	r3, #3
100028e0:	e124      	b.n	10002b2c <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
100028e2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100028e6:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100028ea:	f003 0302 	and.w	r3, r3, #2
100028ee:	2b02      	cmp	r3, #2
100028f0:	d0ee      	beq.n	100028d0 <RCCEx_PLL3_Config+0x6c>
        -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
        -Fractional Division Enable (PLLxFRACNEN)
        -Fractional Division factor (FRACNx)*/

        /* Configure PLL3 clock source */
        __HAL_RCC_PLL3_SOURCE(pll3->PLLSource);
100028f2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100028f6:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
100028fa:	f023 0203 	bic.w	r2, r3, #3
100028fe:	687b      	ldr	r3, [r7, #4]
10002900:	685b      	ldr	r3, [r3, #4]
10002902:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002906:	4313      	orrs	r3, r2
10002908:	f8c1 3820 	str.w	r3, [r1, #2080]	; 0x820

        /* Wait till PLL SOURCE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3SRCRDY) == RESET)
1000290c:	e008      	b.n	10002920 <RCCEx_PLL3_Config+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
1000290e:	f7fd ff25 	bl	1000075c <HAL_GetTick>
10002912:	4602      	mov	r2, r0
10002914:	68fb      	ldr	r3, [r7, #12]
10002916:	1ad3      	subs	r3, r2, r3
10002918:	2b64      	cmp	r3, #100	; 0x64
1000291a:	d901      	bls.n	10002920 <RCCEx_PLL3_Config+0xbc>
          {
            return HAL_TIMEOUT;
1000291c:	2303      	movs	r3, #3
1000291e:	e105      	b.n	10002b2c <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3SRCRDY) == RESET)
10002920:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002924:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10002928:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
1000292c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10002930:	d1ed      	bne.n	1000290e <RCCEx_PLL3_Config+0xaa>
          }
        }

        /* Select PLL3 input reference frequency range */
        __HAL_RCC_PLL3_IFRANGE(pll3->PLLRGE) ;
10002932:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002936:	f8d3 3884 	ldr.w	r3, [r3, #2180]	; 0x884
1000293a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
1000293e:	687b      	ldr	r3, [r7, #4]
10002940:	69db      	ldr	r3, [r3, #28]
10002942:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002946:	4313      	orrs	r3, r2
10002948:	f8c1 3884 	str.w	r3, [r1, #2180]	; 0x884

        /* Configure the PLL3 multiplication and division factors. */
        __HAL_RCC_PLL3_CONFIG(
1000294c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002950:	f8d3 2884 	ldr.w	r2, [r3, #2180]	; 0x884
10002954:	4b77      	ldr	r3, [pc, #476]	; (10002b34 <RCCEx_PLL3_Config+0x2d0>)
10002956:	4013      	ands	r3, r2
10002958:	687a      	ldr	r2, [r7, #4]
1000295a:	68d2      	ldr	r2, [r2, #12]
1000295c:	1e51      	subs	r1, r2, #1
1000295e:	687a      	ldr	r2, [r7, #4]
10002960:	6892      	ldr	r2, [r2, #8]
10002962:	3a01      	subs	r2, #1
10002964:	0412      	lsls	r2, r2, #16
10002966:	430a      	orrs	r2, r1
10002968:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000296c:	4313      	orrs	r3, r2
1000296e:	f8c1 3884 	str.w	r3, [r1, #2180]	; 0x884
10002972:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002976:	f8d3 3888 	ldr.w	r3, [r3, #2184]	; 0x888
1000297a:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
1000297e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
10002982:	687a      	ldr	r2, [r7, #4]
10002984:	6912      	ldr	r2, [r2, #16]
10002986:	1e51      	subs	r1, r2, #1
10002988:	687a      	ldr	r2, [r7, #4]
1000298a:	6952      	ldr	r2, [r2, #20]
1000298c:	3a01      	subs	r2, #1
1000298e:	0212      	lsls	r2, r2, #8
10002990:	4311      	orrs	r1, r2
10002992:	687a      	ldr	r2, [r7, #4]
10002994:	6992      	ldr	r2, [r2, #24]
10002996:	3a01      	subs	r2, #1
10002998:	0412      	lsls	r2, r2, #16
1000299a:	430a      	orrs	r2, r1
1000299c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100029a0:	4313      	orrs	r3, r2
100029a2:	f8c1 3888 	str.w	r3, [r1, #2184]	; 0x888
          pll3->PLLP,
          pll3->PLLQ,
          pll3->PLLR);

        /* Configure the Fractional Divider */
        __HAL_RCC_PLL3FRACV_DISABLE(); //Set FRACLE to ‘0’
100029a6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100029aa:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
100029ae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100029b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
100029b6:	f8c2 388c 	str.w	r3, [r2, #2188]	; 0x88c
        /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
        if ((pll3->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll3->PLLMODE == RCC_PLL_INTEGER))
100029ba:	687b      	ldr	r3, [r7, #4]
100029bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100029be:	2b02      	cmp	r3, #2
100029c0:	d003      	beq.n	100029ca <RCCEx_PLL3_Config+0x166>
100029c2:	687b      	ldr	r3, [r7, #4]
100029c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100029c6:	2b00      	cmp	r3, #0
100029c8:	d10c      	bne.n	100029e4 <RCCEx_PLL3_Config+0x180>
        {
          /* Do not use the fractional divider */
          __HAL_RCC_PLL3FRACV_CONFIG(0); //Set FRACV to '0'
100029ca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100029ce:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
100029d2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100029d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
100029da:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
100029de:	f8c2 388c 	str.w	r3, [r2, #2188]	; 0x88c
100029e2:	e00f      	b.n	10002a04 <RCCEx_PLL3_Config+0x1a0>
        }
        else
        {
          /* Configure PLL  PLL3FRACV  in fractional mode*/
          __HAL_RCC_PLL3FRACV_CONFIG(pll3->PLLFRACV);
100029e4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100029e8:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
100029ec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
100029f0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
100029f4:	687a      	ldr	r2, [r7, #4]
100029f6:	6a12      	ldr	r2, [r2, #32]
100029f8:	00d2      	lsls	r2, r2, #3
100029fa:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100029fe:	4313      	orrs	r3, r2
10002a00:	f8c1 388c 	str.w	r3, [r1, #2188]	; 0x88c
        }
        __HAL_RCC_PLL3FRACV_ENABLE(); //Set FRACLE to ‘1’
10002a04:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002a08:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
10002a0c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002a10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
10002a14:	f8c2 388c 	str.w	r3, [r2, #2188]	; 0x88c


        /* Configure the Spread Control */
        if (pll3->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
10002a18:	687b      	ldr	r3, [r7, #4]
10002a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10002a1c:	2b02      	cmp	r3, #2
10002a1e:	d124      	bne.n	10002a6a <RCCEx_PLL3_Config+0x206>
          assert_param(IS_RCC_SSCG_MODE(pll3->SSCG_MODE));
          assert_param(IS_RCC_RPDFN_DIS(pll3->RPDFN_DIS));
          assert_param(IS_RCC_TPDFN_DIS(pll3->TPDFN_DIS));
          assert_param(IS_RCC_MOD_PER(pll3->MOD_PER));

          __HAL_RCC_PLL3CSGCONFIG(pll3->MOD_PER, pll3->TPDFN_DIS, pll3->RPDFN_DIS,
10002a20:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002a24:	f8d3 3890 	ldr.w	r3, [r3, #2192]	; 0x890
10002a28:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
10002a2c:	687b      	ldr	r3, [r7, #4]
10002a2e:	6a99      	ldr	r1, [r3, #40]	; 0x28
10002a30:	687b      	ldr	r3, [r7, #4]
10002a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10002a34:	4319      	orrs	r1, r3
10002a36:	687b      	ldr	r3, [r7, #4]
10002a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10002a3a:	4319      	orrs	r1, r3
10002a3c:	687b      	ldr	r3, [r7, #4]
10002a3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
10002a40:	4319      	orrs	r1, r3
10002a42:	687b      	ldr	r3, [r7, #4]
10002a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
10002a46:	041b      	lsls	r3, r3, #16
10002a48:	430b      	orrs	r3, r1
10002a4a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002a4e:	4313      	orrs	r3, r2
10002a50:	f8c1 3890 	str.w	r3, [r1, #2192]	; 0x890
                                  pll3->SSCG_MODE, pll3->INC_STEP);
          __HAL_RCC_PLL3_SSMODE_ENABLE();
10002a54:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002a58:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10002a5c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002a60:	f043 0304 	orr.w	r3, r3, #4
10002a64:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
10002a68:	e009      	b.n	10002a7e <RCCEx_PLL3_Config+0x21a>
        }
        else
        {
          __HAL_RCC_PLL3_SSMODE_DISABLE();
10002a6a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002a6e:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10002a72:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002a76:	f023 0304 	bic.w	r3, r3, #4
10002a7a:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
        }


        /* Enable the PLL3. */
        __HAL_RCC_PLL3_ENABLE();
10002a7e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002a82:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10002a86:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002a8a:	f043 0301 	orr.w	r3, r3, #1
10002a8e:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10002a92:	f7fd fe63 	bl	1000075c <HAL_GetTick>
10002a96:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
10002a98:	e008      	b.n	10002aac <RCCEx_PLL3_Config+0x248>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10002a9a:	f7fd fe5f 	bl	1000075c <HAL_GetTick>
10002a9e:	4602      	mov	r2, r0
10002aa0:	68fb      	ldr	r3, [r7, #12]
10002aa2:	1ad3      	subs	r3, r2, r3
10002aa4:	2b64      	cmp	r3, #100	; 0x64
10002aa6:	d901      	bls.n	10002aac <RCCEx_PLL3_Config+0x248>
          {
            return HAL_TIMEOUT;
10002aa8:	2303      	movs	r3, #3
10002aaa:	e03f      	b.n	10002b2c <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
10002aac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002ab0:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10002ab4:	f003 0302 	and.w	r3, r3, #2
10002ab8:	2b02      	cmp	r3, #2
10002aba:	d1ee      	bne.n	10002a9a <RCCEx_PLL3_Config+0x236>
          }
        }
        /* Enable the post-dividers */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP | RCC_PLL3_DIVQ | RCC_PLL3_DIVR);
10002abc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002ac0:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10002ac4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002ac8:	f043 0370 	orr.w	r3, r3, #112	; 0x70
10002acc:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
      if ((pll3->PLLState) == RCC_PLL_ON)
10002ad0:	e02b      	b.n	10002b2a <RCCEx_PLL3_Config+0x2c6>
      }
      else
      {
        /*Disable the post-dividers*/
        __HAL_RCC_PLL3CLKOUT_DISABLE(RCC_PLL3_DIVP | RCC_PLL3_DIVQ | RCC_PLL3_DIVR);
10002ad2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002ad6:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10002ada:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002ade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
10002ae2:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
        /* Disable the PLL3. */
        __HAL_RCC_PLL3_DISABLE();
10002ae6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002aea:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10002aee:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002af2:	f023 0301 	bic.w	r3, r3, #1
10002af6:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10002afa:	f7fd fe2f 	bl	1000075c <HAL_GetTick>
10002afe:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
10002b00:	e008      	b.n	10002b14 <RCCEx_PLL3_Config+0x2b0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10002b02:	f7fd fe2b 	bl	1000075c <HAL_GetTick>
10002b06:	4602      	mov	r2, r0
10002b08:	68fb      	ldr	r3, [r7, #12]
10002b0a:	1ad3      	subs	r3, r2, r3
10002b0c:	2b64      	cmp	r3, #100	; 0x64
10002b0e:	d901      	bls.n	10002b14 <RCCEx_PLL3_Config+0x2b0>
          {
            return HAL_TIMEOUT;
10002b10:	2303      	movs	r3, #3
10002b12:	e00b      	b.n	10002b2c <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
10002b14:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002b18:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10002b1c:	f003 0302 	and.w	r3, r3, #2
10002b20:	2b02      	cmp	r3, #2
10002b22:	d0ee      	beq.n	10002b02 <RCCEx_PLL3_Config+0x29e>
      if ((pll3->PLLState) == RCC_PLL_ON)
10002b24:	e001      	b.n	10002b2a <RCCEx_PLL3_Config+0x2c6>
        }
      }
    }
    else
    {
      return HAL_ERROR;
10002b26:	2301      	movs	r3, #1
10002b28:	e000      	b.n	10002b2c <RCCEx_PLL3_Config+0x2c8>
    }
  }
  return HAL_OK;
10002b2a:	2300      	movs	r3, #0
}
10002b2c:	4618      	mov	r0, r3
10002b2e:	3710      	adds	r7, #16
10002b30:	46bd      	mov	sp, r7
10002b32:	bd80      	pop	{r7, pc}
10002b34:	ffc0fe00 	.word	0xffc0fe00

10002b38 <RCCEx_PLL4_Config>:
  * @param  pll4: pointer to a RCC_PLLInitTypeDef structure
  *
  * @retval HAL status
  */
HAL_StatusTypeDef RCCEx_PLL4_Config(RCC_PLLInitTypeDef *pll4)
{
10002b38:	b580      	push	{r7, lr}
10002b3a:	b084      	sub	sp, #16
10002b3c:	af00      	add	r7, sp, #0
10002b3e:	6078      	str	r0, [r7, #4]

  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll4->PLLState));
  if ((pll4->PLLState) != RCC_PLL_NONE)
10002b40:	687b      	ldr	r3, [r7, #4]
10002b42:	681b      	ldr	r3, [r3, #0]
10002b44:	2b00      	cmp	r3, #0
10002b46:	f000 8147 	beq.w	10002dd8 <RCCEx_PLL4_Config+0x2a0>
  {

    if ((pll4->PLLState) == RCC_PLL_ON)
10002b4a:	687b      	ldr	r3, [r7, #4]
10002b4c:	681b      	ldr	r3, [r3, #0]
10002b4e:	2b02      	cmp	r3, #2
10002b50:	f040 8119 	bne.w	10002d86 <RCCEx_PLL4_Config+0x24e>
      assert_param(IS_RCC_PLLP4_VALUE(pll4->PLLP));
      assert_param(IS_RCC_PLLQ4_VALUE(pll4->PLLQ));
      assert_param(IS_RCC_PLLR4_VALUE(pll4->PLLR));

      /*Disable the post-dividers*/
      __HAL_RCC_PLL4CLKOUT_DISABLE(RCC_PLL4_DIVP | RCC_PLL4_DIVQ | RCC_PLL4_DIVR);
10002b54:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002b58:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10002b5c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002b60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
10002b64:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
      /* Disable the main PLL. */
      __HAL_RCC_PLL4_DISABLE();
10002b68:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002b6c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10002b70:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002b74:	f023 0301 	bic.w	r3, r3, #1
10002b78:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10002b7c:	f7fd fdee 	bl	1000075c <HAL_GetTick>
10002b80:	60f8      	str	r0, [r7, #12]

      /* Wait till PLL is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
10002b82:	e008      	b.n	10002b96 <RCCEx_PLL4_Config+0x5e>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10002b84:	f7fd fdea 	bl	1000075c <HAL_GetTick>
10002b88:	4602      	mov	r2, r0
10002b8a:	68fb      	ldr	r3, [r7, #12]
10002b8c:	1ad3      	subs	r3, r2, r3
10002b8e:	2b64      	cmp	r3, #100	; 0x64
10002b90:	d901      	bls.n	10002b96 <RCCEx_PLL4_Config+0x5e>
        {
          return HAL_TIMEOUT;
10002b92:	2303      	movs	r3, #3
10002b94:	e121      	b.n	10002dda <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
10002b96:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002b9a:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10002b9e:	f003 0302 	and.w	r3, r3, #2
10002ba2:	2b02      	cmp	r3, #2
10002ba4:	d0ee      	beq.n	10002b84 <RCCEx_PLL4_Config+0x4c>
      -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
      -Fractional Division Enable (PLLxFRACNEN)
      -Fractional Division factor (FRACNx)*/

      /* Configure PLL4 and PLL4 clock source */
      __HAL_RCC_PLL4_SOURCE(pll4->PLLSource);
10002ba6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002baa:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
10002bae:	f023 0203 	bic.w	r2, r3, #3
10002bb2:	687b      	ldr	r3, [r7, #4]
10002bb4:	685b      	ldr	r3, [r3, #4]
10002bb6:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002bba:	4313      	orrs	r3, r2
10002bbc:	f8c1 3824 	str.w	r3, [r1, #2084]	; 0x824

      /* Wait till PLL SOURCE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4SRCRDY) == RESET)
10002bc0:	e008      	b.n	10002bd4 <RCCEx_PLL4_Config+0x9c>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10002bc2:	f7fd fdcb 	bl	1000075c <HAL_GetTick>
10002bc6:	4602      	mov	r2, r0
10002bc8:	68fb      	ldr	r3, [r7, #12]
10002bca:	1ad3      	subs	r3, r2, r3
10002bcc:	2b64      	cmp	r3, #100	; 0x64
10002bce:	d901      	bls.n	10002bd4 <RCCEx_PLL4_Config+0x9c>
        {
          return HAL_TIMEOUT;
10002bd0:	2303      	movs	r3, #3
10002bd2:	e102      	b.n	10002dda <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4SRCRDY) == RESET)
10002bd4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002bd8:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
10002bdc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10002be0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10002be4:	d1ed      	bne.n	10002bc2 <RCCEx_PLL4_Config+0x8a>
        }
      }

      /* Select PLL4 input reference frequency range */
      __HAL_RCC_PLL4_IFRANGE(pll4->PLLRGE) ;
10002be6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002bea:	f8d3 3898 	ldr.w	r3, [r3, #2200]	; 0x898
10002bee:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
10002bf2:	687b      	ldr	r3, [r7, #4]
10002bf4:	69db      	ldr	r3, [r3, #28]
10002bf6:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002bfa:	4313      	orrs	r3, r2
10002bfc:	f8c1 3898 	str.w	r3, [r1, #2200]	; 0x898

      /* Configure the PLL4 multiplication and division factors. */
      __HAL_RCC_PLL4_CONFIG(
10002c00:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002c04:	f8d3 2898 	ldr.w	r2, [r3, #2200]	; 0x898
10002c08:	4b76      	ldr	r3, [pc, #472]	; (10002de4 <RCCEx_PLL4_Config+0x2ac>)
10002c0a:	4013      	ands	r3, r2
10002c0c:	687a      	ldr	r2, [r7, #4]
10002c0e:	68d2      	ldr	r2, [r2, #12]
10002c10:	1e51      	subs	r1, r2, #1
10002c12:	687a      	ldr	r2, [r7, #4]
10002c14:	6892      	ldr	r2, [r2, #8]
10002c16:	3a01      	subs	r2, #1
10002c18:	0412      	lsls	r2, r2, #16
10002c1a:	430a      	orrs	r2, r1
10002c1c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002c20:	4313      	orrs	r3, r2
10002c22:	f8c1 3898 	str.w	r3, [r1, #2200]	; 0x898
10002c26:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002c2a:	f8d3 389c 	ldr.w	r3, [r3, #2204]	; 0x89c
10002c2e:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
10002c32:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
10002c36:	687a      	ldr	r2, [r7, #4]
10002c38:	6912      	ldr	r2, [r2, #16]
10002c3a:	1e51      	subs	r1, r2, #1
10002c3c:	687a      	ldr	r2, [r7, #4]
10002c3e:	6952      	ldr	r2, [r2, #20]
10002c40:	3a01      	subs	r2, #1
10002c42:	0212      	lsls	r2, r2, #8
10002c44:	4311      	orrs	r1, r2
10002c46:	687a      	ldr	r2, [r7, #4]
10002c48:	6992      	ldr	r2, [r2, #24]
10002c4a:	3a01      	subs	r2, #1
10002c4c:	0412      	lsls	r2, r2, #16
10002c4e:	430a      	orrs	r2, r1
10002c50:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002c54:	4313      	orrs	r3, r2
10002c56:	f8c1 389c 	str.w	r3, [r1, #2204]	; 0x89c
        pll4->PLLP,
        pll4->PLLQ,
        pll4->PLLR);

      /* Configure the Fractional Divider */
      __HAL_RCC_PLL4FRACV_DISABLE(); //Set FRACLE to ‘0’
10002c5a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002c5e:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
10002c62:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002c66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
10002c6a:	f8c2 38a0 	str.w	r3, [r2, #2208]	; 0x8a0
      /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
      if ((pll4->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll4->PLLMODE == RCC_PLL_INTEGER))
10002c6e:	687b      	ldr	r3, [r7, #4]
10002c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10002c72:	2b02      	cmp	r3, #2
10002c74:	d003      	beq.n	10002c7e <RCCEx_PLL4_Config+0x146>
10002c76:	687b      	ldr	r3, [r7, #4]
10002c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10002c7a:	2b00      	cmp	r3, #0
10002c7c:	d10c      	bne.n	10002c98 <RCCEx_PLL4_Config+0x160>
      {
        /* Do not use the fractional divider */
        __HAL_RCC_PLL4FRACV_CONFIG(0); //Set FRACV to '0'
10002c7e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002c82:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
10002c86:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002c8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
10002c8e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
10002c92:	f8c2 38a0 	str.w	r3, [r2, #2208]	; 0x8a0
10002c96:	e00f      	b.n	10002cb8 <RCCEx_PLL4_Config+0x180>
      }
      else
      {
        /* Configure PLL  PLL4FRACV  in fractional mode*/
        __HAL_RCC_PLL4FRACV_CONFIG(pll4->PLLFRACV);
10002c98:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002c9c:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
10002ca0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
10002ca4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
10002ca8:	687a      	ldr	r2, [r7, #4]
10002caa:	6a12      	ldr	r2, [r2, #32]
10002cac:	00d2      	lsls	r2, r2, #3
10002cae:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002cb2:	4313      	orrs	r3, r2
10002cb4:	f8c1 38a0 	str.w	r3, [r1, #2208]	; 0x8a0
      }
      __HAL_RCC_PLL4FRACV_ENABLE(); //Set FRACLE to ‘1’
10002cb8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002cbc:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
10002cc0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002cc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
10002cc8:	f8c2 38a0 	str.w	r3, [r2, #2208]	; 0x8a0

      /* Configure the Spread Control */
      if (pll4->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
10002ccc:	687b      	ldr	r3, [r7, #4]
10002cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10002cd0:	2b02      	cmp	r3, #2
10002cd2:	d124      	bne.n	10002d1e <RCCEx_PLL4_Config+0x1e6>
        assert_param(IS_RCC_SSCG_MODE(pll4->SSCG_MODE));
        assert_param(IS_RCC_RPDFN_DIS(pll4->RPDFN_DIS));
        assert_param(IS_RCC_TPDFN_DIS(pll4->TPDFN_DIS));
        assert_param(IS_RCC_MOD_PER(pll4->MOD_PER));

        __HAL_RCC_PLL4CSGCONFIG(pll4->MOD_PER, pll4->TPDFN_DIS, pll4->RPDFN_DIS,
10002cd4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002cd8:	f8d3 38a4 	ldr.w	r3, [r3, #2212]	; 0x8a4
10002cdc:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
10002ce0:	687b      	ldr	r3, [r7, #4]
10002ce2:	6a99      	ldr	r1, [r3, #40]	; 0x28
10002ce4:	687b      	ldr	r3, [r7, #4]
10002ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10002ce8:	4319      	orrs	r1, r3
10002cea:	687b      	ldr	r3, [r7, #4]
10002cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10002cee:	4319      	orrs	r1, r3
10002cf0:	687b      	ldr	r3, [r7, #4]
10002cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
10002cf4:	4319      	orrs	r1, r3
10002cf6:	687b      	ldr	r3, [r7, #4]
10002cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
10002cfa:	041b      	lsls	r3, r3, #16
10002cfc:	430b      	orrs	r3, r1
10002cfe:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002d02:	4313      	orrs	r3, r2
10002d04:	f8c1 38a4 	str.w	r3, [r1, #2212]	; 0x8a4
                                pll4->SSCG_MODE, pll4->INC_STEP);
        __HAL_RCC_PLL4_SSMODE_ENABLE();
10002d08:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002d0c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10002d10:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002d14:	f043 0304 	orr.w	r3, r3, #4
10002d18:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
10002d1c:	e009      	b.n	10002d32 <RCCEx_PLL4_Config+0x1fa>
      }
      else
      {
        __HAL_RCC_PLL4_SSMODE_DISABLE();
10002d1e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002d22:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10002d26:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002d2a:	f023 0304 	bic.w	r3, r3, #4
10002d2e:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
      }

      /* Enable the PLL4. */
      __HAL_RCC_PLL4_ENABLE();
10002d32:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002d36:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10002d3a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002d3e:	f043 0301 	orr.w	r3, r3, #1
10002d42:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10002d46:	f7fd fd09 	bl	1000075c <HAL_GetTick>
10002d4a:	60f8      	str	r0, [r7, #12]

      /* Wait till PLL is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) == RESET)
10002d4c:	e008      	b.n	10002d60 <RCCEx_PLL4_Config+0x228>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10002d4e:	f7fd fd05 	bl	1000075c <HAL_GetTick>
10002d52:	4602      	mov	r2, r0
10002d54:	68fb      	ldr	r3, [r7, #12]
10002d56:	1ad3      	subs	r3, r2, r3
10002d58:	2b64      	cmp	r3, #100	; 0x64
10002d5a:	d901      	bls.n	10002d60 <RCCEx_PLL4_Config+0x228>
        {
          return HAL_TIMEOUT;
10002d5c:	2303      	movs	r3, #3
10002d5e:	e03c      	b.n	10002dda <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) == RESET)
10002d60:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002d64:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10002d68:	f003 0302 	and.w	r3, r3, #2
10002d6c:	2b02      	cmp	r3, #2
10002d6e:	d1ee      	bne.n	10002d4e <RCCEx_PLL4_Config+0x216>
        }
      }
      /* Enable PLL4P Clock output. */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP | RCC_PLL4_DIVQ | RCC_PLL4_DIVR);
10002d70:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002d74:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10002d78:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002d7c:	f043 0370 	orr.w	r3, r3, #112	; 0x70
10002d80:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
10002d84:	e028      	b.n	10002dd8 <RCCEx_PLL4_Config+0x2a0>
    }
    else
    {
      /*Disable the post-dividers*/
      __HAL_RCC_PLL4CLKOUT_DISABLE(RCC_PLL4_DIVP | RCC_PLL4_DIVQ | RCC_PLL4_DIVR);
10002d86:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002d8a:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10002d8e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002d92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
10002d96:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
      /* Disable the PLL4. */
      __HAL_RCC_PLL4_DISABLE();
10002d9a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002d9e:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10002da2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002da6:	f023 0301 	bic.w	r3, r3, #1
10002daa:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10002dae:	f7fd fcd5 	bl	1000075c <HAL_GetTick>
10002db2:	60f8      	str	r0, [r7, #12]

      /* Wait till PLL is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
10002db4:	e008      	b.n	10002dc8 <RCCEx_PLL4_Config+0x290>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10002db6:	f7fd fcd1 	bl	1000075c <HAL_GetTick>
10002dba:	4602      	mov	r2, r0
10002dbc:	68fb      	ldr	r3, [r7, #12]
10002dbe:	1ad3      	subs	r3, r2, r3
10002dc0:	2b64      	cmp	r3, #100	; 0x64
10002dc2:	d901      	bls.n	10002dc8 <RCCEx_PLL4_Config+0x290>
        {
          return HAL_TIMEOUT;
10002dc4:	2303      	movs	r3, #3
10002dc6:	e008      	b.n	10002dda <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
10002dc8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002dcc:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10002dd0:	f003 0302 	and.w	r3, r3, #2
10002dd4:	2b02      	cmp	r3, #2
10002dd6:	d0ee      	beq.n	10002db6 <RCCEx_PLL4_Config+0x27e>
        }
      }
    }
  }
  return HAL_OK;
10002dd8:	2300      	movs	r3, #0
}
10002dda:	4618      	mov	r0, r3
10002ddc:	3710      	adds	r7, #16
10002dde:	46bd      	mov	sp, r7
10002de0:	bd80      	pop	{r7, pc}
10002de2:	bf00      	nop
10002de4:	ffc0fe00 	.word	0xffc0fe00

10002de8 <HAL_RCCEx_PeriphCLKConfig>:
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef
                                            *PeriphClkInit)
{
10002de8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
10002dec:	b0cc      	sub	sp, #304	; 0x130
10002dee:	af00      	add	r7, sp, #0
10002df0:	1d3b      	adds	r3, r7, #4
10002df2:	6018      	str	r0, [r3, #0]
  uint32_t tmpreg = 0, RESERVED_BDCR_MASK = 0;
10002df4:	2300      	movs	r3, #0
10002df6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
10002dfa:	2300      	movs	r3, #0
10002dfc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
10002e00:	2300      	movs	r3, #0
10002e02:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
10002e06:	2300      	movs	r3, #0
10002e08:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- CKPER configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) ==
10002e0c:	1d3b      	adds	r3, r7, #4
10002e0e:	681b      	ldr	r3, [r3, #0]
10002e10:	e9d3 bc00 	ldrd	fp, ip, [r3]
10002e14:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
10002e18:	f04f 0200 	mov.w	r2, #0
10002e1c:	ea0b 0301 	and.w	r3, fp, r1
10002e20:	ea0c 0402 	and.w	r4, ip, r2
10002e24:	4323      	orrs	r3, r4
10002e26:	d00e      	beq.n	10002e46 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      RCC_PERIPHCLK_CKPER)
  {
    /* Check the parameters */
    assert_param(IS_RCC_CKPERCLKSOURCE(PeriphClkInit->CkperClockSelection));

    __HAL_RCC_CKPER_CONFIG(PeriphClkInit->CkperClockSelection);
10002e28:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002e2c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
10002e30:	f023 0203 	bic.w	r2, r3, #3
10002e34:	1d3b      	adds	r3, r7, #4
10002e36:	681b      	ldr	r3, [r3, #0]
10002e38:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
10002e3c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002e40:	4313      	orrs	r3, r2
10002e42:	f8c1 30d0 	str.w	r3, [r1, #208]	; 0xd0
  }

  /*------------------------------ I2C12 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) &  RCC_PERIPHCLK_I2C12) ==
10002e46:	1d3b      	adds	r3, r7, #4
10002e48:	681b      	ldr	r3, [r3, #0]
10002e4a:	e9d3 bc00 	ldrd	fp, ip, [r3]
10002e4e:	f04f 0110 	mov.w	r1, #16
10002e52:	f04f 0200 	mov.w	r2, #0
10002e56:	ea0b 0301 	and.w	r3, fp, r1
10002e5a:	ea0c 0402 	and.w	r4, ip, r2
10002e5e:	4323      	orrs	r3, r4
10002e60:	d02f      	beq.n	10002ec2 <HAL_RCCEx_PeriphCLKConfig+0xda>
      RCC_PERIPHCLK_I2C12)
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C12CLKSOURCE(PeriphClkInit->I2c12ClockSelection));

    if ((PeriphClkInit->I2c12ClockSelection) == RCC_I2C12CLKSOURCE_PLL4)
10002e62:	1d3b      	adds	r3, r7, #4
10002e64:	681b      	ldr	r3, [r3, #0]
10002e66:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
10002e6a:	2b01      	cmp	r3, #1
10002e6c:	d11a      	bne.n	10002ea4 <HAL_RCCEx_PeriphCLKConfig+0xbc>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10002e6e:	1d3b      	adds	r3, r7, #4
10002e70:	681b      	ldr	r3, [r3, #0]
10002e72:	3380      	adds	r3, #128	; 0x80
10002e74:	4618      	mov	r0, r3
10002e76:	f7ff fe5f 	bl	10002b38 <RCCEx_PLL4_Config>
10002e7a:	4603      	mov	r3, r0
10002e7c:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
      if (status != HAL_OK)
10002e80:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10002e84:	2b00      	cmp	r3, #0
10002e86:	d003      	beq.n	10002e90 <HAL_RCCEx_PeriphCLKConfig+0xa8>
      {
        return status;
10002e88:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10002e8c:	f001 bc07 	b.w	1000469e <HAL_RCCEx_PeriphCLKConfig+0x18b6>
      }
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10002e90:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002e94:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10002e98:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002e9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10002ea0:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    __HAL_RCC_I2C12_CONFIG(PeriphClkInit->I2c12ClockSelection);
10002ea4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002ea8:	f8d3 38c0 	ldr.w	r3, [r3, #2240]	; 0x8c0
10002eac:	f023 0207 	bic.w	r2, r3, #7
10002eb0:	1d3b      	adds	r3, r7, #4
10002eb2:	681b      	ldr	r3, [r3, #0]
10002eb4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
10002eb8:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002ebc:	4313      	orrs	r3, r2
10002ebe:	f8c1 38c0 	str.w	r3, [r1, #2240]	; 0x8c0
  }

  /*------------------------------ I2C35 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) &  RCC_PERIPHCLK_I2C35) ==
10002ec2:	1d3b      	adds	r3, r7, #4
10002ec4:	681b      	ldr	r3, [r3, #0]
10002ec6:	e9d3 bc00 	ldrd	fp, ip, [r3]
10002eca:	f04f 0120 	mov.w	r1, #32
10002ece:	f04f 0200 	mov.w	r2, #0
10002ed2:	ea0b 0301 	and.w	r3, fp, r1
10002ed6:	ea0c 0402 	and.w	r4, ip, r2
10002eda:	4323      	orrs	r3, r4
10002edc:	d02f      	beq.n	10002f3e <HAL_RCCEx_PeriphCLKConfig+0x156>
      RCC_PERIPHCLK_I2C35)
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C35CLKSOURCE(PeriphClkInit->I2c35ClockSelection));

    if ((PeriphClkInit->I2c35ClockSelection) == RCC_I2C35CLKSOURCE_PLL4)
10002ede:	1d3b      	adds	r3, r7, #4
10002ee0:	681b      	ldr	r3, [r3, #0]
10002ee2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
10002ee6:	2b01      	cmp	r3, #1
10002ee8:	d11a      	bne.n	10002f20 <HAL_RCCEx_PeriphCLKConfig+0x138>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10002eea:	1d3b      	adds	r3, r7, #4
10002eec:	681b      	ldr	r3, [r3, #0]
10002eee:	3380      	adds	r3, #128	; 0x80
10002ef0:	4618      	mov	r0, r3
10002ef2:	f7ff fe21 	bl	10002b38 <RCCEx_PLL4_Config>
10002ef6:	4603      	mov	r3, r0
10002ef8:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
      if (status != HAL_OK)
10002efc:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10002f00:	2b00      	cmp	r3, #0
10002f02:	d003      	beq.n	10002f0c <HAL_RCCEx_PeriphCLKConfig+0x124>
      {
        return status;
10002f04:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10002f08:	f001 bbc9 	b.w	1000469e <HAL_RCCEx_PeriphCLKConfig+0x18b6>
      }
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10002f0c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002f10:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10002f14:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002f18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10002f1c:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    __HAL_RCC_I2C35_CONFIG(PeriphClkInit->I2c35ClockSelection);
10002f20:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002f24:	f8d3 38c4 	ldr.w	r3, [r3, #2244]	; 0x8c4
10002f28:	f023 0207 	bic.w	r2, r3, #7
10002f2c:	1d3b      	adds	r3, r7, #4
10002f2e:	681b      	ldr	r3, [r3, #0]
10002f30:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
10002f34:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002f38:	4313      	orrs	r3, r2
10002f3a:	f8c1 38c4 	str.w	r3, [r1, #2244]	; 0x8c4
  }

  /*------------------------------ I2C46 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C46) ==
10002f3e:	1d3b      	adds	r3, r7, #4
10002f40:	681b      	ldr	r3, [r3, #0]
10002f42:	e9d3 bc00 	ldrd	fp, ip, [r3]
10002f46:	f04f 0100 	mov.w	r1, #0
10002f4a:	f04f 0220 	mov.w	r2, #32
10002f4e:	ea0b 0301 	and.w	r3, fp, r1
10002f52:	ea0c 0402 	and.w	r4, ip, r2
10002f56:	4323      	orrs	r3, r4
10002f58:	d02f      	beq.n	10002fba <HAL_RCCEx_PeriphCLKConfig+0x1d2>
      RCC_PERIPHCLK_I2C46)
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C46CLKSOURCE(PeriphClkInit->I2c46ClockSelection));

    if ((PeriphClkInit->I2c46ClockSelection) == RCC_I2C46CLKSOURCE_PLL3)
10002f5a:	1d3b      	adds	r3, r7, #4
10002f5c:	681b      	ldr	r3, [r3, #0]
10002f5e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
10002f62:	2b01      	cmp	r3, #1
10002f64:	d11a      	bne.n	10002f9c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10002f66:	1d3b      	adds	r3, r7, #4
10002f68:	681b      	ldr	r3, [r3, #0]
10002f6a:	3344      	adds	r3, #68	; 0x44
10002f6c:	4618      	mov	r0, r3
10002f6e:	f7ff fc79 	bl	10002864 <RCCEx_PLL3_Config>
10002f72:	4603      	mov	r3, r0
10002f74:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
      if (status != HAL_OK)
10002f78:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10002f7c:	2b00      	cmp	r3, #0
10002f7e:	d003      	beq.n	10002f88 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        return status;
10002f80:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10002f84:	f001 bb8b 	b.w	1000469e <HAL_RCCEx_PeriphCLKConfig+0x18b6>
      }
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10002f88:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002f8c:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10002f90:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002f94:	f043 0320 	orr.w	r3, r3, #32
10002f98:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
    }

    __HAL_RCC_I2C46_CONFIG(PeriphClkInit->I2c46ClockSelection);
10002f9c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002fa0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
10002fa4:	f023 0207 	bic.w	r2, r3, #7
10002fa8:	1d3b      	adds	r3, r7, #4
10002faa:	681b      	ldr	r3, [r3, #0]
10002fac:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
10002fb0:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002fb4:	4313      	orrs	r3, r2
10002fb6:	f8c1 30c0 	str.w	r3, [r1, #192]	; 0xc0
  }

  /*---------------------------- SAI1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) ==
10002fba:	1d3b      	adds	r3, r7, #4
10002fbc:	681b      	ldr	r3, [r3, #0]
10002fbe:	e9d3 bc00 	ldrd	fp, ip, [r3]
10002fc2:	f04f 0180 	mov.w	r1, #128	; 0x80
10002fc6:	f04f 0200 	mov.w	r2, #0
10002fca:	ea0b 0301 	and.w	r3, fp, r1
10002fce:	ea0c 0402 	and.w	r4, ip, r2
10002fd2:	4323      	orrs	r3, r4
10002fd4:	d06d      	beq.n	100030b2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
      RCC_PERIPHCLK_SAI1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
10002fd6:	1d3b      	adds	r3, r7, #4
10002fd8:	681b      	ldr	r3, [r3, #0]
10002fda:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
10002fde:	2b01      	cmp	r3, #1
10002fe0:	d020      	beq.n	10003024 <HAL_RCCEx_PeriphCLKConfig+0x23c>
10002fe2:	2b01      	cmp	r3, #1
10002fe4:	d302      	bcc.n	10002fec <HAL_RCCEx_PeriphCLKConfig+0x204>
10002fe6:	2b04      	cmp	r3, #4
10002fe8:	d038      	beq.n	1000305c <HAL_RCCEx_PeriphCLKConfig+0x274>
10002fea:	e053      	b.n	10003094 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      case RCC_SAI1CLKSOURCE_PLL4:  /* PLL4 is used as clock source for SAI1*/

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10002fec:	1d3b      	adds	r3, r7, #4
10002fee:	681b      	ldr	r3, [r3, #0]
10002ff0:	3380      	adds	r3, #128	; 0x80
10002ff2:	4618      	mov	r0, r3
10002ff4:	f7ff fda0 	bl	10002b38 <RCCEx_PLL4_Config>
10002ff8:	4603      	mov	r3, r0
10002ffa:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
        if (status != HAL_OK)
10002ffe:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003002:	2b00      	cmp	r3, #0
10003004:	d003      	beq.n	1000300e <HAL_RCCEx_PeriphCLKConfig+0x226>
        {
          return status;
10003006:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
1000300a:	f001 bb48 	b.w	1000469e <HAL_RCCEx_PeriphCLKConfig+0x18b6>
        }
        /* Enable SAI Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
1000300e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003012:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10003016:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000301a:	f043 0320 	orr.w	r3, r3, #32
1000301e:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10003022:	e037      	b.n	10003094 <HAL_RCCEx_PeriphCLKConfig+0x2ac>

      case RCC_SAI1CLKSOURCE_PLL3_Q:  /* PLL3_Q is used as clock source for SAI1*/

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10003024:	1d3b      	adds	r3, r7, #4
10003026:	681b      	ldr	r3, [r3, #0]
10003028:	3344      	adds	r3, #68	; 0x44
1000302a:	4618      	mov	r0, r3
1000302c:	f7ff fc1a 	bl	10002864 <RCCEx_PLL3_Config>
10003030:	4603      	mov	r3, r0
10003032:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
        if (status != HAL_OK)
10003036:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
1000303a:	2b00      	cmp	r3, #0
1000303c:	d003      	beq.n	10003046 <HAL_RCCEx_PeriphCLKConfig+0x25e>
        {
          return status;
1000303e:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003042:	f001 bb2c 	b.w	1000469e <HAL_RCCEx_PeriphCLKConfig+0x18b6>
        }
        /* Enable SAI Clock output generated on PLL3 */

        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10003046:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000304a:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
1000304e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003052:	f043 0320 	orr.w	r3, r3, #32
10003056:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
1000305a:	e01b      	b.n	10003094 <HAL_RCCEx_PeriphCLKConfig+0x2ac>

      case RCC_SAI1CLKSOURCE_PLL3_R:  /* PLL3_R is used as clock source for SAI1*/

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
1000305c:	1d3b      	adds	r3, r7, #4
1000305e:	681b      	ldr	r3, [r3, #0]
10003060:	3344      	adds	r3, #68	; 0x44
10003062:	4618      	mov	r0, r3
10003064:	f7ff fbfe 	bl	10002864 <RCCEx_PLL3_Config>
10003068:	4603      	mov	r3, r0
1000306a:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
        if (status != HAL_OK)
1000306e:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003072:	2b00      	cmp	r3, #0
10003074:	d003      	beq.n	1000307e <HAL_RCCEx_PeriphCLKConfig+0x296>
        {
          return status;
10003076:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
1000307a:	f001 bb10 	b.w	1000469e <HAL_RCCEx_PeriphCLKConfig+0x18b6>
        }
        /* Enable SAI Clock output generated on PLL3 */

        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
1000307e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003082:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10003086:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000308a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1000308e:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10003092:	bf00      	nop
    }

    /* Set the source of SAI1 clock*/
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
10003094:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003098:	f8d3 38c8 	ldr.w	r3, [r3, #2248]	; 0x8c8
1000309c:	f023 0207 	bic.w	r2, r3, #7
100030a0:	1d3b      	adds	r3, r7, #4
100030a2:	681b      	ldr	r3, [r3, #0]
100030a4:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
100030a8:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100030ac:	4313      	orrs	r3, r2
100030ae:	f8c1 38c8 	str.w	r3, [r1, #2248]	; 0x8c8
  }

  /*---------------------------- SAI2 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) ==
100030b2:	1d3b      	adds	r3, r7, #4
100030b4:	681b      	ldr	r3, [r3, #0]
100030b6:	e9d3 bc00 	ldrd	fp, ip, [r3]
100030ba:	f44f 7180 	mov.w	r1, #256	; 0x100
100030be:	f04f 0200 	mov.w	r2, #0
100030c2:	ea0b 0301 	and.w	r3, fp, r1
100030c6:	ea0c 0402 	and.w	r4, ip, r2
100030ca:	4323      	orrs	r3, r4
100030cc:	d06d      	beq.n	100031aa <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      RCC_PERIPHCLK_SAI2)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
100030ce:	1d3b      	adds	r3, r7, #4
100030d0:	681b      	ldr	r3, [r3, #0]
100030d2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
100030d6:	2b01      	cmp	r3, #1
100030d8:	d020      	beq.n	1000311c <HAL_RCCEx_PeriphCLKConfig+0x334>
100030da:	2b01      	cmp	r3, #1
100030dc:	d302      	bcc.n	100030e4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
100030de:	2b05      	cmp	r3, #5
100030e0:	d038      	beq.n	10003154 <HAL_RCCEx_PeriphCLKConfig+0x36c>
100030e2:	e053      	b.n	1000318c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      case RCC_SAI2CLKSOURCE_PLL4:  /* PLL4 is used as clock source for SAI2*/

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100030e4:	1d3b      	adds	r3, r7, #4
100030e6:	681b      	ldr	r3, [r3, #0]
100030e8:	3380      	adds	r3, #128	; 0x80
100030ea:	4618      	mov	r0, r3
100030ec:	f7ff fd24 	bl	10002b38 <RCCEx_PLL4_Config>
100030f0:	4603      	mov	r3, r0
100030f2:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
        if (status != HAL_OK)
100030f6:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
100030fa:	2b00      	cmp	r3, #0
100030fc:	d003      	beq.n	10003106 <HAL_RCCEx_PeriphCLKConfig+0x31e>
        {
          return status;
100030fe:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003102:	f001 bacc 	b.w	1000469e <HAL_RCCEx_PeriphCLKConfig+0x18b6>
        }
        /* Enable SAI Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10003106:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000310a:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
1000310e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003112:	f043 0320 	orr.w	r3, r3, #32
10003116:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
1000311a:	e037      	b.n	1000318c <HAL_RCCEx_PeriphCLKConfig+0x3a4>

      case RCC_SAI2CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SAI2 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
1000311c:	1d3b      	adds	r3, r7, #4
1000311e:	681b      	ldr	r3, [r3, #0]
10003120:	3344      	adds	r3, #68	; 0x44
10003122:	4618      	mov	r0, r3
10003124:	f7ff fb9e 	bl	10002864 <RCCEx_PLL3_Config>
10003128:	4603      	mov	r3, r0
1000312a:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
        if (status != HAL_OK)
1000312e:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003132:	2b00      	cmp	r3, #0
10003134:	d003      	beq.n	1000313e <HAL_RCCEx_PeriphCLKConfig+0x356>
        {
          return status;
10003136:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
1000313a:	f001 bab0 	b.w	1000469e <HAL_RCCEx_PeriphCLKConfig+0x18b6>
        }
        /* Enable SAI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
1000313e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003142:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10003146:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000314a:	f043 0320 	orr.w	r3, r3, #32
1000314e:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10003152:	e01b      	b.n	1000318c <HAL_RCCEx_PeriphCLKConfig+0x3a4>

      case RCC_SAI2CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SAI2 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10003154:	1d3b      	adds	r3, r7, #4
10003156:	681b      	ldr	r3, [r3, #0]
10003158:	3344      	adds	r3, #68	; 0x44
1000315a:	4618      	mov	r0, r3
1000315c:	f7ff fb82 	bl	10002864 <RCCEx_PLL3_Config>
10003160:	4603      	mov	r3, r0
10003162:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
        if (status != HAL_OK)
10003166:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
1000316a:	2b00      	cmp	r3, #0
1000316c:	d003      	beq.n	10003176 <HAL_RCCEx_PeriphCLKConfig+0x38e>
        {
          return status;
1000316e:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003172:	f001 ba94 	b.w	1000469e <HAL_RCCEx_PeriphCLKConfig+0x18b6>
        }
        /* Enable SAI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10003176:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000317a:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
1000317e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003182:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10003186:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
1000318a:	bf00      	nop
    }

    /* Set the source of SAI2 clock*/
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
1000318c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003190:	f8d3 38cc 	ldr.w	r3, [r3, #2252]	; 0x8cc
10003194:	f023 0207 	bic.w	r2, r3, #7
10003198:	1d3b      	adds	r3, r7, #4
1000319a:	681b      	ldr	r3, [r3, #0]
1000319c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
100031a0:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100031a4:	4313      	orrs	r3, r2
100031a6:	f8c1 38cc 	str.w	r3, [r1, #2252]	; 0x8cc
  }

  /*---------------------------- SAI3 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI3) ==
100031aa:	1d3b      	adds	r3, r7, #4
100031ac:	681b      	ldr	r3, [r3, #0]
100031ae:	e9d3 bc00 	ldrd	fp, ip, [r3]
100031b2:	f44f 2180 	mov.w	r1, #262144	; 0x40000
100031b6:	f04f 0200 	mov.w	r2, #0
100031ba:	ea0b 0301 	and.w	r3, fp, r1
100031be:	ea0c 0402 	and.w	r4, ip, r2
100031c2:	4323      	orrs	r3, r4
100031c4:	d06d      	beq.n	100032a2 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
      RCC_PERIPHCLK_SAI3)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI3CLKSOURCE(PeriphClkInit->Sai3ClockSelection));

    switch (PeriphClkInit->Sai3ClockSelection)
100031c6:	1d3b      	adds	r3, r7, #4
100031c8:	681b      	ldr	r3, [r3, #0]
100031ca:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
100031ce:	2b01      	cmp	r3, #1
100031d0:	d020      	beq.n	10003214 <HAL_RCCEx_PeriphCLKConfig+0x42c>
100031d2:	2b01      	cmp	r3, #1
100031d4:	d302      	bcc.n	100031dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
100031d6:	2b04      	cmp	r3, #4
100031d8:	d038      	beq.n	1000324c <HAL_RCCEx_PeriphCLKConfig+0x464>
100031da:	e053      	b.n	10003284 <HAL_RCCEx_PeriphCLKConfig+0x49c>
    {
      case RCC_SAI3CLKSOURCE_PLL4: /* PLL4 is used as clock source for SAI3*/

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100031dc:	1d3b      	adds	r3, r7, #4
100031de:	681b      	ldr	r3, [r3, #0]
100031e0:	3380      	adds	r3, #128	; 0x80
100031e2:	4618      	mov	r0, r3
100031e4:	f7ff fca8 	bl	10002b38 <RCCEx_PLL4_Config>
100031e8:	4603      	mov	r3, r0
100031ea:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
        if (status != HAL_OK)
100031ee:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
100031f2:	2b00      	cmp	r3, #0
100031f4:	d003      	beq.n	100031fe <HAL_RCCEx_PeriphCLKConfig+0x416>
        {
          return status;
100031f6:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
100031fa:	f001 ba50 	b.w	1000469e <HAL_RCCEx_PeriphCLKConfig+0x18b6>
        }
        /* Enable SAI Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
100031fe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003202:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10003206:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000320a:	f043 0320 	orr.w	r3, r3, #32
1000320e:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10003212:	e037      	b.n	10003284 <HAL_RCCEx_PeriphCLKConfig+0x49c>

      case RCC_SAI3CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SAI3 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10003214:	1d3b      	adds	r3, r7, #4
10003216:	681b      	ldr	r3, [r3, #0]
10003218:	3344      	adds	r3, #68	; 0x44
1000321a:	4618      	mov	r0, r3
1000321c:	f7ff fb22 	bl	10002864 <RCCEx_PLL3_Config>
10003220:	4603      	mov	r3, r0
10003222:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
        if (status != HAL_OK)
10003226:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
1000322a:	2b00      	cmp	r3, #0
1000322c:	d003      	beq.n	10003236 <HAL_RCCEx_PeriphCLKConfig+0x44e>
        {
          return status;
1000322e:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003232:	f001 ba34 	b.w	1000469e <HAL_RCCEx_PeriphCLKConfig+0x18b6>
        }
        /* Enable SAI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10003236:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000323a:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
1000323e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003242:	f043 0320 	orr.w	r3, r3, #32
10003246:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
1000324a:	e01b      	b.n	10003284 <HAL_RCCEx_PeriphCLKConfig+0x49c>

      case RCC_SAI3CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SAI3 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
1000324c:	1d3b      	adds	r3, r7, #4
1000324e:	681b      	ldr	r3, [r3, #0]
10003250:	3344      	adds	r3, #68	; 0x44
10003252:	4618      	mov	r0, r3
10003254:	f7ff fb06 	bl	10002864 <RCCEx_PLL3_Config>
10003258:	4603      	mov	r3, r0
1000325a:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
        if (status != HAL_OK)
1000325e:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003262:	2b00      	cmp	r3, #0
10003264:	d003      	beq.n	1000326e <HAL_RCCEx_PeriphCLKConfig+0x486>
        {
          return status;
10003266:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
1000326a:	f001 ba18 	b.w	1000469e <HAL_RCCEx_PeriphCLKConfig+0x18b6>
        }
        /* Enable SAI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
1000326e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003272:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10003276:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000327a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1000327e:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10003282:	bf00      	nop
    }

    /* Set the source of SAI3 clock*/
    __HAL_RCC_SAI3_CONFIG(PeriphClkInit->Sai3ClockSelection);
10003284:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003288:	f8d3 38d0 	ldr.w	r3, [r3, #2256]	; 0x8d0
1000328c:	f023 0207 	bic.w	r2, r3, #7
10003290:	1d3b      	adds	r3, r7, #4
10003292:	681b      	ldr	r3, [r3, #0]
10003294:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
10003298:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000329c:	4313      	orrs	r3, r2
1000329e:	f8c1 38d0 	str.w	r3, [r1, #2256]	; 0x8d0
  }

  /*---------------------------- SAI4 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4) ==
100032a2:	1d3b      	adds	r3, r7, #4
100032a4:	681b      	ldr	r3, [r3, #0]
100032a6:	e9d3 bc00 	ldrd	fp, ip, [r3]
100032aa:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
100032ae:	f04f 0200 	mov.w	r2, #0
100032b2:	ea0b 0301 	and.w	r3, fp, r1
100032b6:	ea0c 0402 	and.w	r4, ip, r2
100032ba:	4323      	orrs	r3, r4
100032bc:	d06d      	beq.n	1000339a <HAL_RCCEx_PeriphCLKConfig+0x5b2>
      RCC_PERIPHCLK_SAI4)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI4CLKSOURCE(PeriphClkInit->Sai4ClockSelection));

    switch (PeriphClkInit->Sai4ClockSelection)
100032be:	1d3b      	adds	r3, r7, #4
100032c0:	681b      	ldr	r3, [r3, #0]
100032c2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
100032c6:	2b01      	cmp	r3, #1
100032c8:	d020      	beq.n	1000330c <HAL_RCCEx_PeriphCLKConfig+0x524>
100032ca:	2b01      	cmp	r3, #1
100032cc:	d302      	bcc.n	100032d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
100032ce:	2b04      	cmp	r3, #4
100032d0:	d038      	beq.n	10003344 <HAL_RCCEx_PeriphCLKConfig+0x55c>
100032d2:	e053      	b.n	1000337c <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
      case RCC_SAI4CLKSOURCE_PLL4: /* PLL4 is used as clock source for SAI4 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100032d4:	1d3b      	adds	r3, r7, #4
100032d6:	681b      	ldr	r3, [r3, #0]
100032d8:	3380      	adds	r3, #128	; 0x80
100032da:	4618      	mov	r0, r3
100032dc:	f7ff fc2c 	bl	10002b38 <RCCEx_PLL4_Config>
100032e0:	4603      	mov	r3, r0
100032e2:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
        if (status != HAL_OK)
100032e6:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
100032ea:	2b00      	cmp	r3, #0
100032ec:	d003      	beq.n	100032f6 <HAL_RCCEx_PeriphCLKConfig+0x50e>
        {
          return status;
100032ee:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
100032f2:	f001 b9d4 	b.w	1000469e <HAL_RCCEx_PeriphCLKConfig+0x18b6>
        }
        /* Enable SAI Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
100032f6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100032fa:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100032fe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003302:	f043 0320 	orr.w	r3, r3, #32
10003306:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
1000330a:	e037      	b.n	1000337c <HAL_RCCEx_PeriphCLKConfig+0x594>


      case RCC_SAI4CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SAI4 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
1000330c:	1d3b      	adds	r3, r7, #4
1000330e:	681b      	ldr	r3, [r3, #0]
10003310:	3344      	adds	r3, #68	; 0x44
10003312:	4618      	mov	r0, r3
10003314:	f7ff faa6 	bl	10002864 <RCCEx_PLL3_Config>
10003318:	4603      	mov	r3, r0
1000331a:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
        if (status != HAL_OK)
1000331e:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003322:	2b00      	cmp	r3, #0
10003324:	d003      	beq.n	1000332e <HAL_RCCEx_PeriphCLKConfig+0x546>
        {
          return status;
10003326:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
1000332a:	f001 b9b8 	b.w	1000469e <HAL_RCCEx_PeriphCLKConfig+0x18b6>
        }
        /* Enable SAI Clock output generated on PLL3_Q */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
1000332e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003332:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10003336:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000333a:	f043 0320 	orr.w	r3, r3, #32
1000333e:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10003342:	e01b      	b.n	1000337c <HAL_RCCEx_PeriphCLKConfig+0x594>

      case RCC_SAI4CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SAI4 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10003344:	1d3b      	adds	r3, r7, #4
10003346:	681b      	ldr	r3, [r3, #0]
10003348:	3344      	adds	r3, #68	; 0x44
1000334a:	4618      	mov	r0, r3
1000334c:	f7ff fa8a 	bl	10002864 <RCCEx_PLL3_Config>
10003350:	4603      	mov	r3, r0
10003352:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
        if (status != HAL_OK)
10003356:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
1000335a:	2b00      	cmp	r3, #0
1000335c:	d003      	beq.n	10003366 <HAL_RCCEx_PeriphCLKConfig+0x57e>
        {
          return status;
1000335e:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003362:	f001 b99c 	b.w	1000469e <HAL_RCCEx_PeriphCLKConfig+0x18b6>
        }
        /* Enable SAI Clock output generated on PLL3_R */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10003366:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000336a:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
1000336e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003372:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10003376:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
1000337a:	bf00      	nop
    }

    /* Set the source of SAI4 clock*/
    __HAL_RCC_SAI4_CONFIG(PeriphClkInit->Sai4ClockSelection);
1000337c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003380:	f8d3 38d4 	ldr.w	r3, [r3, #2260]	; 0x8d4
10003384:	f023 0207 	bic.w	r2, r3, #7
10003388:	1d3b      	adds	r3, r7, #4
1000338a:	681b      	ldr	r3, [r3, #0]
1000338c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
10003390:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10003394:	4313      	orrs	r3, r2
10003396:	f8c1 38d4 	str.w	r3, [r1, #2260]	; 0x8d4
  }

  /*---------------------------- SPI1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) ==
1000339a:	1d3b      	adds	r3, r7, #4
1000339c:	681b      	ldr	r3, [r3, #0]
1000339e:	e9d3 bc00 	ldrd	fp, ip, [r3]
100033a2:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
100033a6:	f04f 0200 	mov.w	r2, #0
100033aa:	ea0b 0301 	and.w	r3, fp, r1
100033ae:	ea0c 0402 	and.w	r4, ip, r2
100033b2:	4323      	orrs	r3, r4
100033b4:	d06d      	beq.n	10003492 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
      RCC_PERIPHCLK_SPI1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(PeriphClkInit->Spi1ClockSelection));

    switch (PeriphClkInit->Spi1ClockSelection)
100033b6:	1d3b      	adds	r3, r7, #4
100033b8:	681b      	ldr	r3, [r3, #0]
100033ba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
100033be:	2b01      	cmp	r3, #1
100033c0:	d020      	beq.n	10003404 <HAL_RCCEx_PeriphCLKConfig+0x61c>
100033c2:	2b01      	cmp	r3, #1
100033c4:	d302      	bcc.n	100033cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>
100033c6:	2b04      	cmp	r3, #4
100033c8:	d038      	beq.n	1000343c <HAL_RCCEx_PeriphCLKConfig+0x654>
100033ca:	e053      	b.n	10003474 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      case RCC_SPI1CLKSOURCE_PLL4: /* PLL4 is used as clock source for SPI1 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100033cc:	1d3b      	adds	r3, r7, #4
100033ce:	681b      	ldr	r3, [r3, #0]
100033d0:	3380      	adds	r3, #128	; 0x80
100033d2:	4618      	mov	r0, r3
100033d4:	f7ff fbb0 	bl	10002b38 <RCCEx_PLL4_Config>
100033d8:	4603      	mov	r3, r0
100033da:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
        if (status != HAL_OK)
100033de:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
100033e2:	2b00      	cmp	r3, #0
100033e4:	d003      	beq.n	100033ee <HAL_RCCEx_PeriphCLKConfig+0x606>
        {
          return status;
100033e6:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
100033ea:	f001 b958 	b.w	1000469e <HAL_RCCEx_PeriphCLKConfig+0x18b6>
        }
        /* Enable SPI Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
100033ee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100033f2:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100033f6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100033fa:	f043 0310 	orr.w	r3, r3, #16
100033fe:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10003402:	e037      	b.n	10003474 <HAL_RCCEx_PeriphCLKConfig+0x68c>

      case RCC_SPI1CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SPI1*/

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10003404:	1d3b      	adds	r3, r7, #4
10003406:	681b      	ldr	r3, [r3, #0]
10003408:	3344      	adds	r3, #68	; 0x44
1000340a:	4618      	mov	r0, r3
1000340c:	f7ff fa2a 	bl	10002864 <RCCEx_PLL3_Config>
10003410:	4603      	mov	r3, r0
10003412:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
        if (status != HAL_OK)
10003416:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
1000341a:	2b00      	cmp	r3, #0
1000341c:	d003      	beq.n	10003426 <HAL_RCCEx_PeriphCLKConfig+0x63e>
        {
          return status;
1000341e:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003422:	f001 b93c 	b.w	1000469e <HAL_RCCEx_PeriphCLKConfig+0x18b6>
        }
        /* Enable SPI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10003426:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000342a:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
1000342e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003432:	f043 0320 	orr.w	r3, r3, #32
10003436:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
1000343a:	e01b      	b.n	10003474 <HAL_RCCEx_PeriphCLKConfig+0x68c>

      case RCC_SPI1CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SPI1 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
1000343c:	1d3b      	adds	r3, r7, #4
1000343e:	681b      	ldr	r3, [r3, #0]
10003440:	3344      	adds	r3, #68	; 0x44
10003442:	4618      	mov	r0, r3
10003444:	f7ff fa0e 	bl	10002864 <RCCEx_PLL3_Config>
10003448:	4603      	mov	r3, r0
1000344a:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
        if (status != HAL_OK)
1000344e:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003452:	2b00      	cmp	r3, #0
10003454:	d003      	beq.n	1000345e <HAL_RCCEx_PeriphCLKConfig+0x676>
        {
          return status;
10003456:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
1000345a:	f001 b920 	b.w	1000469e <HAL_RCCEx_PeriphCLKConfig+0x18b6>
        }
        /* Enable SPI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
1000345e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003462:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10003466:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000346a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1000346e:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10003472:	bf00      	nop

    }

    /* Set the source of SPI1 clock*/
    __HAL_RCC_SPI1_CONFIG(PeriphClkInit->Spi1ClockSelection);
10003474:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003478:	f8d3 38d8 	ldr.w	r3, [r3, #2264]	; 0x8d8
1000347c:	f023 0207 	bic.w	r2, r3, #7
10003480:	1d3b      	adds	r3, r7, #4
10003482:	681b      	ldr	r3, [r3, #0]
10003484:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
10003488:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000348c:	4313      	orrs	r3, r2
1000348e:	f8c1 38d8 	str.w	r3, [r1, #2264]	; 0x8d8
  }

  /*---------------------------- SPI23 configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI23) ==
10003492:	1d3b      	adds	r3, r7, #4
10003494:	681b      	ldr	r3, [r3, #0]
10003496:	e9d3 bc00 	ldrd	fp, ip, [r3]
1000349a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
1000349e:	f04f 0200 	mov.w	r2, #0
100034a2:	ea0b 0301 	and.w	r3, fp, r1
100034a6:	ea0c 0402 	and.w	r4, ip, r2
100034aa:	4323      	orrs	r3, r4
100034ac:	d06d      	beq.n	1000358a <HAL_RCCEx_PeriphCLKConfig+0x7a2>
      RCC_PERIPHCLK_SPI23)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI23CLKSOURCE(PeriphClkInit->Spi23ClockSelection));

    switch (PeriphClkInit->Spi23ClockSelection)
100034ae:	1d3b      	adds	r3, r7, #4
100034b0:	681b      	ldr	r3, [r3, #0]
100034b2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
100034b6:	2b01      	cmp	r3, #1
100034b8:	d020      	beq.n	100034fc <HAL_RCCEx_PeriphCLKConfig+0x714>
100034ba:	2b01      	cmp	r3, #1
100034bc:	d302      	bcc.n	100034c4 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
100034be:	2b04      	cmp	r3, #4
100034c0:	d038      	beq.n	10003534 <HAL_RCCEx_PeriphCLKConfig+0x74c>
100034c2:	e053      	b.n	1000356c <HAL_RCCEx_PeriphCLKConfig+0x784>
    {
      case RCC_SPI23CLKSOURCE_PLL4: /* PLL4 is used as clock source for SPI23 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100034c4:	1d3b      	adds	r3, r7, #4
100034c6:	681b      	ldr	r3, [r3, #0]
100034c8:	3380      	adds	r3, #128	; 0x80
100034ca:	4618      	mov	r0, r3
100034cc:	f7ff fb34 	bl	10002b38 <RCCEx_PLL4_Config>
100034d0:	4603      	mov	r3, r0
100034d2:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
        if (status != HAL_OK)
100034d6:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
100034da:	2b00      	cmp	r3, #0
100034dc:	d003      	beq.n	100034e6 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
        {
          return status;
100034de:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
100034e2:	f001 b8dc 	b.w	1000469e <HAL_RCCEx_PeriphCLKConfig+0x18b6>
        }
        /* Enable SPI Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
100034e6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100034ea:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100034ee:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100034f2:	f043 0310 	orr.w	r3, r3, #16
100034f6:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
100034fa:	e037      	b.n	1000356c <HAL_RCCEx_PeriphCLKConfig+0x784>

      case RCC_SPI23CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SPI23 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100034fc:	1d3b      	adds	r3, r7, #4
100034fe:	681b      	ldr	r3, [r3, #0]
10003500:	3344      	adds	r3, #68	; 0x44
10003502:	4618      	mov	r0, r3
10003504:	f7ff f9ae 	bl	10002864 <RCCEx_PLL3_Config>
10003508:	4603      	mov	r3, r0
1000350a:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
        if (status != HAL_OK)
1000350e:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003512:	2b00      	cmp	r3, #0
10003514:	d003      	beq.n	1000351e <HAL_RCCEx_PeriphCLKConfig+0x736>
        {
          return status;
10003516:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
1000351a:	f001 b8c0 	b.w	1000469e <HAL_RCCEx_PeriphCLKConfig+0x18b6>
        }
        /* Enable SPI Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
1000351e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003522:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10003526:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000352a:	f043 0320 	orr.w	r3, r3, #32
1000352e:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10003532:	e01b      	b.n	1000356c <HAL_RCCEx_PeriphCLKConfig+0x784>

      case RCC_SPI23CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SPI23 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10003534:	1d3b      	adds	r3, r7, #4
10003536:	681b      	ldr	r3, [r3, #0]
10003538:	3344      	adds	r3, #68	; 0x44
1000353a:	4618      	mov	r0, r3
1000353c:	f7ff f992 	bl	10002864 <RCCEx_PLL3_Config>
10003540:	4603      	mov	r3, r0
10003542:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
        if (status != HAL_OK)
10003546:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
1000354a:	2b00      	cmp	r3, #0
1000354c:	d003      	beq.n	10003556 <HAL_RCCEx_PeriphCLKConfig+0x76e>
        {
          return status;
1000354e:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003552:	f001 b8a4 	b.w	1000469e <HAL_RCCEx_PeriphCLKConfig+0x18b6>
        }
        /* Enable SPI Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10003556:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000355a:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
1000355e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003562:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10003566:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
1000356a:	bf00      	nop
    }

    /* Set the source of SPI2 clock*/
    __HAL_RCC_SPI23_CONFIG(PeriphClkInit->Spi23ClockSelection);
1000356c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003570:	f8d3 38dc 	ldr.w	r3, [r3, #2268]	; 0x8dc
10003574:	f023 0207 	bic.w	r2, r3, #7
10003578:	1d3b      	adds	r3, r7, #4
1000357a:	681b      	ldr	r3, [r3, #0]
1000357c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
10003580:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10003584:	4313      	orrs	r3, r2
10003586:	f8c1 38dc 	str.w	r3, [r1, #2268]	; 0x8dc
  }

  /*---------------------------- SPI45 configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) ==
1000358a:	1d3b      	adds	r3, r7, #4
1000358c:	681b      	ldr	r3, [r3, #0]
1000358e:	e9d3 bc00 	ldrd	fp, ip, [r3]
10003592:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
10003596:	f04f 0200 	mov.w	r2, #0
1000359a:	ea0b 0301 	and.w	r3, fp, r1
1000359e:	ea0c 0402 	and.w	r4, ip, r2
100035a2:	4323      	orrs	r3, r4
100035a4:	d02f      	beq.n	10003606 <HAL_RCCEx_PeriphCLKConfig+0x81e>
      RCC_PERIPHCLK_SPI45)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI45CLKSOURCE(PeriphClkInit->Spi45ClockSelection));

    if (PeriphClkInit->Spi45ClockSelection == RCC_SPI45CLKSOURCE_PLL4)
100035a6:	1d3b      	adds	r3, r7, #4
100035a8:	681b      	ldr	r3, [r3, #0]
100035aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
100035ae:	2b01      	cmp	r3, #1
100035b0:	d11a      	bne.n	100035e8 <HAL_RCCEx_PeriphCLKConfig+0x800>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100035b2:	1d3b      	adds	r3, r7, #4
100035b4:	681b      	ldr	r3, [r3, #0]
100035b6:	3380      	adds	r3, #128	; 0x80
100035b8:	4618      	mov	r0, r3
100035ba:	f7ff fabd 	bl	10002b38 <RCCEx_PLL4_Config>
100035be:	4603      	mov	r3, r0
100035c0:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
      if (status != HAL_OK)
100035c4:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
100035c8:	2b00      	cmp	r3, #0
100035ca:	d003      	beq.n	100035d4 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      {
        return status;
100035cc:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
100035d0:	f001 b865 	b.w	1000469e <HAL_RCCEx_PeriphCLKConfig+0x18b6>
      }
      /* Enable SPI Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
100035d4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100035d8:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100035dc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100035e0:	f043 0320 	orr.w	r3, r3, #32
100035e4:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    /* Set the source of SPI45 clock*/
    __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
100035e8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100035ec:	f8d3 38e0 	ldr.w	r3, [r3, #2272]	; 0x8e0
100035f0:	f023 0207 	bic.w	r2, r3, #7
100035f4:	1d3b      	adds	r3, r7, #4
100035f6:	681b      	ldr	r3, [r3, #0]
100035f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
100035fc:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10003600:	4313      	orrs	r3, r2
10003602:	f8c1 38e0 	str.w	r3, [r1, #2272]	; 0x8e0
  }

  /*---------------------------- SPI6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) ==
10003606:	1d3b      	adds	r3, r7, #4
10003608:	681b      	ldr	r3, [r3, #0]
1000360a:	e9d3 bc00 	ldrd	fp, ip, [r3]
1000360e:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
10003612:	f04f 0200 	mov.w	r2, #0
10003616:	ea0b 0301 	and.w	r3, fp, r1
1000361a:	ea0c 0402 	and.w	r4, ip, r2
1000361e:	4323      	orrs	r3, r4
10003620:	d04f      	beq.n	100036c2 <HAL_RCCEx_PeriphCLKConfig+0x8da>
      RCC_PERIPHCLK_SPI6)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(PeriphClkInit->Spi6ClockSelection));

    switch (PeriphClkInit->Spi6ClockSelection)
10003622:	1d3b      	adds	r3, r7, #4
10003624:	681b      	ldr	r3, [r3, #0]
10003626:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
1000362a:	2b01      	cmp	r3, #1
1000362c:	d002      	beq.n	10003634 <HAL_RCCEx_PeriphCLKConfig+0x84c>
1000362e:	2b05      	cmp	r3, #5
10003630:	d01c      	beq.n	1000366c <HAL_RCCEx_PeriphCLKConfig+0x884>
10003632:	e037      	b.n	100036a4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
    {
      case RCC_SPI6CLKSOURCE_PLL4: /* PLL4 is used as clock source for SPI6 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003634:	1d3b      	adds	r3, r7, #4
10003636:	681b      	ldr	r3, [r3, #0]
10003638:	3380      	adds	r3, #128	; 0x80
1000363a:	4618      	mov	r0, r3
1000363c:	f7ff fa7c 	bl	10002b38 <RCCEx_PLL4_Config>
10003640:	4603      	mov	r3, r0
10003642:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
        if (status != HAL_OK)
10003646:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
1000364a:	2b00      	cmp	r3, #0
1000364c:	d003      	beq.n	10003656 <HAL_RCCEx_PeriphCLKConfig+0x86e>
        {
          return status;
1000364e:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003652:	f001 b824 	b.w	1000469e <HAL_RCCEx_PeriphCLKConfig+0x18b6>
        }
        /* Enable SPI Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10003656:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000365a:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
1000365e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003662:	f043 0320 	orr.w	r3, r3, #32
10003666:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
1000366a:	e01b      	b.n	100036a4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>

      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is used as clock source for SPI6 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
1000366c:	1d3b      	adds	r3, r7, #4
1000366e:	681b      	ldr	r3, [r3, #0]
10003670:	3344      	adds	r3, #68	; 0x44
10003672:	4618      	mov	r0, r3
10003674:	f7ff f8f6 	bl	10002864 <RCCEx_PLL3_Config>
10003678:	4603      	mov	r3, r0
1000367a:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
        if (status != HAL_OK)
1000367e:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003682:	2b00      	cmp	r3, #0
10003684:	d003      	beq.n	1000368e <HAL_RCCEx_PeriphCLKConfig+0x8a6>
        {
          return status;
10003686:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
1000368a:	f001 b808 	b.w	1000469e <HAL_RCCEx_PeriphCLKConfig+0x18b6>
        }
        /* Enable SPI Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
1000368e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003692:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10003696:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000369a:	f043 0320 	orr.w	r3, r3, #32
1000369e:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
100036a2:	bf00      	nop
    }

    /* Set the source of SPI6 clock*/
    __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
100036a4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100036a8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
100036ac:	f023 0207 	bic.w	r2, r3, #7
100036b0:	1d3b      	adds	r3, r7, #4
100036b2:	681b      	ldr	r3, [r3, #0]
100036b4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
100036b8:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100036bc:	4313      	orrs	r3, r2
100036be:	f8c1 30c4 	str.w	r3, [r1, #196]	; 0xc4
  }

  /*---------------------------- USART6 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) ==
100036c2:	1d3b      	adds	r3, r7, #4
100036c4:	681b      	ldr	r3, [r3, #0]
100036c6:	e9d3 bc00 	ldrd	fp, ip, [r3]
100036ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
100036ce:	f04f 0200 	mov.w	r2, #0
100036d2:	ea0b 0301 	and.w	r3, fp, r1
100036d6:	ea0c 0402 	and.w	r4, ip, r2
100036da:	4323      	orrs	r3, r4
100036dc:	d02f      	beq.n	1000373e <HAL_RCCEx_PeriphCLKConfig+0x956>
      RCC_PERIPHCLK_USART6)
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_PLL4)
100036de:	1d3b      	adds	r3, r7, #4
100036e0:	681b      	ldr	r3, [r3, #0]
100036e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
100036e6:	2b01      	cmp	r3, #1
100036e8:	d11a      	bne.n	10003720 <HAL_RCCEx_PeriphCLKConfig+0x938>
    {
      /* PLL4 is used as clock source for USART6 */
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100036ea:	1d3b      	adds	r3, r7, #4
100036ec:	681b      	ldr	r3, [r3, #0]
100036ee:	3380      	adds	r3, #128	; 0x80
100036f0:	4618      	mov	r0, r3
100036f2:	f7ff fa21 	bl	10002b38 <RCCEx_PLL4_Config>
100036f6:	4603      	mov	r3, r0
100036f8:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
      if (status != HAL_OK)
100036fc:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003700:	2b00      	cmp	r3, #0
10003702:	d003      	beq.n	1000370c <HAL_RCCEx_PeriphCLKConfig+0x924>
      {
        return status;
10003704:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003708:	f000 bfc9 	b.w	1000469e <HAL_RCCEx_PeriphCLKConfig+0x18b6>
      }
      /* Enable USART Clock output generated on PLL4 */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
1000370c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003710:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10003714:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003718:	f043 0320 	orr.w	r3, r3, #32
1000371c:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    /* Set the source of USART6 clock*/
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
10003720:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003724:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	; 0x8e4
10003728:	f023 0207 	bic.w	r2, r3, #7
1000372c:	1d3b      	adds	r3, r7, #4
1000372e:	681b      	ldr	r3, [r3, #0]
10003730:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
10003734:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10003738:	4313      	orrs	r3, r2
1000373a:	f8c1 38e4 	str.w	r3, [r1, #2276]	; 0x8e4
  }

  /*---------------------------- UART24 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART24) ==
1000373e:	1d3b      	adds	r3, r7, #4
10003740:	681b      	ldr	r3, [r3, #0]
10003742:	e9d3 bc00 	ldrd	fp, ip, [r3]
10003746:	f04f 0102 	mov.w	r1, #2
1000374a:	f04f 0200 	mov.w	r2, #0
1000374e:	ea0b 0301 	and.w	r3, fp, r1
10003752:	ea0c 0402 	and.w	r4, ip, r2
10003756:	4323      	orrs	r3, r4
10003758:	d02f      	beq.n	100037ba <HAL_RCCEx_PeriphCLKConfig+0x9d2>
      RCC_PERIPHCLK_UART24)
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART24CLKSOURCE(PeriphClkInit->Uart24ClockSelection));

    if (PeriphClkInit->Uart24ClockSelection == RCC_UART24CLKSOURCE_PLL4)
1000375a:	1d3b      	adds	r3, r7, #4
1000375c:	681b      	ldr	r3, [r3, #0]
1000375e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
10003762:	2b01      	cmp	r3, #1
10003764:	d11a      	bne.n	1000379c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* PLL4 is used as clock source for UART24 */
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003766:	1d3b      	adds	r3, r7, #4
10003768:	681b      	ldr	r3, [r3, #0]
1000376a:	3380      	adds	r3, #128	; 0x80
1000376c:	4618      	mov	r0, r3
1000376e:	f7ff f9e3 	bl	10002b38 <RCCEx_PLL4_Config>
10003772:	4603      	mov	r3, r0
10003774:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
      if (status != HAL_OK)
10003778:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
1000377c:	2b00      	cmp	r3, #0
1000377e:	d003      	beq.n	10003788 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
      {
        return status;
10003780:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003784:	f000 bf8b 	b.w	1000469e <HAL_RCCEx_PeriphCLKConfig+0x18b6>
      }
      /* Enable UART Clock output generated on PLL4 */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10003788:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000378c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10003790:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003794:	f043 0320 	orr.w	r3, r3, #32
10003798:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    /* Set the source of UART24 clock*/
    __HAL_RCC_UART24_CONFIG(PeriphClkInit->Uart24ClockSelection);
1000379c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100037a0:	f8d3 38e8 	ldr.w	r3, [r3, #2280]	; 0x8e8
100037a4:	f023 0207 	bic.w	r2, r3, #7
100037a8:	1d3b      	adds	r3, r7, #4
100037aa:	681b      	ldr	r3, [r3, #0]
100037ac:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
100037b0:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100037b4:	4313      	orrs	r3, r2
100037b6:	f8c1 38e8 	str.w	r3, [r1, #2280]	; 0x8e8
  }

  /*---------------------------- UART35 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART35) ==
100037ba:	1d3b      	adds	r3, r7, #4
100037bc:	681b      	ldr	r3, [r3, #0]
100037be:	e9d3 bc00 	ldrd	fp, ip, [r3]
100037c2:	f04f 0104 	mov.w	r1, #4
100037c6:	f04f 0200 	mov.w	r2, #0
100037ca:	ea0b 0301 	and.w	r3, fp, r1
100037ce:	ea0c 0402 	and.w	r4, ip, r2
100037d2:	4323      	orrs	r3, r4
100037d4:	d02f      	beq.n	10003836 <HAL_RCCEx_PeriphCLKConfig+0xa4e>
      RCC_PERIPHCLK_UART35)
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART35CLKSOURCE(PeriphClkInit->Uart35ClockSelection));

    if (PeriphClkInit->Uart35ClockSelection == RCC_UART35CLKSOURCE_PLL4)
100037d6:	1d3b      	adds	r3, r7, #4
100037d8:	681b      	ldr	r3, [r3, #0]
100037da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
100037de:	2b01      	cmp	r3, #1
100037e0:	d11a      	bne.n	10003818 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* PLL4 is used as clock source for UART35 */
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100037e2:	1d3b      	adds	r3, r7, #4
100037e4:	681b      	ldr	r3, [r3, #0]
100037e6:	3380      	adds	r3, #128	; 0x80
100037e8:	4618      	mov	r0, r3
100037ea:	f7ff f9a5 	bl	10002b38 <RCCEx_PLL4_Config>
100037ee:	4603      	mov	r3, r0
100037f0:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
      if (status != HAL_OK)
100037f4:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
100037f8:	2b00      	cmp	r3, #0
100037fa:	d003      	beq.n	10003804 <HAL_RCCEx_PeriphCLKConfig+0xa1c>
      {
        return status;
100037fc:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003800:	f000 bf4d 	b.w	1000469e <HAL_RCCEx_PeriphCLKConfig+0x18b6>
      }
      /* Enable UART Clock output generated on PLL4 */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10003804:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003808:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
1000380c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003810:	f043 0320 	orr.w	r3, r3, #32
10003814:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    /* Set the source of UART35 clock*/
    __HAL_RCC_UART35_CONFIG(PeriphClkInit->Uart35ClockSelection);
10003818:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000381c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
10003820:	f023 0207 	bic.w	r2, r3, #7
10003824:	1d3b      	adds	r3, r7, #4
10003826:	681b      	ldr	r3, [r3, #0]
10003828:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
1000382c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10003830:	4313      	orrs	r3, r2
10003832:	f8c1 38ec 	str.w	r3, [r1, #2284]	; 0x8ec
  }

  /*---------------------------- UAUART78 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART78) ==
10003836:	1d3b      	adds	r3, r7, #4
10003838:	681b      	ldr	r3, [r3, #0]
1000383a:	e9d3 bc00 	ldrd	fp, ip, [r3]
1000383e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
10003842:	f04f 0200 	mov.w	r2, #0
10003846:	ea0b 0301 	and.w	r3, fp, r1
1000384a:	ea0c 0402 	and.w	r4, ip, r2
1000384e:	4323      	orrs	r3, r4
10003850:	d02f      	beq.n	100038b2 <HAL_RCCEx_PeriphCLKConfig+0xaca>
      RCC_PERIPHCLK_UART78)
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART78CLKSOURCE(PeriphClkInit->Uart78ClockSelection));

    if (PeriphClkInit->Uart78ClockSelection == RCC_UART78CLKSOURCE_PLL4)
10003852:	1d3b      	adds	r3, r7, #4
10003854:	681b      	ldr	r3, [r3, #0]
10003856:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
1000385a:	2b01      	cmp	r3, #1
1000385c:	d11a      	bne.n	10003894 <HAL_RCCEx_PeriphCLKConfig+0xaac>
    {
      /* PLL4 is used as clock source for UART78 */
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
1000385e:	1d3b      	adds	r3, r7, #4
10003860:	681b      	ldr	r3, [r3, #0]
10003862:	3380      	adds	r3, #128	; 0x80
10003864:	4618      	mov	r0, r3
10003866:	f7ff f967 	bl	10002b38 <RCCEx_PLL4_Config>
1000386a:	4603      	mov	r3, r0
1000386c:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
      if (status != HAL_OK)
10003870:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003874:	2b00      	cmp	r3, #0
10003876:	d003      	beq.n	10003880 <HAL_RCCEx_PeriphCLKConfig+0xa98>
      {
        return status;
10003878:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
1000387c:	f000 bf0f 	b.w	1000469e <HAL_RCCEx_PeriphCLKConfig+0x18b6>
      }
      /* Enable UART Clock output generated on PLL4 */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10003880:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003884:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10003888:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000388c:	f043 0320 	orr.w	r3, r3, #32
10003890:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    /* Set the source of UART78 clock*/
    __HAL_RCC_UART78_CONFIG(PeriphClkInit->Uart78ClockSelection);
10003894:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003898:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
1000389c:	f023 0207 	bic.w	r2, r3, #7
100038a0:	1d3b      	adds	r3, r7, #4
100038a2:	681b      	ldr	r3, [r3, #0]
100038a4:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
100038a8:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100038ac:	4313      	orrs	r3, r2
100038ae:	f8c1 38f0 	str.w	r3, [r1, #2288]	; 0x8f0
  }

  /*---------------------------- USART1 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) ==
100038b2:	1d3b      	adds	r3, r7, #4
100038b4:	681b      	ldr	r3, [r3, #0]
100038b6:	e9d3 bc00 	ldrd	fp, ip, [r3]
100038ba:	f04f 0101 	mov.w	r1, #1
100038be:	f04f 0200 	mov.w	r2, #0
100038c2:	ea0b 0301 	and.w	r3, fp, r1
100038c6:	ea0c 0402 	and.w	r4, ip, r2
100038ca:	4323      	orrs	r3, r4
100038cc:	d04f      	beq.n	1000396e <HAL_RCCEx_PeriphCLKConfig+0xb86>
      RCC_PERIPHCLK_USART1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    switch (PeriphClkInit->Usart1ClockSelection)
100038ce:	1d3b      	adds	r3, r7, #4
100038d0:	681b      	ldr	r3, [r3, #0]
100038d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
100038d6:	2b01      	cmp	r3, #1
100038d8:	d002      	beq.n	100038e0 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
100038da:	2b04      	cmp	r3, #4
100038dc:	d01c      	beq.n	10003918 <HAL_RCCEx_PeriphCLKConfig+0xb30>
100038de:	e037      	b.n	10003950 <HAL_RCCEx_PeriphCLKConfig+0xb68>
    {
      case RCC_USART1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for USART1 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100038e0:	1d3b      	adds	r3, r7, #4
100038e2:	681b      	ldr	r3, [r3, #0]
100038e4:	3344      	adds	r3, #68	; 0x44
100038e6:	4618      	mov	r0, r3
100038e8:	f7fe ffbc 	bl	10002864 <RCCEx_PLL3_Config>
100038ec:	4603      	mov	r3, r0
100038ee:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
        if (status != HAL_OK)
100038f2:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
100038f6:	2b00      	cmp	r3, #0
100038f8:	d003      	beq.n	10003902 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
        {
          return status;
100038fa:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
100038fe:	f000 bece 	b.w	1000469e <HAL_RCCEx_PeriphCLKConfig+0x18b6>
        }
        /* Enable UART Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10003902:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003906:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
1000390a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000390e:	f043 0320 	orr.w	r3, r3, #32
10003912:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10003916:	e01b      	b.n	10003950 <HAL_RCCEx_PeriphCLKConfig+0xb68>

      case RCC_USART1CLKSOURCE_PLL4: /* PLL4 is used as clock source for USART1 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003918:	1d3b      	adds	r3, r7, #4
1000391a:	681b      	ldr	r3, [r3, #0]
1000391c:	3380      	adds	r3, #128	; 0x80
1000391e:	4618      	mov	r0, r3
10003920:	f7ff f90a 	bl	10002b38 <RCCEx_PLL4_Config>
10003924:	4603      	mov	r3, r0
10003926:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
        if (status != HAL_OK)
1000392a:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
1000392e:	2b00      	cmp	r3, #0
10003930:	d003      	beq.n	1000393a <HAL_RCCEx_PeriphCLKConfig+0xb52>
        {
          return status;
10003932:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003936:	f000 beb2 	b.w	1000469e <HAL_RCCEx_PeriphCLKConfig+0x18b6>
        }
        /* Enable USART Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
1000393a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000393e:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10003942:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003946:	f043 0320 	orr.w	r3, r3, #32
1000394a:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
1000394e:	bf00      	nop
    }

    /* Set the source of USART1 clock*/
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
10003950:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003954:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
10003958:	f023 0207 	bic.w	r2, r3, #7
1000395c:	1d3b      	adds	r3, r7, #4
1000395e:	681b      	ldr	r3, [r3, #0]
10003960:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
10003964:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10003968:	4313      	orrs	r3, r2
1000396a:	f8c1 30c8 	str.w	r3, [r1, #200]	; 0xc8
  }

  /*---------------------------- SDMMC12 configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC12) ==
1000396e:	1d3b      	adds	r3, r7, #4
10003970:	681b      	ldr	r3, [r3, #0]
10003972:	e9d3 bc00 	ldrd	fp, ip, [r3]
10003976:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
1000397a:	f04f 0200 	mov.w	r2, #0
1000397e:	ea0b 0301 	and.w	r3, fp, r1
10003982:	ea0c 0402 	and.w	r4, ip, r2
10003986:	4323      	orrs	r3, r4
10003988:	d04f      	beq.n	10003a2a <HAL_RCCEx_PeriphCLKConfig+0xc42>
      RCC_PERIPHCLK_SDMMC12)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC12CLKSOURCE(PeriphClkInit->Sdmmc12ClockSelection));

    switch (PeriphClkInit->Sdmmc12ClockSelection)
1000398a:	1d3b      	adds	r3, r7, #4
1000398c:	681b      	ldr	r3, [r3, #0]
1000398e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
10003992:	2b01      	cmp	r3, #1
10003994:	d002      	beq.n	1000399c <HAL_RCCEx_PeriphCLKConfig+0xbb4>
10003996:	2b02      	cmp	r3, #2
10003998:	d01c      	beq.n	100039d4 <HAL_RCCEx_PeriphCLKConfig+0xbec>
1000399a:	e037      	b.n	10003a0c <HAL_RCCEx_PeriphCLKConfig+0xc24>
    {
      case RCC_SDMMC12CLKSOURCE_PLL3: /* PLL3 is used as clock source for SDMMC12 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
1000399c:	1d3b      	adds	r3, r7, #4
1000399e:	681b      	ldr	r3, [r3, #0]
100039a0:	3344      	adds	r3, #68	; 0x44
100039a2:	4618      	mov	r0, r3
100039a4:	f7fe ff5e 	bl	10002864 <RCCEx_PLL3_Config>
100039a8:	4603      	mov	r3, r0
100039aa:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
        if (status != HAL_OK)
100039ae:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
100039b2:	2b00      	cmp	r3, #0
100039b4:	d003      	beq.n	100039be <HAL_RCCEx_PeriphCLKConfig+0xbd6>
        {
          return status;
100039b6:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
100039ba:	f000 be70 	b.w	1000469e <HAL_RCCEx_PeriphCLKConfig+0x18b6>
        }
        /* Enable SDMMC12 Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
100039be:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100039c2:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100039c6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100039ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
100039ce:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
100039d2:	e01b      	b.n	10003a0c <HAL_RCCEx_PeriphCLKConfig+0xc24>

      case RCC_SDMMC12CLKSOURCE_PLL4: /* PLL4 is used as clock source for SDMMC12 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100039d4:	1d3b      	adds	r3, r7, #4
100039d6:	681b      	ldr	r3, [r3, #0]
100039d8:	3380      	adds	r3, #128	; 0x80
100039da:	4618      	mov	r0, r3
100039dc:	f7ff f8ac 	bl	10002b38 <RCCEx_PLL4_Config>
100039e0:	4603      	mov	r3, r0
100039e2:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
        if (status != HAL_OK)
100039e6:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
100039ea:	2b00      	cmp	r3, #0
100039ec:	d003      	beq.n	100039f6 <HAL_RCCEx_PeriphCLKConfig+0xc0e>
        {
          return status;
100039ee:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
100039f2:	f000 be54 	b.w	1000469e <HAL_RCCEx_PeriphCLKConfig+0x18b6>
        }
        /* Enable SDMMC12 Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
100039f6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100039fa:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100039fe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003a02:	f043 0310 	orr.w	r3, r3, #16
10003a06:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10003a0a:	bf00      	nop
    }

    /* Set the source of SDMMC12 clock*/
    __HAL_RCC_SDMMC12_CONFIG(PeriphClkInit->Sdmmc12ClockSelection);
10003a0c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003a10:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
10003a14:	f023 0203 	bic.w	r2, r3, #3
10003a18:	1d3b      	adds	r3, r7, #4
10003a1a:	681b      	ldr	r3, [r3, #0]
10003a1c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
10003a20:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10003a24:	4313      	orrs	r3, r2
10003a26:	f8c1 38f4 	str.w	r3, [r1, #2292]	; 0x8f4
  }

  /*---------------------------- SDMMC3 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC3) ==
10003a2a:	1d3b      	adds	r3, r7, #4
10003a2c:	681b      	ldr	r3, [r3, #0]
10003a2e:	e9d3 bc00 	ldrd	fp, ip, [r3]
10003a32:	f04f 0100 	mov.w	r1, #0
10003a36:	f04f 0201 	mov.w	r2, #1
10003a3a:	ea0b 0301 	and.w	r3, fp, r1
10003a3e:	ea0c 0402 	and.w	r4, ip, r2
10003a42:	4323      	orrs	r3, r4
10003a44:	d04f      	beq.n	10003ae6 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
      RCC_PERIPHCLK_SDMMC3)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC3CLKSOURCE(PeriphClkInit->Sdmmc3ClockSelection));

    switch (PeriphClkInit->Sdmmc3ClockSelection)
10003a46:	1d3b      	adds	r3, r7, #4
10003a48:	681b      	ldr	r3, [r3, #0]
10003a4a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
10003a4e:	2b01      	cmp	r3, #1
10003a50:	d002      	beq.n	10003a58 <HAL_RCCEx_PeriphCLKConfig+0xc70>
10003a52:	2b02      	cmp	r3, #2
10003a54:	d01c      	beq.n	10003a90 <HAL_RCCEx_PeriphCLKConfig+0xca8>
10003a56:	e037      	b.n	10003ac8 <HAL_RCCEx_PeriphCLKConfig+0xce0>
    {
      case RCC_SDMMC3CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SDMMC3 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10003a58:	1d3b      	adds	r3, r7, #4
10003a5a:	681b      	ldr	r3, [r3, #0]
10003a5c:	3344      	adds	r3, #68	; 0x44
10003a5e:	4618      	mov	r0, r3
10003a60:	f7fe ff00 	bl	10002864 <RCCEx_PLL3_Config>
10003a64:	4603      	mov	r3, r0
10003a66:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
        if (status != HAL_OK)
10003a6a:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003a6e:	2b00      	cmp	r3, #0
10003a70:	d003      	beq.n	10003a7a <HAL_RCCEx_PeriphCLKConfig+0xc92>
        {
          return status;
10003a72:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003a76:	f000 be12 	b.w	1000469e <HAL_RCCEx_PeriphCLKConfig+0x18b6>
        }
        /* Enable SDMMC3 Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10003a7a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003a7e:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10003a82:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003a86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10003a8a:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10003a8e:	e01b      	b.n	10003ac8 <HAL_RCCEx_PeriphCLKConfig+0xce0>

      case RCC_SDMMC3CLKSOURCE_PLL4:  /* PLL4 is used as clock source for SDMMC3 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003a90:	1d3b      	adds	r3, r7, #4
10003a92:	681b      	ldr	r3, [r3, #0]
10003a94:	3380      	adds	r3, #128	; 0x80
10003a96:	4618      	mov	r0, r3
10003a98:	f7ff f84e 	bl	10002b38 <RCCEx_PLL4_Config>
10003a9c:	4603      	mov	r3, r0
10003a9e:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
        if (status != HAL_OK)
10003aa2:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003aa6:	2b00      	cmp	r3, #0
10003aa8:	d003      	beq.n	10003ab2 <HAL_RCCEx_PeriphCLKConfig+0xcca>
        {
          return status;
10003aaa:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003aae:	f000 bdf6 	b.w	1000469e <HAL_RCCEx_PeriphCLKConfig+0x18b6>
        }
        /* Enable SDMMC3 Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10003ab2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003ab6:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10003aba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003abe:	f043 0310 	orr.w	r3, r3, #16
10003ac2:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10003ac6:	bf00      	nop
    }

    /* Set the source of SDMMC3 clock*/
    __HAL_RCC_SDMMC3_CONFIG(PeriphClkInit->Sdmmc3ClockSelection);
10003ac8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003acc:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
10003ad0:	f023 0203 	bic.w	r2, r3, #3
10003ad4:	1d3b      	adds	r3, r7, #4
10003ad6:	681b      	ldr	r3, [r3, #0]
10003ad8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
10003adc:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10003ae0:	4313      	orrs	r3, r2
10003ae2:	f8c1 38f8 	str.w	r3, [r1, #2296]	; 0x8f8
  }

  /*---------------------------- ETH configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ETH) ==
10003ae6:	1d3b      	adds	r3, r7, #4
10003ae8:	681b      	ldr	r3, [r3, #0]
10003aea:	e9d3 bc00 	ldrd	fp, ip, [r3]
10003aee:	f04f 0100 	mov.w	r1, #0
10003af2:	f04f 0202 	mov.w	r2, #2
10003af6:	ea0b 0301 	and.w	r3, fp, r1
10003afa:	ea0c 0402 	and.w	r4, ip, r2
10003afe:	4323      	orrs	r3, r4
10003b00:	d04f      	beq.n	10003ba2 <HAL_RCCEx_PeriphCLKConfig+0xdba>
      RCC_PERIPHCLK_ETH)
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETHCLKSOURCE(PeriphClkInit->EthClockSelection));

    switch (PeriphClkInit->EthClockSelection)
10003b02:	1d3b      	adds	r3, r7, #4
10003b04:	681b      	ldr	r3, [r3, #0]
10003b06:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
10003b0a:	2b00      	cmp	r3, #0
10003b0c:	d002      	beq.n	10003b14 <HAL_RCCEx_PeriphCLKConfig+0xd2c>
10003b0e:	2b01      	cmp	r3, #1
10003b10:	d01c      	beq.n	10003b4c <HAL_RCCEx_PeriphCLKConfig+0xd64>
10003b12:	e037      	b.n	10003b84 <HAL_RCCEx_PeriphCLKConfig+0xd9c>
    {
      case RCC_ETHCLKSOURCE_PLL4:     /* PLL4 is used as clock source for ETH */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003b14:	1d3b      	adds	r3, r7, #4
10003b16:	681b      	ldr	r3, [r3, #0]
10003b18:	3380      	adds	r3, #128	; 0x80
10003b1a:	4618      	mov	r0, r3
10003b1c:	f7ff f80c 	bl	10002b38 <RCCEx_PLL4_Config>
10003b20:	4603      	mov	r3, r0
10003b22:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
        if (status != HAL_OK)
10003b26:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003b2a:	2b00      	cmp	r3, #0
10003b2c:	d003      	beq.n	10003b36 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
        {
          return status;
10003b2e:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003b32:	f000 bdb4 	b.w	1000469e <HAL_RCCEx_PeriphCLKConfig+0x18b6>
        }
        /* Enable ETH Clock output generated on PLL2 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10003b36:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003b3a:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10003b3e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003b42:	f043 0310 	orr.w	r3, r3, #16
10003b46:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10003b4a:	e01b      	b.n	10003b84 <HAL_RCCEx_PeriphCLKConfig+0xd9c>

      case RCC_ETHCLKSOURCE_PLL3:     /* PLL3 is used as clock source for ETH */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10003b4c:	1d3b      	adds	r3, r7, #4
10003b4e:	681b      	ldr	r3, [r3, #0]
10003b50:	3344      	adds	r3, #68	; 0x44
10003b52:	4618      	mov	r0, r3
10003b54:	f7fe fe86 	bl	10002864 <RCCEx_PLL3_Config>
10003b58:	4603      	mov	r3, r0
10003b5a:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
        if (status != HAL_OK)
10003b5e:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003b62:	2b00      	cmp	r3, #0
10003b64:	d003      	beq.n	10003b6e <HAL_RCCEx_PeriphCLKConfig+0xd86>
        {
          return status;
10003b66:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003b6a:	f000 bd98 	b.w	1000469e <HAL_RCCEx_PeriphCLKConfig+0x18b6>
        }
        /* Enable ETH Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10003b6e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003b72:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10003b76:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003b7a:	f043 0320 	orr.w	r3, r3, #32
10003b7e:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10003b82:	bf00      	nop
    }

    /* Set the source of ETH clock*/
    __HAL_RCC_ETH_CONFIG(PeriphClkInit->EthClockSelection);
10003b84:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003b88:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
10003b8c:	f023 0203 	bic.w	r2, r3, #3
10003b90:	1d3b      	adds	r3, r7, #4
10003b92:	681b      	ldr	r3, [r3, #0]
10003b94:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
10003b98:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10003b9c:	4313      	orrs	r3, r2
10003b9e:	f8c1 38fc 	str.w	r3, [r1, #2300]	; 0x8fc
  }

  /*---------------------------- QSPI configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) ==
10003ba2:	1d3b      	adds	r3, r7, #4
10003ba4:	681b      	ldr	r3, [r3, #0]
10003ba6:	e9d3 bc00 	ldrd	fp, ip, [r3]
10003baa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
10003bae:	f04f 0200 	mov.w	r2, #0
10003bb2:	ea0b 0301 	and.w	r3, fp, r1
10003bb6:	ea0c 0402 	and.w	r4, ip, r2
10003bba:	4323      	orrs	r3, r4
10003bbc:	d04f      	beq.n	10003c5e <HAL_RCCEx_PeriphCLKConfig+0xe76>
      RCC_PERIPHCLK_QSPI)
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    switch (PeriphClkInit->QspiClockSelection)
10003bbe:	1d3b      	adds	r3, r7, #4
10003bc0:	681b      	ldr	r3, [r3, #0]
10003bc2:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
10003bc6:	2b01      	cmp	r3, #1
10003bc8:	d002      	beq.n	10003bd0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
10003bca:	2b02      	cmp	r3, #2
10003bcc:	d01c      	beq.n	10003c08 <HAL_RCCEx_PeriphCLKConfig+0xe20>
10003bce:	e037      	b.n	10003c40 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      case RCC_QSPICLKSOURCE_PLL3:   /* PLL3 is used as clock source for QSPI */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10003bd0:	1d3b      	adds	r3, r7, #4
10003bd2:	681b      	ldr	r3, [r3, #0]
10003bd4:	3344      	adds	r3, #68	; 0x44
10003bd6:	4618      	mov	r0, r3
10003bd8:	f7fe fe44 	bl	10002864 <RCCEx_PLL3_Config>
10003bdc:	4603      	mov	r3, r0
10003bde:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
        if (status != HAL_OK)
10003be2:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003be6:	2b00      	cmp	r3, #0
10003be8:	d003      	beq.n	10003bf2 <HAL_RCCEx_PeriphCLKConfig+0xe0a>
        {
          return status;
10003bea:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003bee:	f000 bd56 	b.w	1000469e <HAL_RCCEx_PeriphCLKConfig+0x18b6>
        }
        /* Enable QSPI Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10003bf2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003bf6:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10003bfa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003bfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10003c02:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10003c06:	e01b      	b.n	10003c40 <HAL_RCCEx_PeriphCLKConfig+0xe58>

      case RCC_QSPICLKSOURCE_PLL4:   /* PLL4 is used as clock source for QSPI */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003c08:	1d3b      	adds	r3, r7, #4
10003c0a:	681b      	ldr	r3, [r3, #0]
10003c0c:	3380      	adds	r3, #128	; 0x80
10003c0e:	4618      	mov	r0, r3
10003c10:	f7fe ff92 	bl	10002b38 <RCCEx_PLL4_Config>
10003c14:	4603      	mov	r3, r0
10003c16:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
        if (status != HAL_OK)
10003c1a:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003c1e:	2b00      	cmp	r3, #0
10003c20:	d003      	beq.n	10003c2a <HAL_RCCEx_PeriphCLKConfig+0xe42>
        {
          return status;
10003c22:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003c26:	f000 bd3a 	b.w	1000469e <HAL_RCCEx_PeriphCLKConfig+0x18b6>
        }
        /* Enable QSPI Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10003c2a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003c2e:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10003c32:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003c36:	f043 0310 	orr.w	r3, r3, #16
10003c3a:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10003c3e:	bf00      	nop
    }

    /* Set the source of QSPI clock*/
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
10003c40:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003c44:	f8d3 3900 	ldr.w	r3, [r3, #2304]	; 0x900
10003c48:	f023 0203 	bic.w	r2, r3, #3
10003c4c:	1d3b      	adds	r3, r7, #4
10003c4e:	681b      	ldr	r3, [r3, #0]
10003c50:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
10003c54:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10003c58:	4313      	orrs	r3, r2
10003c5a:	f8c1 3900 	str.w	r3, [r1, #2304]	; 0x900
  }

  /*---------------------------- FMC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) ==
10003c5e:	1d3b      	adds	r3, r7, #4
10003c60:	681b      	ldr	r3, [r3, #0]
10003c62:	e9d3 bc00 	ldrd	fp, ip, [r3]
10003c66:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
10003c6a:	f04f 0200 	mov.w	r2, #0
10003c6e:	ea0b 0301 	and.w	r3, fp, r1
10003c72:	ea0c 0402 	and.w	r4, ip, r2
10003c76:	4323      	orrs	r3, r4
10003c78:	d04f      	beq.n	10003d1a <HAL_RCCEx_PeriphCLKConfig+0xf32>
      RCC_PERIPHCLK_FMC)
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMCCLKSOURCE(PeriphClkInit->FmcClockSelection));

    switch (PeriphClkInit->FmcClockSelection)
10003c7a:	1d3b      	adds	r3, r7, #4
10003c7c:	681b      	ldr	r3, [r3, #0]
10003c7e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
10003c82:	2b01      	cmp	r3, #1
10003c84:	d002      	beq.n	10003c8c <HAL_RCCEx_PeriphCLKConfig+0xea4>
10003c86:	2b02      	cmp	r3, #2
10003c88:	d01c      	beq.n	10003cc4 <HAL_RCCEx_PeriphCLKConfig+0xedc>
10003c8a:	e037      	b.n	10003cfc <HAL_RCCEx_PeriphCLKConfig+0xf14>
    {
      case RCC_FMCCLKSOURCE_PLL3: /* PLL3 is used as clock source for FMC */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10003c8c:	1d3b      	adds	r3, r7, #4
10003c8e:	681b      	ldr	r3, [r3, #0]
10003c90:	3344      	adds	r3, #68	; 0x44
10003c92:	4618      	mov	r0, r3
10003c94:	f7fe fde6 	bl	10002864 <RCCEx_PLL3_Config>
10003c98:	4603      	mov	r3, r0
10003c9a:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
        if (status != HAL_OK)
10003c9e:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003ca2:	2b00      	cmp	r3, #0
10003ca4:	d003      	beq.n	10003cae <HAL_RCCEx_PeriphCLKConfig+0xec6>
        {
          return status;
10003ca6:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003caa:	f000 bcf8 	b.w	1000469e <HAL_RCCEx_PeriphCLKConfig+0x18b6>
        }
        /* Enable FMC Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10003cae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003cb2:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10003cb6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003cba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10003cbe:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10003cc2:	e01b      	b.n	10003cfc <HAL_RCCEx_PeriphCLKConfig+0xf14>

      case RCC_FMCCLKSOURCE_PLL4: /* PLL4 is used as clock source for FMC */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003cc4:	1d3b      	adds	r3, r7, #4
10003cc6:	681b      	ldr	r3, [r3, #0]
10003cc8:	3380      	adds	r3, #128	; 0x80
10003cca:	4618      	mov	r0, r3
10003ccc:	f7fe ff34 	bl	10002b38 <RCCEx_PLL4_Config>
10003cd0:	4603      	mov	r3, r0
10003cd2:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
        if (status != HAL_OK)
10003cd6:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003cda:	2b00      	cmp	r3, #0
10003cdc:	d003      	beq.n	10003ce6 <HAL_RCCEx_PeriphCLKConfig+0xefe>
        {
          return status;
10003cde:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003ce2:	f000 bcdc 	b.w	1000469e <HAL_RCCEx_PeriphCLKConfig+0x18b6>
        }
        /* Enable FMC Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10003ce6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003cea:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10003cee:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003cf2:	f043 0310 	orr.w	r3, r3, #16
10003cf6:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10003cfa:	bf00      	nop
    }

    /* Set the source of FMC clock*/
    __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
10003cfc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003d00:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
10003d04:	f023 0203 	bic.w	r2, r3, #3
10003d08:	1d3b      	adds	r3, r7, #4
10003d0a:	681b      	ldr	r3, [r3, #0]
10003d0c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
10003d10:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10003d14:	4313      	orrs	r3, r2
10003d16:	f8c1 3904 	str.w	r3, [r1, #2308]	; 0x904
  }

#if defined(FDCAN1)
  /*---------------------------- FDCAN configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) ==
10003d1a:	1d3b      	adds	r3, r7, #4
10003d1c:	681b      	ldr	r3, [r3, #0]
10003d1e:	e9d3 bc00 	ldrd	fp, ip, [r3]
10003d22:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
10003d26:	f04f 0200 	mov.w	r2, #0
10003d2a:	ea0b 0301 	and.w	r3, fp, r1
10003d2e:	ea0c 0402 	and.w	r4, ip, r2
10003d32:	4323      	orrs	r3, r4
10003d34:	d06c      	beq.n	10003e10 <HAL_RCCEx_PeriphCLKConfig+0x1028>
      RCC_PERIPHCLK_FDCAN)
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    switch (PeriphClkInit->FdcanClockSelection)
10003d36:	1d3b      	adds	r3, r7, #4
10003d38:	681b      	ldr	r3, [r3, #0]
10003d3a:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
10003d3e:	2b02      	cmp	r3, #2
10003d40:	d01f      	beq.n	10003d82 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
10003d42:	2b03      	cmp	r3, #3
10003d44:	d039      	beq.n	10003dba <HAL_RCCEx_PeriphCLKConfig+0xfd2>
10003d46:	2b01      	cmp	r3, #1
10003d48:	d153      	bne.n	10003df2 <HAL_RCCEx_PeriphCLKConfig+0x100a>
    {
      case RCC_FDCANCLKSOURCE_PLL3: /* PLL3 is used as clock source for FDCAN */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10003d4a:	1d3b      	adds	r3, r7, #4
10003d4c:	681b      	ldr	r3, [r3, #0]
10003d4e:	3344      	adds	r3, #68	; 0x44
10003d50:	4618      	mov	r0, r3
10003d52:	f7fe fd87 	bl	10002864 <RCCEx_PLL3_Config>
10003d56:	4603      	mov	r3, r0
10003d58:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
        if (status != HAL_OK)
10003d5c:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003d60:	2b00      	cmp	r3, #0
10003d62:	d003      	beq.n	10003d6c <HAL_RCCEx_PeriphCLKConfig+0xf84>
        {
          return status;
10003d64:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003d68:	f000 bc99 	b.w	1000469e <HAL_RCCEx_PeriphCLKConfig+0x18b6>
        }
        /* Enable FDCAN Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10003d6c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003d70:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10003d74:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003d78:	f043 0320 	orr.w	r3, r3, #32
10003d7c:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10003d80:	e037      	b.n	10003df2 <HAL_RCCEx_PeriphCLKConfig+0x100a>

      case RCC_FDCANCLKSOURCE_PLL4_Q: /* PLL4_Q is used as clock source for FDCAN */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003d82:	1d3b      	adds	r3, r7, #4
10003d84:	681b      	ldr	r3, [r3, #0]
10003d86:	3380      	adds	r3, #128	; 0x80
10003d88:	4618      	mov	r0, r3
10003d8a:	f7fe fed5 	bl	10002b38 <RCCEx_PLL4_Config>
10003d8e:	4603      	mov	r3, r0
10003d90:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
        if (status != HAL_OK)
10003d94:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003d98:	2b00      	cmp	r3, #0
10003d9a:	d003      	beq.n	10003da4 <HAL_RCCEx_PeriphCLKConfig+0xfbc>
        {
          return status;
10003d9c:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003da0:	f000 bc7d 	b.w	1000469e <HAL_RCCEx_PeriphCLKConfig+0x18b6>
        }
        /* Enable FDCAN Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10003da4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003da8:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10003dac:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003db0:	f043 0320 	orr.w	r3, r3, #32
10003db4:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10003db8:	e01b      	b.n	10003df2 <HAL_RCCEx_PeriphCLKConfig+0x100a>

      case RCC_FDCANCLKSOURCE_PLL4_R: /* PLL4_R is used as clock source for FDCAN */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003dba:	1d3b      	adds	r3, r7, #4
10003dbc:	681b      	ldr	r3, [r3, #0]
10003dbe:	3380      	adds	r3, #128	; 0x80
10003dc0:	4618      	mov	r0, r3
10003dc2:	f7fe feb9 	bl	10002b38 <RCCEx_PLL4_Config>
10003dc6:	4603      	mov	r3, r0
10003dc8:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
        if (status != HAL_OK)
10003dcc:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003dd0:	2b00      	cmp	r3, #0
10003dd2:	d003      	beq.n	10003ddc <HAL_RCCEx_PeriphCLKConfig+0xff4>
        {
          return status;
10003dd4:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003dd8:	f000 bc61 	b.w	1000469e <HAL_RCCEx_PeriphCLKConfig+0x18b6>
        }
        /* Enable FDCAN Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10003ddc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003de0:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10003de4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003de8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10003dec:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10003df0:	bf00      	nop
    }

    /* Set the source of FDCAN clock*/
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
10003df2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003df6:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
10003dfa:	f023 0203 	bic.w	r2, r3, #3
10003dfe:	1d3b      	adds	r3, r7, #4
10003e00:	681b      	ldr	r3, [r3, #0]
10003e02:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
10003e06:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10003e0a:	4313      	orrs	r3, r2
10003e0c:	f8c1 390c 	str.w	r3, [r1, #2316]	; 0x90c
  }
#endif /*FDCAN1*/

  /*---------------------------- SPDIFRX configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) ==
10003e10:	1d3b      	adds	r3, r7, #4
10003e12:	681b      	ldr	r3, [r3, #0]
10003e14:	e9d3 bc00 	ldrd	fp, ip, [r3]
10003e18:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
10003e1c:	f04f 0200 	mov.w	r2, #0
10003e20:	ea0b 0301 	and.w	r3, fp, r1
10003e24:	ea0c 0402 	and.w	r4, ip, r2
10003e28:	4323      	orrs	r3, r4
10003e2a:	d04f      	beq.n	10003ecc <HAL_RCCEx_PeriphCLKConfig+0x10e4>
      RCC_PERIPHCLK_SPDIFRX)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifrxClockSelection));

    switch (PeriphClkInit->SpdifrxClockSelection)
10003e2c:	1d3b      	adds	r3, r7, #4
10003e2e:	681b      	ldr	r3, [r3, #0]
10003e30:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
10003e34:	2b00      	cmp	r3, #0
10003e36:	d002      	beq.n	10003e3e <HAL_RCCEx_PeriphCLKConfig+0x1056>
10003e38:	2b01      	cmp	r3, #1
10003e3a:	d01c      	beq.n	10003e76 <HAL_RCCEx_PeriphCLKConfig+0x108e>
10003e3c:	e037      	b.n	10003eae <HAL_RCCEx_PeriphCLKConfig+0x10c6>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL4: /* PLL4 is used as clock source for SPDIF */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003e3e:	1d3b      	adds	r3, r7, #4
10003e40:	681b      	ldr	r3, [r3, #0]
10003e42:	3380      	adds	r3, #128	; 0x80
10003e44:	4618      	mov	r0, r3
10003e46:	f7fe fe77 	bl	10002b38 <RCCEx_PLL4_Config>
10003e4a:	4603      	mov	r3, r0
10003e4c:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
        if (status != HAL_OK)
10003e50:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003e54:	2b00      	cmp	r3, #0
10003e56:	d003      	beq.n	10003e60 <HAL_RCCEx_PeriphCLKConfig+0x1078>
        {
          return status;
10003e58:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003e5c:	f000 bc1f 	b.w	1000469e <HAL_RCCEx_PeriphCLKConfig+0x18b6>
        }
        /* Enable SPDIF Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10003e60:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003e64:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10003e68:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003e6c:	f043 0310 	orr.w	r3, r3, #16
10003e70:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10003e74:	e01b      	b.n	10003eae <HAL_RCCEx_PeriphCLKConfig+0x10c6>

      case RCC_SPDIFRXCLKSOURCE_PLL3: /* PLL3 is used as clock source for SPDIF */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10003e76:	1d3b      	adds	r3, r7, #4
10003e78:	681b      	ldr	r3, [r3, #0]
10003e7a:	3344      	adds	r3, #68	; 0x44
10003e7c:	4618      	mov	r0, r3
10003e7e:	f7fe fcf1 	bl	10002864 <RCCEx_PLL3_Config>
10003e82:	4603      	mov	r3, r0
10003e84:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
        if (status != HAL_OK)
10003e88:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003e8c:	2b00      	cmp	r3, #0
10003e8e:	d003      	beq.n	10003e98 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
        {
          return status;
10003e90:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003e94:	f000 bc03 	b.w	1000469e <HAL_RCCEx_PeriphCLKConfig+0x18b6>
        }
        /* Enable SPDIF Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10003e98:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003e9c:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10003ea0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003ea4:	f043 0320 	orr.w	r3, r3, #32
10003ea8:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10003eac:	bf00      	nop
    }

    /* Set the source of SPDIF clock*/
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
10003eae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003eb2:	f8d3 3914 	ldr.w	r3, [r3, #2324]	; 0x914
10003eb6:	f023 0203 	bic.w	r2, r3, #3
10003eba:	1d3b      	adds	r3, r7, #4
10003ebc:	681b      	ldr	r3, [r3, #0]
10003ebe:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
10003ec2:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10003ec6:	4313      	orrs	r3, r2
10003ec8:	f8c1 3914 	str.w	r3, [r1, #2324]	; 0x914
  }

  /*---------------------------- CEC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) ==
10003ecc:	1d3b      	adds	r3, r7, #4
10003ece:	681b      	ldr	r3, [r3, #0]
10003ed0:	e9d3 bc00 	ldrd	fp, ip, [r3]
10003ed4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
10003ed8:	f04f 0200 	mov.w	r2, #0
10003edc:	ea0b 0301 	and.w	r3, fp, r1
10003ee0:	ea0c 0402 	and.w	r4, ip, r2
10003ee4:	4323      	orrs	r3, r4
10003ee6:	d00e      	beq.n	10003f06 <HAL_RCCEx_PeriphCLKConfig+0x111e>
      RCC_PERIPHCLK_CEC)
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
10003ee8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003eec:	f8d3 3918 	ldr.w	r3, [r3, #2328]	; 0x918
10003ef0:	f023 0203 	bic.w	r2, r3, #3
10003ef4:	1d3b      	adds	r3, r7, #4
10003ef6:	681b      	ldr	r3, [r3, #0]
10003ef8:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
10003efc:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10003f00:	4313      	orrs	r3, r2
10003f02:	f8c1 3918 	str.w	r3, [r1, #2328]	; 0x918
  }

  /*---------------------------- USBPHY configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) ==
10003f06:	1d3b      	adds	r3, r7, #4
10003f08:	681b      	ldr	r3, [r3, #0]
10003f0a:	e9d3 bc00 	ldrd	fp, ip, [r3]
10003f0e:	f44f 7100 	mov.w	r1, #512	; 0x200
10003f12:	f04f 0200 	mov.w	r2, #0
10003f16:	ea0b 0301 	and.w	r3, fp, r1
10003f1a:	ea0c 0402 	and.w	r4, ip, r2
10003f1e:	4323      	orrs	r3, r4
10003f20:	d02e      	beq.n	10003f80 <HAL_RCCEx_PeriphCLKConfig+0x1198>
      RCC_PERIPHCLK_USBPHY)
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(PeriphClkInit->UsbphyClockSelection));

    if (PeriphClkInit->UsbphyClockSelection == RCC_USBPHYCLKSOURCE_PLL4)
10003f22:	1d3b      	adds	r3, r7, #4
10003f24:	681b      	ldr	r3, [r3, #0]
10003f26:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
10003f2a:	2b01      	cmp	r3, #1
10003f2c:	d119      	bne.n	10003f62 <HAL_RCCEx_PeriphCLKConfig+0x117a>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003f2e:	1d3b      	adds	r3, r7, #4
10003f30:	681b      	ldr	r3, [r3, #0]
10003f32:	3380      	adds	r3, #128	; 0x80
10003f34:	4618      	mov	r0, r3
10003f36:	f7fe fdff 	bl	10002b38 <RCCEx_PLL4_Config>
10003f3a:	4603      	mov	r3, r0
10003f3c:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
      if (status != HAL_OK)
10003f40:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003f44:	2b00      	cmp	r3, #0
10003f46:	d002      	beq.n	10003f4e <HAL_RCCEx_PeriphCLKConfig+0x1166>
      {
        return status;
10003f48:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003f4c:	e3a7      	b.n	1000469e <HAL_RCCEx_PeriphCLKConfig+0x18b6>
      }
      /* Enable USB PHY Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10003f4e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003f52:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10003f56:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003f5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10003f5e:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    __HAL_RCC_USBPHY_CONFIG(PeriphClkInit->UsbphyClockSelection);
10003f62:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003f66:	f8d3 391c 	ldr.w	r3, [r3, #2332]	; 0x91c
10003f6a:	f023 0203 	bic.w	r2, r3, #3
10003f6e:	1d3b      	adds	r3, r7, #4
10003f70:	681b      	ldr	r3, [r3, #0]
10003f72:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
10003f76:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10003f7a:	4313      	orrs	r3, r2
10003f7c:	f8c1 391c 	str.w	r3, [r1, #2332]	; 0x91c
  }

  /*---------------------------- USBO configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBO) ==
10003f80:	1d3b      	adds	r3, r7, #4
10003f82:	681b      	ldr	r3, [r3, #0]
10003f84:	e9d3 bc00 	ldrd	fp, ip, [r3]
10003f88:	f44f 2100 	mov.w	r1, #524288	; 0x80000
10003f8c:	f04f 0200 	mov.w	r2, #0
10003f90:	ea0b 0301 	and.w	r3, fp, r1
10003f94:	ea0c 0402 	and.w	r4, ip, r2
10003f98:	4323      	orrs	r3, r4
10003f9a:	d02e      	beq.n	10003ffa <HAL_RCCEx_PeriphCLKConfig+0x1212>
      RCC_PERIPHCLK_USBO)
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBOCLKSOURCE(PeriphClkInit->UsboClockSelection));

    if (PeriphClkInit->UsboClockSelection == RCC_USBOCLKSOURCE_PLL4)
10003f9c:	1d3b      	adds	r3, r7, #4
10003f9e:	681b      	ldr	r3, [r3, #0]
10003fa0:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
10003fa4:	2b00      	cmp	r3, #0
10003fa6:	d119      	bne.n	10003fdc <HAL_RCCEx_PeriphCLKConfig+0x11f4>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003fa8:	1d3b      	adds	r3, r7, #4
10003faa:	681b      	ldr	r3, [r3, #0]
10003fac:	3380      	adds	r3, #128	; 0x80
10003fae:	4618      	mov	r0, r3
10003fb0:	f7fe fdc2 	bl	10002b38 <RCCEx_PLL4_Config>
10003fb4:	4603      	mov	r3, r0
10003fb6:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
      if (status != HAL_OK)
10003fba:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003fbe:	2b00      	cmp	r3, #0
10003fc0:	d002      	beq.n	10003fc8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      {
        return status;
10003fc2:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10003fc6:	e36a      	b.n	1000469e <HAL_RCCEx_PeriphCLKConfig+0x18b6>
      }
      /* Enable USB OTG Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10003fc8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003fcc:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10003fd0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003fd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10003fd8:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    __HAL_RCC_USBO_CONFIG(PeriphClkInit->UsboClockSelection);
10003fdc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003fe0:	f8d3 391c 	ldr.w	r3, [r3, #2332]	; 0x91c
10003fe4:	f023 0210 	bic.w	r2, r3, #16
10003fe8:	1d3b      	adds	r3, r7, #4
10003fea:	681b      	ldr	r3, [r3, #0]
10003fec:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
10003ff0:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10003ff4:	4313      	orrs	r3, r2
10003ff6:	f8c1 391c 	str.w	r3, [r1, #2332]	; 0x91c
  }

  /*---------------------------- RNG1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG1) ==
10003ffa:	1d3b      	adds	r3, r7, #4
10003ffc:	681b      	ldr	r3, [r3, #0]
10003ffe:	e9d3 bc00 	ldrd	fp, ip, [r3]
10004002:	f04f 0100 	mov.w	r1, #0
10004006:	f04f 0204 	mov.w	r2, #4
1000400a:	ea0b 0301 	and.w	r3, fp, r1
1000400e:	ea0c 0402 	and.w	r4, ip, r2
10004012:	4323      	orrs	r3, r4
10004014:	d02e      	beq.n	10004074 <HAL_RCCEx_PeriphCLKConfig+0x128c>
      RCC_PERIPHCLK_RNG1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNG1CLKSOURCE(PeriphClkInit->Rng1ClockSelection));

    if (PeriphClkInit->Rng1ClockSelection == RCC_RNG1CLKSOURCE_PLL4)
10004016:	1d3b      	adds	r3, r7, #4
10004018:	681b      	ldr	r3, [r3, #0]
1000401a:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
1000401e:	2b01      	cmp	r3, #1
10004020:	d119      	bne.n	10004056 <HAL_RCCEx_PeriphCLKConfig+0x126e>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004022:	1d3b      	adds	r3, r7, #4
10004024:	681b      	ldr	r3, [r3, #0]
10004026:	3380      	adds	r3, #128	; 0x80
10004028:	4618      	mov	r0, r3
1000402a:	f7fe fd85 	bl	10002b38 <RCCEx_PLL4_Config>
1000402e:	4603      	mov	r3, r0
10004030:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
      if (status != HAL_OK)
10004034:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10004038:	2b00      	cmp	r3, #0
1000403a:	d002      	beq.n	10004042 <HAL_RCCEx_PeriphCLKConfig+0x125a>
      {
        return status;
1000403c:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10004040:	e32d      	b.n	1000469e <HAL_RCCEx_PeriphCLKConfig+0x18b6>
      }
      /* Enable RNG1 Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10004042:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004046:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
1000404a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000404e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10004052:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    /* Set the source of RNG1 clock*/
    __HAL_RCC_RNG1_CONFIG(PeriphClkInit->Rng1ClockSelection);
10004056:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000405a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
1000405e:	f023 0203 	bic.w	r2, r3, #3
10004062:	1d3b      	adds	r3, r7, #4
10004064:	681b      	ldr	r3, [r3, #0]
10004066:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
1000406a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000406e:	4313      	orrs	r3, r2
10004070:	f8c1 30cc 	str.w	r3, [r1, #204]	; 0xcc
  }

  /*---------------------------- RNG2 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG2) ==
10004074:	1d3b      	adds	r3, r7, #4
10004076:	681b      	ldr	r3, [r3, #0]
10004078:	e9d3 bc00 	ldrd	fp, ip, [r3]
1000407c:	f04f 0100 	mov.w	r1, #0
10004080:	f04f 0208 	mov.w	r2, #8
10004084:	ea0b 0301 	and.w	r3, fp, r1
10004088:	ea0c 0402 	and.w	r4, ip, r2
1000408c:	4323      	orrs	r3, r4
1000408e:	d02e      	beq.n	100040ee <HAL_RCCEx_PeriphCLKConfig+0x1306>
      RCC_PERIPHCLK_RNG2)
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNG2CLKSOURCE(PeriphClkInit->Rng2ClockSelection));

    if (PeriphClkInit->Rng2ClockSelection == RCC_RNG2CLKSOURCE_PLL4)
10004090:	1d3b      	adds	r3, r7, #4
10004092:	681b      	ldr	r3, [r3, #0]
10004094:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
10004098:	2b01      	cmp	r3, #1
1000409a:	d119      	bne.n	100040d0 <HAL_RCCEx_PeriphCLKConfig+0x12e8>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
1000409c:	1d3b      	adds	r3, r7, #4
1000409e:	681b      	ldr	r3, [r3, #0]
100040a0:	3380      	adds	r3, #128	; 0x80
100040a2:	4618      	mov	r0, r3
100040a4:	f7fe fd48 	bl	10002b38 <RCCEx_PLL4_Config>
100040a8:	4603      	mov	r3, r0
100040aa:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
      if (status != HAL_OK)
100040ae:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
100040b2:	2b00      	cmp	r3, #0
100040b4:	d002      	beq.n	100040bc <HAL_RCCEx_PeriphCLKConfig+0x12d4>
      {
        return status;
100040b6:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
100040ba:	e2f0      	b.n	1000469e <HAL_RCCEx_PeriphCLKConfig+0x18b6>
      }
      /* Enable RNG2 Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
100040bc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100040c0:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100040c4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100040c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
100040cc:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    /* Set the source of RNG2 clock*/
    __HAL_RCC_RNG2_CONFIG(PeriphClkInit->Rng2ClockSelection);
100040d0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100040d4:	f8d3 3920 	ldr.w	r3, [r3, #2336]	; 0x920
100040d8:	f023 0203 	bic.w	r2, r3, #3
100040dc:	1d3b      	adds	r3, r7, #4
100040de:	681b      	ldr	r3, [r3, #0]
100040e0:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
100040e4:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100040e8:	4313      	orrs	r3, r2
100040ea:	f8c1 3920 	str.w	r3, [r1, #2336]	; 0x920
  }

  /*---------------------------- STGEN configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_STGEN) ==
100040ee:	1d3b      	adds	r3, r7, #4
100040f0:	681b      	ldr	r3, [r3, #0]
100040f2:	e9d3 bc00 	ldrd	fp, ip, [r3]
100040f6:	f04f 0100 	mov.w	r1, #0
100040fa:	f04f 0210 	mov.w	r2, #16
100040fe:	ea0b 0301 	and.w	r3, fp, r1
10004102:	ea0c 0402 	and.w	r4, ip, r2
10004106:	4323      	orrs	r3, r4
10004108:	d00e      	beq.n	10004128 <HAL_RCCEx_PeriphCLKConfig+0x1340>
      RCC_PERIPHCLK_STGEN)
  {
    /* Check the parameters */
    assert_param(IS_RCC_STGENCLKSOURCE(PeriphClkInit->StgenClockSelection));

    __HAL_RCC_STGEN_CONFIG(PeriphClkInit->StgenClockSelection);
1000410a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000410e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
10004112:	f023 0203 	bic.w	r2, r3, #3
10004116:	1d3b      	adds	r3, r7, #4
10004118:	681b      	ldr	r3, [r3, #0]
1000411a:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
1000411e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10004122:	4313      	orrs	r3, r2
10004124:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
  }

#if defined(DSI)
  /*---------------------------- DSI configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) ==
10004128:	1d3b      	adds	r3, r7, #4
1000412a:	681b      	ldr	r3, [r3, #0]
1000412c:	e9d3 bc00 	ldrd	fp, ip, [r3]
10004130:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
10004134:	f04f 0200 	mov.w	r2, #0
10004138:	ea0b 0301 	and.w	r3, fp, r1
1000413c:	ea0c 0402 	and.w	r4, ip, r2
10004140:	4323      	orrs	r3, r4
10004142:	d02e      	beq.n	100041a2 <HAL_RCCEx_PeriphCLKConfig+0x13ba>
      RCC_PERIPHCLK_DSI)
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    if (PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLL4)
10004144:	1d3b      	adds	r3, r7, #4
10004146:	681b      	ldr	r3, [r3, #0]
10004148:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
1000414c:	2b01      	cmp	r3, #1
1000414e:	d119      	bne.n	10004184 <HAL_RCCEx_PeriphCLKConfig+0x139c>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004150:	1d3b      	adds	r3, r7, #4
10004152:	681b      	ldr	r3, [r3, #0]
10004154:	3380      	adds	r3, #128	; 0x80
10004156:	4618      	mov	r0, r3
10004158:	f7fe fcee 	bl	10002b38 <RCCEx_PLL4_Config>
1000415c:	4603      	mov	r3, r0
1000415e:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
      if (status != HAL_OK)
10004162:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10004166:	2b00      	cmp	r3, #0
10004168:	d002      	beq.n	10004170 <HAL_RCCEx_PeriphCLKConfig+0x1388>
      {
        return status;
1000416a:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
1000416e:	e296      	b.n	1000469e <HAL_RCCEx_PeriphCLKConfig+0x18b6>
      }
      /* Enable DSI Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10004170:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004174:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10004178:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000417c:	f043 0310 	orr.w	r3, r3, #16
10004180:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
10004184:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004188:	f8d3 3924 	ldr.w	r3, [r3, #2340]	; 0x924
1000418c:	f023 0201 	bic.w	r2, r3, #1
10004190:	1d3b      	adds	r3, r7, #4
10004192:	681b      	ldr	r3, [r3, #0]
10004194:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
10004198:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000419c:	4313      	orrs	r3, r2
1000419e:	f8c1 3924 	str.w	r3, [r1, #2340]	; 0x924
  }
#endif /*DSI*/

  /*---------------------------- ADC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) ==
100041a2:	1d3b      	adds	r3, r7, #4
100041a4:	681b      	ldr	r3, [r3, #0]
100041a6:	e9d3 bc00 	ldrd	fp, ip, [r3]
100041aa:	f04f 0108 	mov.w	r1, #8
100041ae:	f04f 0200 	mov.w	r2, #0
100041b2:	ea0b 0301 	and.w	r3, fp, r1
100041b6:	ea0c 0402 	and.w	r4, ip, r2
100041ba:	4323      	orrs	r3, r4
100041bc:	d04d      	beq.n	1000425a <HAL_RCCEx_PeriphCLKConfig+0x1472>
      RCC_PERIPHCLK_ADC)
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    switch (PeriphClkInit->AdcClockSelection)
100041be:	1d3b      	adds	r3, r7, #4
100041c0:	681b      	ldr	r3, [r3, #0]
100041c2:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
100041c6:	2b00      	cmp	r3, #0
100041c8:	d002      	beq.n	100041d0 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
100041ca:	2b02      	cmp	r3, #2
100041cc:	d01b      	beq.n	10004206 <HAL_RCCEx_PeriphCLKConfig+0x141e>
100041ce:	e035      	b.n	1000423c <HAL_RCCEx_PeriphCLKConfig+0x1454>
    {
      case RCC_ADCCLKSOURCE_PLL4: /* PLL4 is used as clock source for ADC */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100041d0:	1d3b      	adds	r3, r7, #4
100041d2:	681b      	ldr	r3, [r3, #0]
100041d4:	3380      	adds	r3, #128	; 0x80
100041d6:	4618      	mov	r0, r3
100041d8:	f7fe fcae 	bl	10002b38 <RCCEx_PLL4_Config>
100041dc:	4603      	mov	r3, r0
100041de:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
        if (status != HAL_OK)
100041e2:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
100041e6:	2b00      	cmp	r3, #0
100041e8:	d002      	beq.n	100041f0 <HAL_RCCEx_PeriphCLKConfig+0x1408>
        {
          return status;
100041ea:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
100041ee:	e256      	b.n	1000469e <HAL_RCCEx_PeriphCLKConfig+0x18b6>
        }
        /* Enable ADC Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
100041f0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100041f4:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100041f8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100041fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10004200:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
        break;
10004204:	e01a      	b.n	1000423c <HAL_RCCEx_PeriphCLKConfig+0x1454>

      case RCC_ADCCLKSOURCE_PLL3: /* PLL3 is used as clock source for ADC */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10004206:	1d3b      	adds	r3, r7, #4
10004208:	681b      	ldr	r3, [r3, #0]
1000420a:	3344      	adds	r3, #68	; 0x44
1000420c:	4618      	mov	r0, r3
1000420e:	f7fe fb29 	bl	10002864 <RCCEx_PLL3_Config>
10004212:	4603      	mov	r3, r0
10004214:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
        if (status != HAL_OK)
10004218:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
1000421c:	2b00      	cmp	r3, #0
1000421e:	d002      	beq.n	10004226 <HAL_RCCEx_PeriphCLKConfig+0x143e>
        {
          return status;
10004220:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10004224:	e23b      	b.n	1000469e <HAL_RCCEx_PeriphCLKConfig+0x18b6>
        }
        /* Enable ADC Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10004226:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000422a:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
1000422e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004232:	f043 0320 	orr.w	r3, r3, #32
10004236:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
1000423a:	bf00      	nop
    }

    /* Set the source of ADC clock*/
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
1000423c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004240:	f8d3 3928 	ldr.w	r3, [r3, #2344]	; 0x928
10004244:	f023 0203 	bic.w	r2, r3, #3
10004248:	1d3b      	adds	r3, r7, #4
1000424a:	681b      	ldr	r3, [r3, #0]
1000424c:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
10004250:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10004254:	4313      	orrs	r3, r2
10004256:	f8c1 3928 	str.w	r3, [r1, #2344]	; 0x928
  }

  /*---------------------------- LPTIM45 configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM45) ==
1000425a:	1d3b      	adds	r3, r7, #4
1000425c:	681b      	ldr	r3, [r3, #0]
1000425e:	e9d3 bc00 	ldrd	fp, ip, [r3]
10004262:	f44f 3100 	mov.w	r1, #131072	; 0x20000
10004266:	f04f 0200 	mov.w	r2, #0
1000426a:	ea0b 0301 	and.w	r3, fp, r1
1000426e:	ea0c 0402 	and.w	r4, ip, r2
10004272:	4323      	orrs	r3, r4
10004274:	d04c      	beq.n	10004310 <HAL_RCCEx_PeriphCLKConfig+0x1528>
      RCC_PERIPHCLK_LPTIM45)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM45CLKSOURCE(PeriphClkInit->Lptim45ClockSelection));

    switch (PeriphClkInit->Lptim45ClockSelection)
10004276:	1d3b      	adds	r3, r7, #4
10004278:	681b      	ldr	r3, [r3, #0]
1000427a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
1000427e:	2b01      	cmp	r3, #1
10004280:	d01c      	beq.n	100042bc <HAL_RCCEx_PeriphCLKConfig+0x14d4>
10004282:	2b02      	cmp	r3, #2
10004284:	d135      	bne.n	100042f2 <HAL_RCCEx_PeriphCLKConfig+0x150a>
    {
      case RCC_LPTIM45CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPTIM45 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10004286:	1d3b      	adds	r3, r7, #4
10004288:	681b      	ldr	r3, [r3, #0]
1000428a:	3344      	adds	r3, #68	; 0x44
1000428c:	4618      	mov	r0, r3
1000428e:	f7fe fae9 	bl	10002864 <RCCEx_PLL3_Config>
10004292:	4603      	mov	r3, r0
10004294:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
        if (status != HAL_OK)
10004298:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
1000429c:	2b00      	cmp	r3, #0
1000429e:	d002      	beq.n	100042a6 <HAL_RCCEx_PeriphCLKConfig+0x14be>
        {
          return status;
100042a0:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
100042a4:	e1fb      	b.n	1000469e <HAL_RCCEx_PeriphCLKConfig+0x18b6>
        }
        /* Enable clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
100042a6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100042aa:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100042ae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100042b2:	f043 0320 	orr.w	r3, r3, #32
100042b6:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
100042ba:	e01a      	b.n	100042f2 <HAL_RCCEx_PeriphCLKConfig+0x150a>

      case RCC_LPTIM45CLKSOURCE_PLL4: /* PLL4 is used as clock source for LPTIM45 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100042bc:	1d3b      	adds	r3, r7, #4
100042be:	681b      	ldr	r3, [r3, #0]
100042c0:	3380      	adds	r3, #128	; 0x80
100042c2:	4618      	mov	r0, r3
100042c4:	f7fe fc38 	bl	10002b38 <RCCEx_PLL4_Config>
100042c8:	4603      	mov	r3, r0
100042ca:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
        if (status != HAL_OK)
100042ce:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
100042d2:	2b00      	cmp	r3, #0
100042d4:	d002      	beq.n	100042dc <HAL_RCCEx_PeriphCLKConfig+0x14f4>
        {
          return status;
100042d6:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
100042da:	e1e0      	b.n	1000469e <HAL_RCCEx_PeriphCLKConfig+0x18b6>
        }
        /* Enable clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
100042dc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100042e0:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100042e4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100042e8:	f043 0310 	orr.w	r3, r3, #16
100042ec:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
100042f0:	bf00      	nop
    }

    /* Set the source of LPTIM45 clock*/
    __HAL_RCC_LPTIM45_CONFIG(PeriphClkInit->Lptim45ClockSelection);
100042f2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100042f6:	f8d3 392c 	ldr.w	r3, [r3, #2348]	; 0x92c
100042fa:	f023 0207 	bic.w	r2, r3, #7
100042fe:	1d3b      	adds	r3, r7, #4
10004300:	681b      	ldr	r3, [r3, #0]
10004302:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10004306:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000430a:	4313      	orrs	r3, r2
1000430c:	f8c1 392c 	str.w	r3, [r1, #2348]	; 0x92c
  }

  /*---------------------------- LPTIM23 configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM23) ==
10004310:	1d3b      	adds	r3, r7, #4
10004312:	681b      	ldr	r3, [r3, #0]
10004314:	e9d3 bc00 	ldrd	fp, ip, [r3]
10004318:	f44f 3180 	mov.w	r1, #65536	; 0x10000
1000431c:	f04f 0200 	mov.w	r2, #0
10004320:	ea0b 0301 	and.w	r3, fp, r1
10004324:	ea0c 0402 	and.w	r4, ip, r2
10004328:	4323      	orrs	r3, r4
1000432a:	d02e      	beq.n	1000438a <HAL_RCCEx_PeriphCLKConfig+0x15a2>
      RCC_PERIPHCLK_LPTIM23)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM23CLKSOURCE(PeriphClkInit->Lptim23ClockSelection));

    if (PeriphClkInit->Lptim23ClockSelection == RCC_LPTIM23CLKSOURCE_PLL4)
1000432c:	1d3b      	adds	r3, r7, #4
1000432e:	681b      	ldr	r3, [r3, #0]
10004330:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
10004334:	2b01      	cmp	r3, #1
10004336:	d119      	bne.n	1000436c <HAL_RCCEx_PeriphCLKConfig+0x1584>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004338:	1d3b      	adds	r3, r7, #4
1000433a:	681b      	ldr	r3, [r3, #0]
1000433c:	3380      	adds	r3, #128	; 0x80
1000433e:	4618      	mov	r0, r3
10004340:	f7fe fbfa 	bl	10002b38 <RCCEx_PLL4_Config>
10004344:	4603      	mov	r3, r0
10004346:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
      if (status != HAL_OK)
1000434a:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
1000434e:	2b00      	cmp	r3, #0
10004350:	d002      	beq.n	10004358 <HAL_RCCEx_PeriphCLKConfig+0x1570>
      {
        return status;
10004352:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10004356:	e1a2      	b.n	1000469e <HAL_RCCEx_PeriphCLKConfig+0x18b6>
      }
      /* Enable clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10004358:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000435c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10004360:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004364:	f043 0320 	orr.w	r3, r3, #32
10004368:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    /* Set the source of LPTIM23 clock*/
    __HAL_RCC_LPTIM23_CONFIG(PeriphClkInit->Lptim23ClockSelection);
1000436c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004370:	f8d3 3930 	ldr.w	r3, [r3, #2352]	; 0x930
10004374:	f023 0207 	bic.w	r2, r3, #7
10004378:	1d3b      	adds	r3, r7, #4
1000437a:	681b      	ldr	r3, [r3, #0]
1000437c:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
10004380:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10004384:	4313      	orrs	r3, r2
10004386:	f8c1 3930 	str.w	r3, [r1, #2352]	; 0x930
  }

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) ==
1000438a:	1d3b      	adds	r3, r7, #4
1000438c:	681b      	ldr	r3, [r3, #0]
1000438e:	e9d3 bc00 	ldrd	fp, ip, [r3]
10004392:	f04f 0140 	mov.w	r1, #64	; 0x40
10004396:	f04f 0200 	mov.w	r2, #0
1000439a:	ea0b 0301 	and.w	r3, fp, r1
1000439e:	ea0c 0402 	and.w	r4, ip, r2
100043a2:	4323      	orrs	r3, r4
100043a4:	d04c      	beq.n	10004440 <HAL_RCCEx_PeriphCLKConfig+0x1658>
      RCC_PERIPHCLK_LPTIM1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    switch (PeriphClkInit->Lptim1ClockSelection)
100043a6:	1d3b      	adds	r3, r7, #4
100043a8:	681b      	ldr	r3, [r3, #0]
100043aa:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
100043ae:	2b01      	cmp	r3, #1
100043b0:	d01c      	beq.n	100043ec <HAL_RCCEx_PeriphCLKConfig+0x1604>
100043b2:	2b02      	cmp	r3, #2
100043b4:	d135      	bne.n	10004422 <HAL_RCCEx_PeriphCLKConfig+0x163a>
    {
      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100043b6:	1d3b      	adds	r3, r7, #4
100043b8:	681b      	ldr	r3, [r3, #0]
100043ba:	3344      	adds	r3, #68	; 0x44
100043bc:	4618      	mov	r0, r3
100043be:	f7fe fa51 	bl	10002864 <RCCEx_PLL3_Config>
100043c2:	4603      	mov	r3, r0
100043c4:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
        if (status != HAL_OK)
100043c8:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
100043cc:	2b00      	cmp	r3, #0
100043ce:	d002      	beq.n	100043d6 <HAL_RCCEx_PeriphCLKConfig+0x15ee>
        {
          return status;
100043d0:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
100043d4:	e163      	b.n	1000469e <HAL_RCCEx_PeriphCLKConfig+0x18b6>
        }
        /* Enable clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
100043d6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100043da:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100043de:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100043e2:	f043 0320 	orr.w	r3, r3, #32
100043e6:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
100043ea:	e01a      	b.n	10004422 <HAL_RCCEx_PeriphCLKConfig+0x163a>

      case RCC_LPTIM1CLKSOURCE_PLL4:  /* PLL4 is used as clock source for LPTIM1 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100043ec:	1d3b      	adds	r3, r7, #4
100043ee:	681b      	ldr	r3, [r3, #0]
100043f0:	3380      	adds	r3, #128	; 0x80
100043f2:	4618      	mov	r0, r3
100043f4:	f7fe fba0 	bl	10002b38 <RCCEx_PLL4_Config>
100043f8:	4603      	mov	r3, r0
100043fa:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
        if (status != HAL_OK)
100043fe:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
10004402:	2b00      	cmp	r3, #0
10004404:	d002      	beq.n	1000440c <HAL_RCCEx_PeriphCLKConfig+0x1624>
        {
          return status;
10004406:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
1000440a:	e148      	b.n	1000469e <HAL_RCCEx_PeriphCLKConfig+0x18b6>
        }
        /* Enable clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
1000440c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004410:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10004414:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004418:	f043 0310 	orr.w	r3, r3, #16
1000441c:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10004420:	bf00      	nop
    }

    /* Set the source of LPTIM1 clock*/
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
10004422:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004426:	f8d3 3934 	ldr.w	r3, [r3, #2356]	; 0x934
1000442a:	f023 0207 	bic.w	r2, r3, #7
1000442e:	1d3b      	adds	r3, r7, #4
10004430:	681b      	ldr	r3, [r3, #0]
10004432:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
10004436:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000443a:	4313      	orrs	r3, r2
1000443c:	f8c1 3934 	str.w	r3, [r1, #2356]	; 0x934
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) ==
10004440:	1d3b      	adds	r3, r7, #4
10004442:	681b      	ldr	r3, [r3, #0]
10004444:	e9d3 bc00 	ldrd	fp, ip, [r3]
10004448:	f44f 5180 	mov.w	r1, #4096	; 0x1000
1000444c:	f04f 0200 	mov.w	r2, #0
10004450:	ea0b 0301 	and.w	r3, fp, r1
10004454:	ea0c 0402 	and.w	r4, ip, r2
10004458:	4323      	orrs	r3, r4
1000445a:	f000 80b3 	beq.w	100045c4 <HAL_RCCEx_PeriphCLKConfig+0x17dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
1000445e:	4b93      	ldr	r3, [pc, #588]	; (100046ac <HAL_RCCEx_PeriphCLKConfig+0x18c4>)
10004460:	681b      	ldr	r3, [r3, #0]
10004462:	4a92      	ldr	r2, [pc, #584]	; (100046ac <HAL_RCCEx_PeriphCLKConfig+0x18c4>)
10004464:	f443 7380 	orr.w	r3, r3, #256	; 0x100
10004468:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
1000446a:	f7fc f977 	bl	1000075c <HAL_GetTick>
1000446e:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c

    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
10004472:	e00a      	b.n	1000448a <HAL_RCCEx_PeriphCLKConfig+0x16a2>
    {
      if ((HAL_GetTick() - tickstart) > DBP_TIMEOUT_VALUE)
10004474:	f7fc f972 	bl	1000075c <HAL_GetTick>
10004478:	4602      	mov	r2, r0
1000447a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
1000447e:	1ad3      	subs	r3, r2, r3
10004480:	2b64      	cmp	r3, #100	; 0x64
10004482:	d902      	bls.n	1000448a <HAL_RCCEx_PeriphCLKConfig+0x16a2>
      {
        ret = HAL_TIMEOUT;
10004484:	2303      	movs	r3, #3
10004486:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
1000448a:	4b88      	ldr	r3, [pc, #544]	; (100046ac <HAL_RCCEx_PeriphCLKConfig+0x18c4>)
1000448c:	681b      	ldr	r3, [r3, #0]
1000448e:	f403 7380 	and.w	r3, r3, #256	; 0x100
10004492:	2b00      	cmp	r3, #0
10004494:	d0ee      	beq.n	10004474 <HAL_RCCEx_PeriphCLKConfig+0x168c>
      }
    }

    if (ret == HAL_OK)
10004496:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
1000449a:	2b00      	cmp	r3, #0
1000449c:	f040 808f 	bne.w	100045be <HAL_RCCEx_PeriphCLKConfig+0x17d6>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSRC) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSRC))
100044a0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100044a4:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
100044a8:	1d3b      	adds	r3, r7, #4
100044aa:	681b      	ldr	r3, [r3, #0]
100044ac:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
100044b0:	4053      	eors	r3, r2
100044b2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
100044b6:	2b00      	cmp	r3, #0
100044b8:	d076      	beq.n	100045a8 <HAL_RCCEx_PeriphCLKConfig+0x17c0>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSRC));
100044ba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100044be:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
100044c2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
100044c6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
100044ca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100044ce:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
100044d2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100044d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
100044da:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
        __HAL_RCC_BACKUPRESET_RELEASE();
100044de:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100044e2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
100044e6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100044ea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
100044ee:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

        /* Set the LSEDrive value */
        __HAL_RCC_LSEDRIVE_CONFIG(tmpreg & RCC_BDCR_LSEDRV);
100044f2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100044f6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
100044fa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
100044fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
10004502:	f003 0330 	and.w	r3, r3, #48	; 0x30
10004506:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000450a:	4313      	orrs	r3, r2
1000450c:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140

        /* RCC_BDCR_LSEON can be enabled for RTC or another IP, re-enable it */
        RCC_OscInitTypeDef RCC_OscInitStructure;
        /* Configure LSE Oscillator*/
        RCC_OscInitStructure.OscillatorType = RCC_OSCILLATORTYPE_LSE;
10004510:	f107 0308 	add.w	r3, r7, #8
10004514:	2204      	movs	r2, #4
10004516:	601a      	str	r2, [r3, #0]
        RCC_OscInitStructure.LSEState = (tmpreg & LSE_MASK);
10004518:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
1000451c:	f003 020b 	and.w	r2, r3, #11
10004520:	f107 0308 	add.w	r3, r7, #8
10004524:	609a      	str	r2, [r3, #8]

        RCC_OscInitStructure.PLL.PLLState = RCC_PLL_NONE;
10004526:	f107 0308 	add.w	r3, r7, #8
1000452a:	2200      	movs	r2, #0
1000452c:	625a      	str	r2, [r3, #36]	; 0x24
        RCC_OscInitStructure.PLL2.PLLState = RCC_PLL_NONE;
1000452e:	f107 0308 	add.w	r3, r7, #8
10004532:	2200      	movs	r2, #0
10004534:	661a      	str	r2, [r3, #96]	; 0x60
        RCC_OscInitStructure.PLL3.PLLState = RCC_PLL_NONE;
10004536:	f107 0308 	add.w	r3, r7, #8
1000453a:	2200      	movs	r2, #0
1000453c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        RCC_OscInitStructure.PLL4.PLLState = RCC_PLL_NONE;
10004540:	f107 0308 	add.w	r3, r7, #8
10004544:	2200      	movs	r2, #0
10004546:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
        ret = HAL_RCC_OscConfig(&RCC_OscInitStructure);
1000454a:	f107 0308 	add.w	r3, r7, #8
1000454e:	4618      	mov	r0, r3
10004550:	f7fc fbb8 	bl	10000cc4 <HAL_RCC_OscConfig>
10004554:	4603      	mov	r3, r0
10004556:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        if (ret != HAL_OK)
1000455a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
1000455e:	2b00      	cmp	r3, #0
10004560:	d002      	beq.n	10004568 <HAL_RCCEx_PeriphCLKConfig+0x1780>
        {
          return ret;
10004562:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
10004566:	e09a      	b.n	1000469e <HAL_RCCEx_PeriphCLKConfig+0x18b6>
        }

        /* Write the RTCSRC */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
10004568:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000456c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10004570:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
10004574:	1d3b      	adds	r3, r7, #4
10004576:	681b      	ldr	r3, [r3, #0]
10004578:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
1000457c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10004580:	4313      	orrs	r3, r2
10004582:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140

        /* Fill up Reserved register mask for BDCR
         * All already filled up or what shouldn't be modified must be put on the mask */
        RESERVED_BDCR_MASK = ~(RCC_BDCR_VSWRST | RCC_BDCR_RTCCKEN | RCC_BDCR_RTCSRC |
10004586:	4b4a      	ldr	r3, [pc, #296]	; (100046b0 <HAL_RCCEx_PeriphCLKConfig+0x18c8>)
10004588:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
                               RCC_BDCR_LSECSSD | RCC_BDCR_LSEDRV | RCC_BDCR_DIGBYP |
                               RCC_BDCR_LSERDY | RCC_BDCR_LSEBYP | RCC_BDCR_LSEON);

        /* Restore the BDCR context: RESERVED registers plus RCC_BDCR_LSECSSON */
        WRITE_REG(RCC->BDCR, (READ_REG(RCC->BDCR) | (tmpreg & RESERVED_BDCR_MASK)));
1000458c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004590:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
10004594:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
10004598:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
1000459c:	400b      	ands	r3, r1
1000459e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100045a2:	4313      	orrs	r3, r2
100045a4:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140

      }/* End RTCSRC changed */

      /*Enable RTC clock   */
      __HAL_RCC_RTC_ENABLE();
100045a8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100045ac:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
100045b0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100045b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
100045b8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
100045bc:	e002      	b.n	100045c4 <HAL_RCCEx_PeriphCLKConfig+0x17dc>
    }
    else
    {
      // Enable write access to Backup domain failed
      /* return the error */
      return ret;
100045be:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
100045c2:	e06c      	b.n	1000469e <HAL_RCCEx_PeriphCLKConfig+0x18b6>
    }
  }

  /*---------------------------- TIMG1 configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIMG1) ==
100045c4:	1d3b      	adds	r3, r7, #4
100045c6:	681b      	ldr	r3, [r3, #0]
100045c8:	e9d3 bc00 	ldrd	fp, ip, [r3]
100045cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
100045d0:	f04f 0200 	mov.w	r2, #0
100045d4:	ea0b 0301 	and.w	r3, fp, r1
100045d8:	ea0c 0402 	and.w	r4, ip, r2
100045dc:	4323      	orrs	r3, r4
100045de:	d027      	beq.n	10004630 <HAL_RCCEx_PeriphCLKConfig+0x1848>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMG1PRES(PeriphClkInit->TIMG1PresSelection));

    /* Set TIMG1 division factor */
    __HAL_RCC_TIMG1PRES(PeriphClkInit->TIMG1PresSelection);
100045e0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100045e4:	f8d3 3828 	ldr.w	r3, [r3, #2088]	; 0x828
100045e8:	f023 0201 	bic.w	r2, r3, #1
100045ec:	1d3b      	adds	r3, r7, #4
100045ee:	681b      	ldr	r3, [r3, #0]
100045f0:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
100045f4:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100045f8:	4313      	orrs	r3, r2
100045fa:	f8c1 3828 	str.w	r3, [r1, #2088]	; 0x828

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
100045fe:	f7fc f8ad 	bl	1000075c <HAL_GetTick>
10004602:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c

    /* Wait till TIMG1 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_TIMG1PRERDY) == RESET)
10004606:	e00a      	b.n	1000461e <HAL_RCCEx_PeriphCLKConfig+0x1836>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10004608:	f7fc f8a8 	bl	1000075c <HAL_GetTick>
1000460c:	4602      	mov	r2, r0
1000460e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
10004612:	1ad3      	subs	r3, r2, r3
10004614:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10004618:	d901      	bls.n	1000461e <HAL_RCCEx_PeriphCLKConfig+0x1836>
      {
        return HAL_TIMEOUT;
1000461a:	2303      	movs	r3, #3
1000461c:	e03f      	b.n	1000469e <HAL_RCCEx_PeriphCLKConfig+0x18b6>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_TIMG1PRERDY) == RESET)
1000461e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004622:	f8d3 3828 	ldr.w	r3, [r3, #2088]	; 0x828
10004626:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
1000462a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
1000462e:	d1eb      	bne.n	10004608 <HAL_RCCEx_PeriphCLKConfig+0x1820>
      }
    }
  }

  /*---------------------------- TIMG2 configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIMG2) ==
10004630:	1d3b      	adds	r3, r7, #4
10004632:	681b      	ldr	r3, [r3, #0]
10004634:	e9d3 bc00 	ldrd	fp, ip, [r3]
10004638:	f44f 6100 	mov.w	r1, #2048	; 0x800
1000463c:	f04f 0200 	mov.w	r2, #0
10004640:	ea0b 0301 	and.w	r3, fp, r1
10004644:	ea0c 0402 	and.w	r4, ip, r2
10004648:	4323      	orrs	r3, r4
1000464a:	d027      	beq.n	1000469c <HAL_RCCEx_PeriphCLKConfig+0x18b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMG2PRES(PeriphClkInit->TIMG2PresSelection));

    /* Set TIMG1 division factor */
    __HAL_RCC_TIMG2PRES(PeriphClkInit->TIMG2PresSelection);
1000464c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004650:	f8d3 382c 	ldr.w	r3, [r3, #2092]	; 0x82c
10004654:	f023 0201 	bic.w	r2, r3, #1
10004658:	1d3b      	adds	r3, r7, #4
1000465a:	681b      	ldr	r3, [r3, #0]
1000465c:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
10004660:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10004664:	4313      	orrs	r3, r2
10004666:	f8c1 382c 	str.w	r3, [r1, #2092]	; 0x82c

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
1000466a:	f7fc f877 	bl	1000075c <HAL_GetTick>
1000466e:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c

    /* Wait till TIMG1 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_TIMG2PRERDY) == RESET)
10004672:	e00a      	b.n	1000468a <HAL_RCCEx_PeriphCLKConfig+0x18a2>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10004674:	f7fc f872 	bl	1000075c <HAL_GetTick>
10004678:	4602      	mov	r2, r0
1000467a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
1000467e:	1ad3      	subs	r3, r2, r3
10004680:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10004684:	d901      	bls.n	1000468a <HAL_RCCEx_PeriphCLKConfig+0x18a2>
      {
        return HAL_TIMEOUT;
10004686:	2303      	movs	r3, #3
10004688:	e009      	b.n	1000469e <HAL_RCCEx_PeriphCLKConfig+0x18b6>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_TIMG2PRERDY) == RESET)
1000468a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000468e:	f8d3 382c 	ldr.w	r3, [r3, #2092]	; 0x82c
10004692:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10004696:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
1000469a:	d1eb      	bne.n	10004674 <HAL_RCCEx_PeriphCLKConfig+0x188c>
      }
    }
  }

  return HAL_OK;
1000469c:	2300      	movs	r3, #0
}
1000469e:	4618      	mov	r0, r3
100046a0:	f507 7798 	add.w	r7, r7, #304	; 0x130
100046a4:	46bd      	mov	sp, r7
100046a6:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
100046aa:	bf00      	nop
100046ac:	50001000 	.word	0x50001000
100046b0:	7fecfdc0 	.word	0x7fecfdc0

100046b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
100046b4:	b580      	push	{r7, lr}
100046b6:	b082      	sub	sp, #8
100046b8:	af00      	add	r7, sp, #0
100046ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
100046bc:	687b      	ldr	r3, [r7, #4]
100046be:	2b00      	cmp	r3, #0
100046c0:	d101      	bne.n	100046c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
100046c2:	2301      	movs	r3, #1
100046c4:	e042      	b.n	1000474c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
100046c6:	687b      	ldr	r3, [r7, #4]
100046c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
100046cc:	2b00      	cmp	r3, #0
100046ce:	d106      	bne.n	100046de <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
100046d0:	687b      	ldr	r3, [r7, #4]
100046d2:	2200      	movs	r2, #0
100046d4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
100046d8:	6878      	ldr	r0, [r7, #4]
100046da:	f7fb fe99 	bl	10000410 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
100046de:	687b      	ldr	r3, [r7, #4]
100046e0:	2224      	movs	r2, #36	; 0x24
100046e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
100046e6:	687b      	ldr	r3, [r7, #4]
100046e8:	681b      	ldr	r3, [r3, #0]
100046ea:	681a      	ldr	r2, [r3, #0]
100046ec:	687b      	ldr	r3, [r7, #4]
100046ee:	681b      	ldr	r3, [r3, #0]
100046f0:	f022 0201 	bic.w	r2, r2, #1
100046f4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
100046f6:	6878      	ldr	r0, [r7, #4]
100046f8:	f000 f82c 	bl	10004754 <UART_SetConfig>
100046fc:	4603      	mov	r3, r0
100046fe:	2b01      	cmp	r3, #1
10004700:	d101      	bne.n	10004706 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
10004702:	2301      	movs	r3, #1
10004704:	e022      	b.n	1000474c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
10004706:	687b      	ldr	r3, [r7, #4]
10004708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000470a:	2b00      	cmp	r3, #0
1000470c:	d002      	beq.n	10004714 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
1000470e:	6878      	ldr	r0, [r7, #4]
10004710:	f001 f98c 	bl	10005a2c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
10004714:	687b      	ldr	r3, [r7, #4]
10004716:	681b      	ldr	r3, [r3, #0]
10004718:	685a      	ldr	r2, [r3, #4]
1000471a:	687b      	ldr	r3, [r7, #4]
1000471c:	681b      	ldr	r3, [r3, #0]
1000471e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
10004722:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
10004724:	687b      	ldr	r3, [r7, #4]
10004726:	681b      	ldr	r3, [r3, #0]
10004728:	689a      	ldr	r2, [r3, #8]
1000472a:	687b      	ldr	r3, [r7, #4]
1000472c:	681b      	ldr	r3, [r3, #0]
1000472e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
10004732:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
10004734:	687b      	ldr	r3, [r7, #4]
10004736:	681b      	ldr	r3, [r3, #0]
10004738:	681a      	ldr	r2, [r3, #0]
1000473a:	687b      	ldr	r3, [r7, #4]
1000473c:	681b      	ldr	r3, [r3, #0]
1000473e:	f042 0201 	orr.w	r2, r2, #1
10004742:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
10004744:	6878      	ldr	r0, [r7, #4]
10004746:	f001 fa13 	bl	10005b70 <UART_CheckIdleState>
1000474a:	4603      	mov	r3, r0
}
1000474c:	4618      	mov	r0, r3
1000474e:	3708      	adds	r7, #8
10004750:	46bd      	mov	sp, r7
10004752:	bd80      	pop	{r7, pc}

10004754 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
10004754:	b580      	push	{r7, lr}
10004756:	b08e      	sub	sp, #56	; 0x38
10004758:	af00      	add	r7, sp, #0
1000475a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
1000475c:	2300      	movs	r3, #0
1000475e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_StatusTypeDef ret               = HAL_OK;
10004760:	2300      	movs	r3, #0
10004762:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
10004766:	687b      	ldr	r3, [r7, #4]
10004768:	689a      	ldr	r2, [r3, #8]
1000476a:	687b      	ldr	r3, [r7, #4]
1000476c:	691b      	ldr	r3, [r3, #16]
1000476e:	431a      	orrs	r2, r3
10004770:	687b      	ldr	r3, [r7, #4]
10004772:	695b      	ldr	r3, [r3, #20]
10004774:	431a      	orrs	r2, r3
10004776:	687b      	ldr	r3, [r7, #4]
10004778:	69db      	ldr	r3, [r3, #28]
1000477a:	4313      	orrs	r3, r2
1000477c:	62bb      	str	r3, [r7, #40]	; 0x28
  tmpreg |= (uint32_t)huart->FifoMode;
1000477e:	687b      	ldr	r3, [r7, #4]
10004780:	6e5b      	ldr	r3, [r3, #100]	; 0x64
10004782:	6aba      	ldr	r2, [r7, #40]	; 0x28
10004784:	4313      	orrs	r3, r2
10004786:	62bb      	str	r3, [r7, #40]	; 0x28
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
10004788:	687b      	ldr	r3, [r7, #4]
1000478a:	681b      	ldr	r3, [r3, #0]
1000478c:	681a      	ldr	r2, [r3, #0]
1000478e:	4bb7      	ldr	r3, [pc, #732]	; (10004a6c <UART_SetConfig+0x318>)
10004790:	4013      	ands	r3, r2
10004792:	687a      	ldr	r2, [r7, #4]
10004794:	6812      	ldr	r2, [r2, #0]
10004796:	6ab9      	ldr	r1, [r7, #40]	; 0x28
10004798:	430b      	orrs	r3, r1
1000479a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
1000479c:	687b      	ldr	r3, [r7, #4]
1000479e:	681b      	ldr	r3, [r3, #0]
100047a0:	685b      	ldr	r3, [r3, #4]
100047a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
100047a6:	687b      	ldr	r3, [r7, #4]
100047a8:	68da      	ldr	r2, [r3, #12]
100047aa:	687b      	ldr	r3, [r7, #4]
100047ac:	681b      	ldr	r3, [r3, #0]
100047ae:	430a      	orrs	r2, r1
100047b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
100047b2:	687b      	ldr	r3, [r7, #4]
100047b4:	699b      	ldr	r3, [r3, #24]
100047b6:	62bb      	str	r3, [r7, #40]	; 0x28

  tmpreg |= huart->Init.OneBitSampling;
100047b8:	687b      	ldr	r3, [r7, #4]
100047ba:	6a1b      	ldr	r3, [r3, #32]
100047bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
100047be:	4313      	orrs	r3, r2
100047c0:	62bb      	str	r3, [r7, #40]	; 0x28
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
100047c2:	687b      	ldr	r3, [r7, #4]
100047c4:	681b      	ldr	r3, [r3, #0]
100047c6:	689b      	ldr	r3, [r3, #8]
100047c8:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
100047cc:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
100047d0:	687a      	ldr	r2, [r7, #4]
100047d2:	6812      	ldr	r2, [r2, #0]
100047d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
100047d6:	430b      	orrs	r3, r1
100047d8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
100047da:	687b      	ldr	r3, [r7, #4]
100047dc:	681b      	ldr	r3, [r3, #0]
100047de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
100047e0:	f023 010f 	bic.w	r1, r3, #15
100047e4:	687b      	ldr	r3, [r7, #4]
100047e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
100047e8:	687b      	ldr	r3, [r7, #4]
100047ea:	681b      	ldr	r3, [r3, #0]
100047ec:	430a      	orrs	r2, r1
100047ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
100047f0:	687b      	ldr	r3, [r7, #4]
100047f2:	681b      	ldr	r3, [r3, #0]
100047f4:	f1b3 4fb8 	cmp.w	r3, #1543503872	; 0x5c000000
100047f8:	d133      	bne.n	10004862 <UART_SetConfig+0x10e>
100047fa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100047fe:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
10004802:	f003 0307 	and.w	r3, r3, #7
10004806:	2b05      	cmp	r3, #5
10004808:	d826      	bhi.n	10004858 <UART_SetConfig+0x104>
1000480a:	a201      	add	r2, pc, #4	; (adr r2, 10004810 <UART_SetConfig+0xbc>)
1000480c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10004810:	10004829 	.word	0x10004829
10004814:	10004831 	.word	0x10004831
10004818:	10004839 	.word	0x10004839
1000481c:	10004841 	.word	0x10004841
10004820:	10004849 	.word	0x10004849
10004824:	10004851 	.word	0x10004851
10004828:	2302      	movs	r3, #2
1000482a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
1000482e:	e193      	b.n	10004b58 <UART_SetConfig+0x404>
10004830:	2304      	movs	r3, #4
10004832:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10004836:	e18f      	b.n	10004b58 <UART_SetConfig+0x404>
10004838:	2310      	movs	r3, #16
1000483a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
1000483e:	e18b      	b.n	10004b58 <UART_SetConfig+0x404>
10004840:	2320      	movs	r3, #32
10004842:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10004846:	e187      	b.n	10004b58 <UART_SetConfig+0x404>
10004848:	2308      	movs	r3, #8
1000484a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
1000484e:	e183      	b.n	10004b58 <UART_SetConfig+0x404>
10004850:	2340      	movs	r3, #64	; 0x40
10004852:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10004856:	e17f      	b.n	10004b58 <UART_SetConfig+0x404>
10004858:	2380      	movs	r3, #128	; 0x80
1000485a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
1000485e:	bf00      	nop
10004860:	e17a      	b.n	10004b58 <UART_SetConfig+0x404>
10004862:	687b      	ldr	r3, [r7, #4]
10004864:	681b      	ldr	r3, [r3, #0]
10004866:	4a82      	ldr	r2, [pc, #520]	; (10004a70 <UART_SetConfig+0x31c>)
10004868:	4293      	cmp	r3, r2
1000486a:	d12e      	bne.n	100048ca <UART_SetConfig+0x176>
1000486c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004870:	f8d3 38e8 	ldr.w	r3, [r3, #2280]	; 0x8e8
10004874:	f003 0307 	and.w	r3, r3, #7
10004878:	2b04      	cmp	r3, #4
1000487a:	d821      	bhi.n	100048c0 <UART_SetConfig+0x16c>
1000487c:	a201      	add	r2, pc, #4	; (adr r2, 10004884 <UART_SetConfig+0x130>)
1000487e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10004882:	bf00      	nop
10004884:	10004899 	.word	0x10004899
10004888:	100048a1 	.word	0x100048a1
1000488c:	100048a9 	.word	0x100048a9
10004890:	100048b1 	.word	0x100048b1
10004894:	100048b9 	.word	0x100048b9
10004898:	2300      	movs	r3, #0
1000489a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
1000489e:	e15b      	b.n	10004b58 <UART_SetConfig+0x404>
100048a0:	2308      	movs	r3, #8
100048a2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
100048a6:	e157      	b.n	10004b58 <UART_SetConfig+0x404>
100048a8:	2310      	movs	r3, #16
100048aa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
100048ae:	e153      	b.n	10004b58 <UART_SetConfig+0x404>
100048b0:	2320      	movs	r3, #32
100048b2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
100048b6:	e14f      	b.n	10004b58 <UART_SetConfig+0x404>
100048b8:	2340      	movs	r3, #64	; 0x40
100048ba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
100048be:	e14b      	b.n	10004b58 <UART_SetConfig+0x404>
100048c0:	2380      	movs	r3, #128	; 0x80
100048c2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
100048c6:	bf00      	nop
100048c8:	e146      	b.n	10004b58 <UART_SetConfig+0x404>
100048ca:	687b      	ldr	r3, [r7, #4]
100048cc:	681b      	ldr	r3, [r3, #0]
100048ce:	4a69      	ldr	r2, [pc, #420]	; (10004a74 <UART_SetConfig+0x320>)
100048d0:	4293      	cmp	r3, r2
100048d2:	d12e      	bne.n	10004932 <UART_SetConfig+0x1de>
100048d4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100048d8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
100048dc:	f003 0307 	and.w	r3, r3, #7
100048e0:	2b04      	cmp	r3, #4
100048e2:	d821      	bhi.n	10004928 <UART_SetConfig+0x1d4>
100048e4:	a201      	add	r2, pc, #4	; (adr r2, 100048ec <UART_SetConfig+0x198>)
100048e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100048ea:	bf00      	nop
100048ec:	10004901 	.word	0x10004901
100048f0:	10004909 	.word	0x10004909
100048f4:	10004911 	.word	0x10004911
100048f8:	10004919 	.word	0x10004919
100048fc:	10004921 	.word	0x10004921
10004900:	2300      	movs	r3, #0
10004902:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10004906:	e127      	b.n	10004b58 <UART_SetConfig+0x404>
10004908:	2308      	movs	r3, #8
1000490a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
1000490e:	e123      	b.n	10004b58 <UART_SetConfig+0x404>
10004910:	2310      	movs	r3, #16
10004912:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10004916:	e11f      	b.n	10004b58 <UART_SetConfig+0x404>
10004918:	2320      	movs	r3, #32
1000491a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
1000491e:	e11b      	b.n	10004b58 <UART_SetConfig+0x404>
10004920:	2340      	movs	r3, #64	; 0x40
10004922:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10004926:	e117      	b.n	10004b58 <UART_SetConfig+0x404>
10004928:	2380      	movs	r3, #128	; 0x80
1000492a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
1000492e:	bf00      	nop
10004930:	e112      	b.n	10004b58 <UART_SetConfig+0x404>
10004932:	687b      	ldr	r3, [r7, #4]
10004934:	681b      	ldr	r3, [r3, #0]
10004936:	4a50      	ldr	r2, [pc, #320]	; (10004a78 <UART_SetConfig+0x324>)
10004938:	4293      	cmp	r3, r2
1000493a:	d12e      	bne.n	1000499a <UART_SetConfig+0x246>
1000493c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004940:	f8d3 38e8 	ldr.w	r3, [r3, #2280]	; 0x8e8
10004944:	f003 0307 	and.w	r3, r3, #7
10004948:	2b04      	cmp	r3, #4
1000494a:	d821      	bhi.n	10004990 <UART_SetConfig+0x23c>
1000494c:	a201      	add	r2, pc, #4	; (adr r2, 10004954 <UART_SetConfig+0x200>)
1000494e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10004952:	bf00      	nop
10004954:	10004969 	.word	0x10004969
10004958:	10004971 	.word	0x10004971
1000495c:	10004979 	.word	0x10004979
10004960:	10004981 	.word	0x10004981
10004964:	10004989 	.word	0x10004989
10004968:	2300      	movs	r3, #0
1000496a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
1000496e:	e0f3      	b.n	10004b58 <UART_SetConfig+0x404>
10004970:	2308      	movs	r3, #8
10004972:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10004976:	e0ef      	b.n	10004b58 <UART_SetConfig+0x404>
10004978:	2310      	movs	r3, #16
1000497a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
1000497e:	e0eb      	b.n	10004b58 <UART_SetConfig+0x404>
10004980:	2320      	movs	r3, #32
10004982:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10004986:	e0e7      	b.n	10004b58 <UART_SetConfig+0x404>
10004988:	2340      	movs	r3, #64	; 0x40
1000498a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
1000498e:	e0e3      	b.n	10004b58 <UART_SetConfig+0x404>
10004990:	2380      	movs	r3, #128	; 0x80
10004992:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10004996:	bf00      	nop
10004998:	e0de      	b.n	10004b58 <UART_SetConfig+0x404>
1000499a:	687b      	ldr	r3, [r7, #4]
1000499c:	681b      	ldr	r3, [r3, #0]
1000499e:	4a37      	ldr	r2, [pc, #220]	; (10004a7c <UART_SetConfig+0x328>)
100049a0:	4293      	cmp	r3, r2
100049a2:	d12e      	bne.n	10004a02 <UART_SetConfig+0x2ae>
100049a4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100049a8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
100049ac:	f003 0307 	and.w	r3, r3, #7
100049b0:	2b04      	cmp	r3, #4
100049b2:	d821      	bhi.n	100049f8 <UART_SetConfig+0x2a4>
100049b4:	a201      	add	r2, pc, #4	; (adr r2, 100049bc <UART_SetConfig+0x268>)
100049b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100049ba:	bf00      	nop
100049bc:	100049d1 	.word	0x100049d1
100049c0:	100049d9 	.word	0x100049d9
100049c4:	100049e1 	.word	0x100049e1
100049c8:	100049e9 	.word	0x100049e9
100049cc:	100049f1 	.word	0x100049f1
100049d0:	2300      	movs	r3, #0
100049d2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
100049d6:	e0bf      	b.n	10004b58 <UART_SetConfig+0x404>
100049d8:	2308      	movs	r3, #8
100049da:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
100049de:	e0bb      	b.n	10004b58 <UART_SetConfig+0x404>
100049e0:	2310      	movs	r3, #16
100049e2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
100049e6:	e0b7      	b.n	10004b58 <UART_SetConfig+0x404>
100049e8:	2320      	movs	r3, #32
100049ea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
100049ee:	e0b3      	b.n	10004b58 <UART_SetConfig+0x404>
100049f0:	2340      	movs	r3, #64	; 0x40
100049f2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
100049f6:	e0af      	b.n	10004b58 <UART_SetConfig+0x404>
100049f8:	2380      	movs	r3, #128	; 0x80
100049fa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
100049fe:	bf00      	nop
10004a00:	e0aa      	b.n	10004b58 <UART_SetConfig+0x404>
10004a02:	687b      	ldr	r3, [r7, #4]
10004a04:	681b      	ldr	r3, [r3, #0]
10004a06:	4a1e      	ldr	r2, [pc, #120]	; (10004a80 <UART_SetConfig+0x32c>)
10004a08:	4293      	cmp	r3, r2
10004a0a:	d13b      	bne.n	10004a84 <UART_SetConfig+0x330>
10004a0c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004a10:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	; 0x8e4
10004a14:	f003 0307 	and.w	r3, r3, #7
10004a18:	2b04      	cmp	r3, #4
10004a1a:	d821      	bhi.n	10004a60 <UART_SetConfig+0x30c>
10004a1c:	a201      	add	r2, pc, #4	; (adr r2, 10004a24 <UART_SetConfig+0x2d0>)
10004a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10004a22:	bf00      	nop
10004a24:	10004a39 	.word	0x10004a39
10004a28:	10004a41 	.word	0x10004a41
10004a2c:	10004a49 	.word	0x10004a49
10004a30:	10004a51 	.word	0x10004a51
10004a34:	10004a59 	.word	0x10004a59
10004a38:	2301      	movs	r3, #1
10004a3a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10004a3e:	e08b      	b.n	10004b58 <UART_SetConfig+0x404>
10004a40:	2308      	movs	r3, #8
10004a42:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10004a46:	e087      	b.n	10004b58 <UART_SetConfig+0x404>
10004a48:	2310      	movs	r3, #16
10004a4a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10004a4e:	e083      	b.n	10004b58 <UART_SetConfig+0x404>
10004a50:	2320      	movs	r3, #32
10004a52:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10004a56:	e07f      	b.n	10004b58 <UART_SetConfig+0x404>
10004a58:	2340      	movs	r3, #64	; 0x40
10004a5a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10004a5e:	e07b      	b.n	10004b58 <UART_SetConfig+0x404>
10004a60:	2380      	movs	r3, #128	; 0x80
10004a62:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10004a66:	bf00      	nop
10004a68:	e076      	b.n	10004b58 <UART_SetConfig+0x404>
10004a6a:	bf00      	nop
10004a6c:	cfff69f3 	.word	0xcfff69f3
10004a70:	4000e000 	.word	0x4000e000
10004a74:	4000f000 	.word	0x4000f000
10004a78:	40010000 	.word	0x40010000
10004a7c:	40011000 	.word	0x40011000
10004a80:	44003000 	.word	0x44003000
10004a84:	687b      	ldr	r3, [r7, #4]
10004a86:	681b      	ldr	r3, [r3, #0]
10004a88:	4aa9      	ldr	r2, [pc, #676]	; (10004d30 <UART_SetConfig+0x5dc>)
10004a8a:	4293      	cmp	r3, r2
10004a8c:	d12d      	bne.n	10004aea <UART_SetConfig+0x396>
10004a8e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004a92:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
10004a96:	f003 0307 	and.w	r3, r3, #7
10004a9a:	2b04      	cmp	r3, #4
10004a9c:	d820      	bhi.n	10004ae0 <UART_SetConfig+0x38c>
10004a9e:	a201      	add	r2, pc, #4	; (adr r2, 10004aa4 <UART_SetConfig+0x350>)
10004aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10004aa4:	10004ab9 	.word	0x10004ab9
10004aa8:	10004ac1 	.word	0x10004ac1
10004aac:	10004ac9 	.word	0x10004ac9
10004ab0:	10004ad1 	.word	0x10004ad1
10004ab4:	10004ad9 	.word	0x10004ad9
10004ab8:	2300      	movs	r3, #0
10004aba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10004abe:	e04b      	b.n	10004b58 <UART_SetConfig+0x404>
10004ac0:	2308      	movs	r3, #8
10004ac2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10004ac6:	e047      	b.n	10004b58 <UART_SetConfig+0x404>
10004ac8:	2310      	movs	r3, #16
10004aca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10004ace:	e043      	b.n	10004b58 <UART_SetConfig+0x404>
10004ad0:	2320      	movs	r3, #32
10004ad2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10004ad6:	e03f      	b.n	10004b58 <UART_SetConfig+0x404>
10004ad8:	2340      	movs	r3, #64	; 0x40
10004ada:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10004ade:	e03b      	b.n	10004b58 <UART_SetConfig+0x404>
10004ae0:	2380      	movs	r3, #128	; 0x80
10004ae2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10004ae6:	bf00      	nop
10004ae8:	e036      	b.n	10004b58 <UART_SetConfig+0x404>
10004aea:	687b      	ldr	r3, [r7, #4]
10004aec:	681b      	ldr	r3, [r3, #0]
10004aee:	4a91      	ldr	r2, [pc, #580]	; (10004d34 <UART_SetConfig+0x5e0>)
10004af0:	4293      	cmp	r3, r2
10004af2:	d12e      	bne.n	10004b52 <UART_SetConfig+0x3fe>
10004af4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004af8:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
10004afc:	f003 0307 	and.w	r3, r3, #7
10004b00:	2b04      	cmp	r3, #4
10004b02:	d821      	bhi.n	10004b48 <UART_SetConfig+0x3f4>
10004b04:	a201      	add	r2, pc, #4	; (adr r2, 10004b0c <UART_SetConfig+0x3b8>)
10004b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10004b0a:	bf00      	nop
10004b0c:	10004b21 	.word	0x10004b21
10004b10:	10004b29 	.word	0x10004b29
10004b14:	10004b31 	.word	0x10004b31
10004b18:	10004b39 	.word	0x10004b39
10004b1c:	10004b41 	.word	0x10004b41
10004b20:	2300      	movs	r3, #0
10004b22:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10004b26:	e017      	b.n	10004b58 <UART_SetConfig+0x404>
10004b28:	2308      	movs	r3, #8
10004b2a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10004b2e:	e013      	b.n	10004b58 <UART_SetConfig+0x404>
10004b30:	2310      	movs	r3, #16
10004b32:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10004b36:	e00f      	b.n	10004b58 <UART_SetConfig+0x404>
10004b38:	2320      	movs	r3, #32
10004b3a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10004b3e:	e00b      	b.n	10004b58 <UART_SetConfig+0x404>
10004b40:	2340      	movs	r3, #64	; 0x40
10004b42:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10004b46:	e007      	b.n	10004b58 <UART_SetConfig+0x404>
10004b48:	2380      	movs	r3, #128	; 0x80
10004b4a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10004b4e:	bf00      	nop
10004b50:	e002      	b.n	10004b58 <UART_SetConfig+0x404>
10004b52:	2380      	movs	r3, #128	; 0x80
10004b54:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
10004b58:	687b      	ldr	r3, [r7, #4]
10004b5a:	69db      	ldr	r3, [r3, #28]
10004b5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
10004b60:	f040 83b4 	bne.w	100052cc <UART_SetConfig+0xb78>
  {
    switch (clocksource)
10004b64:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
10004b68:	2b40      	cmp	r3, #64	; 0x40
10004b6a:	f200 8357 	bhi.w	1000521c <UART_SetConfig+0xac8>
10004b6e:	a201      	add	r2, pc, #4	; (adr r2, 10004b74 <UART_SetConfig+0x420>)
10004b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10004b74:	10004c79 	.word	0x10004c79
10004b78:	10004d39 	.word	0x10004d39
10004b7c:	10004df1 	.word	0x10004df1
10004b80:	1000521d 	.word	0x1000521d
10004b84:	10004ea9 	.word	0x10004ea9
10004b88:	1000521d 	.word	0x1000521d
10004b8c:	1000521d 	.word	0x1000521d
10004b90:	1000521d 	.word	0x1000521d
10004b94:	10004f65 	.word	0x10004f65
10004b98:	1000521d 	.word	0x1000521d
10004b9c:	1000521d 	.word	0x1000521d
10004ba0:	1000521d 	.word	0x1000521d
10004ba4:	1000521d 	.word	0x1000521d
10004ba8:	1000521d 	.word	0x1000521d
10004bac:	1000521d 	.word	0x1000521d
10004bb0:	1000521d 	.word	0x1000521d
10004bb4:	10005021 	.word	0x10005021
10004bb8:	1000521d 	.word	0x1000521d
10004bbc:	1000521d 	.word	0x1000521d
10004bc0:	1000521d 	.word	0x1000521d
10004bc4:	1000521d 	.word	0x1000521d
10004bc8:	1000521d 	.word	0x1000521d
10004bcc:	1000521d 	.word	0x1000521d
10004bd0:	1000521d 	.word	0x1000521d
10004bd4:	1000521d 	.word	0x1000521d
10004bd8:	1000521d 	.word	0x1000521d
10004bdc:	1000521d 	.word	0x1000521d
10004be0:	1000521d 	.word	0x1000521d
10004be4:	1000521d 	.word	0x1000521d
10004be8:	1000521d 	.word	0x1000521d
10004bec:	1000521d 	.word	0x1000521d
10004bf0:	1000521d 	.word	0x1000521d
10004bf4:	100050c9 	.word	0x100050c9
10004bf8:	1000521d 	.word	0x1000521d
10004bfc:	1000521d 	.word	0x1000521d
10004c00:	1000521d 	.word	0x1000521d
10004c04:	1000521d 	.word	0x1000521d
10004c08:	1000521d 	.word	0x1000521d
10004c0c:	1000521d 	.word	0x1000521d
10004c10:	1000521d 	.word	0x1000521d
10004c14:	1000521d 	.word	0x1000521d
10004c18:	1000521d 	.word	0x1000521d
10004c1c:	1000521d 	.word	0x1000521d
10004c20:	1000521d 	.word	0x1000521d
10004c24:	1000521d 	.word	0x1000521d
10004c28:	1000521d 	.word	0x1000521d
10004c2c:	1000521d 	.word	0x1000521d
10004c30:	1000521d 	.word	0x1000521d
10004c34:	1000521d 	.word	0x1000521d
10004c38:	1000521d 	.word	0x1000521d
10004c3c:	1000521d 	.word	0x1000521d
10004c40:	1000521d 	.word	0x1000521d
10004c44:	1000521d 	.word	0x1000521d
10004c48:	1000521d 	.word	0x1000521d
10004c4c:	1000521d 	.word	0x1000521d
10004c50:	1000521d 	.word	0x1000521d
10004c54:	1000521d 	.word	0x1000521d
10004c58:	1000521d 	.word	0x1000521d
10004c5c:	1000521d 	.word	0x1000521d
10004c60:	1000521d 	.word	0x1000521d
10004c64:	1000521d 	.word	0x1000521d
10004c68:	1000521d 	.word	0x1000521d
10004c6c:	1000521d 	.word	0x1000521d
10004c70:	1000521d 	.word	0x1000521d
10004c74:	10005175 	.word	0x10005175
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
10004c78:	f7fd fb6c 	bl	10002354 <HAL_RCC_GetPCLK1Freq>
10004c7c:	6278      	str	r0, [r7, #36]	; 0x24
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10004c7e:	687b      	ldr	r3, [r7, #4]
10004c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004c82:	2b00      	cmp	r3, #0
10004c84:	d044      	beq.n	10004d10 <UART_SetConfig+0x5bc>
10004c86:	687b      	ldr	r3, [r7, #4]
10004c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004c8a:	2b01      	cmp	r3, #1
10004c8c:	d03e      	beq.n	10004d0c <UART_SetConfig+0x5b8>
10004c8e:	687b      	ldr	r3, [r7, #4]
10004c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004c92:	2b02      	cmp	r3, #2
10004c94:	d038      	beq.n	10004d08 <UART_SetConfig+0x5b4>
10004c96:	687b      	ldr	r3, [r7, #4]
10004c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004c9a:	2b03      	cmp	r3, #3
10004c9c:	d032      	beq.n	10004d04 <UART_SetConfig+0x5b0>
10004c9e:	687b      	ldr	r3, [r7, #4]
10004ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004ca2:	2b04      	cmp	r3, #4
10004ca4:	d02c      	beq.n	10004d00 <UART_SetConfig+0x5ac>
10004ca6:	687b      	ldr	r3, [r7, #4]
10004ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004caa:	2b05      	cmp	r3, #5
10004cac:	d026      	beq.n	10004cfc <UART_SetConfig+0x5a8>
10004cae:	687b      	ldr	r3, [r7, #4]
10004cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004cb2:	2b06      	cmp	r3, #6
10004cb4:	d020      	beq.n	10004cf8 <UART_SetConfig+0x5a4>
10004cb6:	687b      	ldr	r3, [r7, #4]
10004cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004cba:	2b07      	cmp	r3, #7
10004cbc:	d01a      	beq.n	10004cf4 <UART_SetConfig+0x5a0>
10004cbe:	687b      	ldr	r3, [r7, #4]
10004cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004cc2:	2b08      	cmp	r3, #8
10004cc4:	d014      	beq.n	10004cf0 <UART_SetConfig+0x59c>
10004cc6:	687b      	ldr	r3, [r7, #4]
10004cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004cca:	2b09      	cmp	r3, #9
10004ccc:	d00e      	beq.n	10004cec <UART_SetConfig+0x598>
10004cce:	687b      	ldr	r3, [r7, #4]
10004cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004cd2:	2b0a      	cmp	r3, #10
10004cd4:	d008      	beq.n	10004ce8 <UART_SetConfig+0x594>
10004cd6:	687b      	ldr	r3, [r7, #4]
10004cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004cda:	2b0b      	cmp	r3, #11
10004cdc:	d102      	bne.n	10004ce4 <UART_SetConfig+0x590>
10004cde:	f44f 7380 	mov.w	r3, #256	; 0x100
10004ce2:	e016      	b.n	10004d12 <UART_SetConfig+0x5be>
10004ce4:	2301      	movs	r3, #1
10004ce6:	e014      	b.n	10004d12 <UART_SetConfig+0x5be>
10004ce8:	2380      	movs	r3, #128	; 0x80
10004cea:	e012      	b.n	10004d12 <UART_SetConfig+0x5be>
10004cec:	2340      	movs	r3, #64	; 0x40
10004cee:	e010      	b.n	10004d12 <UART_SetConfig+0x5be>
10004cf0:	2320      	movs	r3, #32
10004cf2:	e00e      	b.n	10004d12 <UART_SetConfig+0x5be>
10004cf4:	2310      	movs	r3, #16
10004cf6:	e00c      	b.n	10004d12 <UART_SetConfig+0x5be>
10004cf8:	230c      	movs	r3, #12
10004cfa:	e00a      	b.n	10004d12 <UART_SetConfig+0x5be>
10004cfc:	230a      	movs	r3, #10
10004cfe:	e008      	b.n	10004d12 <UART_SetConfig+0x5be>
10004d00:	2308      	movs	r3, #8
10004d02:	e006      	b.n	10004d12 <UART_SetConfig+0x5be>
10004d04:	2306      	movs	r3, #6
10004d06:	e004      	b.n	10004d12 <UART_SetConfig+0x5be>
10004d08:	2304      	movs	r3, #4
10004d0a:	e002      	b.n	10004d12 <UART_SetConfig+0x5be>
10004d0c:	2302      	movs	r3, #2
10004d0e:	e000      	b.n	10004d12 <UART_SetConfig+0x5be>
10004d10:	2301      	movs	r3, #1
10004d12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
10004d14:	fbb2 f3f3 	udiv	r3, r2, r3
10004d18:	005a      	lsls	r2, r3, #1
10004d1a:	687b      	ldr	r3, [r7, #4]
10004d1c:	685b      	ldr	r3, [r3, #4]
10004d1e:	085b      	lsrs	r3, r3, #1
10004d20:	441a      	add	r2, r3
10004d22:	687b      	ldr	r3, [r7, #4]
10004d24:	685b      	ldr	r3, [r3, #4]
10004d26:	fbb2 f3f3 	udiv	r3, r2, r3
10004d2a:	b29b      	uxth	r3, r3
10004d2c:	633b      	str	r3, [r7, #48]	; 0x30
        break;
10004d2e:	e279      	b.n	10005224 <UART_SetConfig+0xad0>
10004d30:	40018000 	.word	0x40018000
10004d34:	40019000 	.word	0x40019000
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
10004d38:	f7fd fb27 	bl	1000238a <HAL_RCC_GetPCLK2Freq>
10004d3c:	6278      	str	r0, [r7, #36]	; 0x24
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10004d3e:	687b      	ldr	r3, [r7, #4]
10004d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004d42:	2b00      	cmp	r3, #0
10004d44:	d044      	beq.n	10004dd0 <UART_SetConfig+0x67c>
10004d46:	687b      	ldr	r3, [r7, #4]
10004d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004d4a:	2b01      	cmp	r3, #1
10004d4c:	d03e      	beq.n	10004dcc <UART_SetConfig+0x678>
10004d4e:	687b      	ldr	r3, [r7, #4]
10004d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004d52:	2b02      	cmp	r3, #2
10004d54:	d038      	beq.n	10004dc8 <UART_SetConfig+0x674>
10004d56:	687b      	ldr	r3, [r7, #4]
10004d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004d5a:	2b03      	cmp	r3, #3
10004d5c:	d032      	beq.n	10004dc4 <UART_SetConfig+0x670>
10004d5e:	687b      	ldr	r3, [r7, #4]
10004d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004d62:	2b04      	cmp	r3, #4
10004d64:	d02c      	beq.n	10004dc0 <UART_SetConfig+0x66c>
10004d66:	687b      	ldr	r3, [r7, #4]
10004d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004d6a:	2b05      	cmp	r3, #5
10004d6c:	d026      	beq.n	10004dbc <UART_SetConfig+0x668>
10004d6e:	687b      	ldr	r3, [r7, #4]
10004d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004d72:	2b06      	cmp	r3, #6
10004d74:	d020      	beq.n	10004db8 <UART_SetConfig+0x664>
10004d76:	687b      	ldr	r3, [r7, #4]
10004d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004d7a:	2b07      	cmp	r3, #7
10004d7c:	d01a      	beq.n	10004db4 <UART_SetConfig+0x660>
10004d7e:	687b      	ldr	r3, [r7, #4]
10004d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004d82:	2b08      	cmp	r3, #8
10004d84:	d014      	beq.n	10004db0 <UART_SetConfig+0x65c>
10004d86:	687b      	ldr	r3, [r7, #4]
10004d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004d8a:	2b09      	cmp	r3, #9
10004d8c:	d00e      	beq.n	10004dac <UART_SetConfig+0x658>
10004d8e:	687b      	ldr	r3, [r7, #4]
10004d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004d92:	2b0a      	cmp	r3, #10
10004d94:	d008      	beq.n	10004da8 <UART_SetConfig+0x654>
10004d96:	687b      	ldr	r3, [r7, #4]
10004d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004d9a:	2b0b      	cmp	r3, #11
10004d9c:	d102      	bne.n	10004da4 <UART_SetConfig+0x650>
10004d9e:	f44f 7380 	mov.w	r3, #256	; 0x100
10004da2:	e016      	b.n	10004dd2 <UART_SetConfig+0x67e>
10004da4:	2301      	movs	r3, #1
10004da6:	e014      	b.n	10004dd2 <UART_SetConfig+0x67e>
10004da8:	2380      	movs	r3, #128	; 0x80
10004daa:	e012      	b.n	10004dd2 <UART_SetConfig+0x67e>
10004dac:	2340      	movs	r3, #64	; 0x40
10004dae:	e010      	b.n	10004dd2 <UART_SetConfig+0x67e>
10004db0:	2320      	movs	r3, #32
10004db2:	e00e      	b.n	10004dd2 <UART_SetConfig+0x67e>
10004db4:	2310      	movs	r3, #16
10004db6:	e00c      	b.n	10004dd2 <UART_SetConfig+0x67e>
10004db8:	230c      	movs	r3, #12
10004dba:	e00a      	b.n	10004dd2 <UART_SetConfig+0x67e>
10004dbc:	230a      	movs	r3, #10
10004dbe:	e008      	b.n	10004dd2 <UART_SetConfig+0x67e>
10004dc0:	2308      	movs	r3, #8
10004dc2:	e006      	b.n	10004dd2 <UART_SetConfig+0x67e>
10004dc4:	2306      	movs	r3, #6
10004dc6:	e004      	b.n	10004dd2 <UART_SetConfig+0x67e>
10004dc8:	2304      	movs	r3, #4
10004dca:	e002      	b.n	10004dd2 <UART_SetConfig+0x67e>
10004dcc:	2302      	movs	r3, #2
10004dce:	e000      	b.n	10004dd2 <UART_SetConfig+0x67e>
10004dd0:	2301      	movs	r3, #1
10004dd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
10004dd4:	fbb2 f3f3 	udiv	r3, r2, r3
10004dd8:	005a      	lsls	r2, r3, #1
10004dda:	687b      	ldr	r3, [r7, #4]
10004ddc:	685b      	ldr	r3, [r3, #4]
10004dde:	085b      	lsrs	r3, r3, #1
10004de0:	441a      	add	r2, r3
10004de2:	687b      	ldr	r3, [r7, #4]
10004de4:	685b      	ldr	r3, [r3, #4]
10004de6:	fbb2 f3f3 	udiv	r3, r2, r3
10004dea:	b29b      	uxth	r3, r3
10004dec:	633b      	str	r3, [r7, #48]	; 0x30
        break;
10004dee:	e219      	b.n	10005224 <UART_SetConfig+0xad0>
      case UART_CLOCKSOURCE_PCLK5:
        pclk = HAL_RCC_GetPCLK5Freq();
10004df0:	f7fd fae6 	bl	100023c0 <HAL_RCC_GetPCLK5Freq>
10004df4:	6278      	str	r0, [r7, #36]	; 0x24
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10004df6:	687b      	ldr	r3, [r7, #4]
10004df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004dfa:	2b00      	cmp	r3, #0
10004dfc:	d044      	beq.n	10004e88 <UART_SetConfig+0x734>
10004dfe:	687b      	ldr	r3, [r7, #4]
10004e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004e02:	2b01      	cmp	r3, #1
10004e04:	d03e      	beq.n	10004e84 <UART_SetConfig+0x730>
10004e06:	687b      	ldr	r3, [r7, #4]
10004e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004e0a:	2b02      	cmp	r3, #2
10004e0c:	d038      	beq.n	10004e80 <UART_SetConfig+0x72c>
10004e0e:	687b      	ldr	r3, [r7, #4]
10004e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004e12:	2b03      	cmp	r3, #3
10004e14:	d032      	beq.n	10004e7c <UART_SetConfig+0x728>
10004e16:	687b      	ldr	r3, [r7, #4]
10004e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004e1a:	2b04      	cmp	r3, #4
10004e1c:	d02c      	beq.n	10004e78 <UART_SetConfig+0x724>
10004e1e:	687b      	ldr	r3, [r7, #4]
10004e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004e22:	2b05      	cmp	r3, #5
10004e24:	d026      	beq.n	10004e74 <UART_SetConfig+0x720>
10004e26:	687b      	ldr	r3, [r7, #4]
10004e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004e2a:	2b06      	cmp	r3, #6
10004e2c:	d020      	beq.n	10004e70 <UART_SetConfig+0x71c>
10004e2e:	687b      	ldr	r3, [r7, #4]
10004e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004e32:	2b07      	cmp	r3, #7
10004e34:	d01a      	beq.n	10004e6c <UART_SetConfig+0x718>
10004e36:	687b      	ldr	r3, [r7, #4]
10004e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004e3a:	2b08      	cmp	r3, #8
10004e3c:	d014      	beq.n	10004e68 <UART_SetConfig+0x714>
10004e3e:	687b      	ldr	r3, [r7, #4]
10004e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004e42:	2b09      	cmp	r3, #9
10004e44:	d00e      	beq.n	10004e64 <UART_SetConfig+0x710>
10004e46:	687b      	ldr	r3, [r7, #4]
10004e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004e4a:	2b0a      	cmp	r3, #10
10004e4c:	d008      	beq.n	10004e60 <UART_SetConfig+0x70c>
10004e4e:	687b      	ldr	r3, [r7, #4]
10004e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004e52:	2b0b      	cmp	r3, #11
10004e54:	d102      	bne.n	10004e5c <UART_SetConfig+0x708>
10004e56:	f44f 7380 	mov.w	r3, #256	; 0x100
10004e5a:	e016      	b.n	10004e8a <UART_SetConfig+0x736>
10004e5c:	2301      	movs	r3, #1
10004e5e:	e014      	b.n	10004e8a <UART_SetConfig+0x736>
10004e60:	2380      	movs	r3, #128	; 0x80
10004e62:	e012      	b.n	10004e8a <UART_SetConfig+0x736>
10004e64:	2340      	movs	r3, #64	; 0x40
10004e66:	e010      	b.n	10004e8a <UART_SetConfig+0x736>
10004e68:	2320      	movs	r3, #32
10004e6a:	e00e      	b.n	10004e8a <UART_SetConfig+0x736>
10004e6c:	2310      	movs	r3, #16
10004e6e:	e00c      	b.n	10004e8a <UART_SetConfig+0x736>
10004e70:	230c      	movs	r3, #12
10004e72:	e00a      	b.n	10004e8a <UART_SetConfig+0x736>
10004e74:	230a      	movs	r3, #10
10004e76:	e008      	b.n	10004e8a <UART_SetConfig+0x736>
10004e78:	2308      	movs	r3, #8
10004e7a:	e006      	b.n	10004e8a <UART_SetConfig+0x736>
10004e7c:	2306      	movs	r3, #6
10004e7e:	e004      	b.n	10004e8a <UART_SetConfig+0x736>
10004e80:	2304      	movs	r3, #4
10004e82:	e002      	b.n	10004e8a <UART_SetConfig+0x736>
10004e84:	2302      	movs	r3, #2
10004e86:	e000      	b.n	10004e8a <UART_SetConfig+0x736>
10004e88:	2301      	movs	r3, #1
10004e8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
10004e8c:	fbb2 f3f3 	udiv	r3, r2, r3
10004e90:	005a      	lsls	r2, r3, #1
10004e92:	687b      	ldr	r3, [r7, #4]
10004e94:	685b      	ldr	r3, [r3, #4]
10004e96:	085b      	lsrs	r3, r3, #1
10004e98:	441a      	add	r2, r3
10004e9a:	687b      	ldr	r3, [r7, #4]
10004e9c:	685b      	ldr	r3, [r3, #4]
10004e9e:	fbb2 f3f3 	udiv	r3, r2, r3
10004ea2:	b29b      	uxth	r3, r3
10004ea4:	633b      	str	r3, [r7, #48]	; 0x30
        break;
10004ea6:	e1bd      	b.n	10005224 <UART_SetConfig+0xad0>
      case UART_CLOCKSOURCE_PLL3Q:
        HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10004ea8:	f107 0314 	add.w	r3, r7, #20
10004eac:	4618      	mov	r0, r3
10004eae:	f7fd f84f 	bl	10001f50 <HAL_RCC_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10004eb2:	69ba      	ldr	r2, [r7, #24]
10004eb4:	687b      	ldr	r3, [r7, #4]
10004eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004eb8:	2b00      	cmp	r3, #0
10004eba:	d044      	beq.n	10004f46 <UART_SetConfig+0x7f2>
10004ebc:	687b      	ldr	r3, [r7, #4]
10004ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004ec0:	2b01      	cmp	r3, #1
10004ec2:	d03e      	beq.n	10004f42 <UART_SetConfig+0x7ee>
10004ec4:	687b      	ldr	r3, [r7, #4]
10004ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004ec8:	2b02      	cmp	r3, #2
10004eca:	d038      	beq.n	10004f3e <UART_SetConfig+0x7ea>
10004ecc:	687b      	ldr	r3, [r7, #4]
10004ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004ed0:	2b03      	cmp	r3, #3
10004ed2:	d032      	beq.n	10004f3a <UART_SetConfig+0x7e6>
10004ed4:	687b      	ldr	r3, [r7, #4]
10004ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004ed8:	2b04      	cmp	r3, #4
10004eda:	d02c      	beq.n	10004f36 <UART_SetConfig+0x7e2>
10004edc:	687b      	ldr	r3, [r7, #4]
10004ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004ee0:	2b05      	cmp	r3, #5
10004ee2:	d026      	beq.n	10004f32 <UART_SetConfig+0x7de>
10004ee4:	687b      	ldr	r3, [r7, #4]
10004ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004ee8:	2b06      	cmp	r3, #6
10004eea:	d020      	beq.n	10004f2e <UART_SetConfig+0x7da>
10004eec:	687b      	ldr	r3, [r7, #4]
10004eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004ef0:	2b07      	cmp	r3, #7
10004ef2:	d01a      	beq.n	10004f2a <UART_SetConfig+0x7d6>
10004ef4:	687b      	ldr	r3, [r7, #4]
10004ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004ef8:	2b08      	cmp	r3, #8
10004efa:	d014      	beq.n	10004f26 <UART_SetConfig+0x7d2>
10004efc:	687b      	ldr	r3, [r7, #4]
10004efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004f00:	2b09      	cmp	r3, #9
10004f02:	d00e      	beq.n	10004f22 <UART_SetConfig+0x7ce>
10004f04:	687b      	ldr	r3, [r7, #4]
10004f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004f08:	2b0a      	cmp	r3, #10
10004f0a:	d008      	beq.n	10004f1e <UART_SetConfig+0x7ca>
10004f0c:	687b      	ldr	r3, [r7, #4]
10004f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004f10:	2b0b      	cmp	r3, #11
10004f12:	d102      	bne.n	10004f1a <UART_SetConfig+0x7c6>
10004f14:	f44f 7380 	mov.w	r3, #256	; 0x100
10004f18:	e016      	b.n	10004f48 <UART_SetConfig+0x7f4>
10004f1a:	2301      	movs	r3, #1
10004f1c:	e014      	b.n	10004f48 <UART_SetConfig+0x7f4>
10004f1e:	2380      	movs	r3, #128	; 0x80
10004f20:	e012      	b.n	10004f48 <UART_SetConfig+0x7f4>
10004f22:	2340      	movs	r3, #64	; 0x40
10004f24:	e010      	b.n	10004f48 <UART_SetConfig+0x7f4>
10004f26:	2320      	movs	r3, #32
10004f28:	e00e      	b.n	10004f48 <UART_SetConfig+0x7f4>
10004f2a:	2310      	movs	r3, #16
10004f2c:	e00c      	b.n	10004f48 <UART_SetConfig+0x7f4>
10004f2e:	230c      	movs	r3, #12
10004f30:	e00a      	b.n	10004f48 <UART_SetConfig+0x7f4>
10004f32:	230a      	movs	r3, #10
10004f34:	e008      	b.n	10004f48 <UART_SetConfig+0x7f4>
10004f36:	2308      	movs	r3, #8
10004f38:	e006      	b.n	10004f48 <UART_SetConfig+0x7f4>
10004f3a:	2306      	movs	r3, #6
10004f3c:	e004      	b.n	10004f48 <UART_SetConfig+0x7f4>
10004f3e:	2304      	movs	r3, #4
10004f40:	e002      	b.n	10004f48 <UART_SetConfig+0x7f4>
10004f42:	2302      	movs	r3, #2
10004f44:	e000      	b.n	10004f48 <UART_SetConfig+0x7f4>
10004f46:	2301      	movs	r3, #1
10004f48:	fbb2 f3f3 	udiv	r3, r2, r3
10004f4c:	005a      	lsls	r2, r3, #1
10004f4e:	687b      	ldr	r3, [r7, #4]
10004f50:	685b      	ldr	r3, [r3, #4]
10004f52:	085b      	lsrs	r3, r3, #1
10004f54:	441a      	add	r2, r3
10004f56:	687b      	ldr	r3, [r7, #4]
10004f58:	685b      	ldr	r3, [r3, #4]
10004f5a:	fbb2 f3f3 	udiv	r3, r2, r3
10004f5e:	b29b      	uxth	r3, r3
10004f60:	633b      	str	r3, [r7, #48]	; 0x30
        break;
10004f62:	e15f      	b.n	10005224 <UART_SetConfig+0xad0>
      case UART_CLOCKSOURCE_PLL4Q:
        HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10004f64:	f107 0308 	add.w	r3, r7, #8
10004f68:	4618      	mov	r0, r3
10004f6a:	f7fd f8eb 	bl	10002144 <HAL_RCC_GetPLL4ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll4_clocks.PLL4_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10004f6e:	68fa      	ldr	r2, [r7, #12]
10004f70:	687b      	ldr	r3, [r7, #4]
10004f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004f74:	2b00      	cmp	r3, #0
10004f76:	d044      	beq.n	10005002 <UART_SetConfig+0x8ae>
10004f78:	687b      	ldr	r3, [r7, #4]
10004f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004f7c:	2b01      	cmp	r3, #1
10004f7e:	d03e      	beq.n	10004ffe <UART_SetConfig+0x8aa>
10004f80:	687b      	ldr	r3, [r7, #4]
10004f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004f84:	2b02      	cmp	r3, #2
10004f86:	d038      	beq.n	10004ffa <UART_SetConfig+0x8a6>
10004f88:	687b      	ldr	r3, [r7, #4]
10004f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004f8c:	2b03      	cmp	r3, #3
10004f8e:	d032      	beq.n	10004ff6 <UART_SetConfig+0x8a2>
10004f90:	687b      	ldr	r3, [r7, #4]
10004f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004f94:	2b04      	cmp	r3, #4
10004f96:	d02c      	beq.n	10004ff2 <UART_SetConfig+0x89e>
10004f98:	687b      	ldr	r3, [r7, #4]
10004f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004f9c:	2b05      	cmp	r3, #5
10004f9e:	d026      	beq.n	10004fee <UART_SetConfig+0x89a>
10004fa0:	687b      	ldr	r3, [r7, #4]
10004fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004fa4:	2b06      	cmp	r3, #6
10004fa6:	d020      	beq.n	10004fea <UART_SetConfig+0x896>
10004fa8:	687b      	ldr	r3, [r7, #4]
10004faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004fac:	2b07      	cmp	r3, #7
10004fae:	d01a      	beq.n	10004fe6 <UART_SetConfig+0x892>
10004fb0:	687b      	ldr	r3, [r7, #4]
10004fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004fb4:	2b08      	cmp	r3, #8
10004fb6:	d014      	beq.n	10004fe2 <UART_SetConfig+0x88e>
10004fb8:	687b      	ldr	r3, [r7, #4]
10004fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004fbc:	2b09      	cmp	r3, #9
10004fbe:	d00e      	beq.n	10004fde <UART_SetConfig+0x88a>
10004fc0:	687b      	ldr	r3, [r7, #4]
10004fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004fc4:	2b0a      	cmp	r3, #10
10004fc6:	d008      	beq.n	10004fda <UART_SetConfig+0x886>
10004fc8:	687b      	ldr	r3, [r7, #4]
10004fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10004fcc:	2b0b      	cmp	r3, #11
10004fce:	d102      	bne.n	10004fd6 <UART_SetConfig+0x882>
10004fd0:	f44f 7380 	mov.w	r3, #256	; 0x100
10004fd4:	e016      	b.n	10005004 <UART_SetConfig+0x8b0>
10004fd6:	2301      	movs	r3, #1
10004fd8:	e014      	b.n	10005004 <UART_SetConfig+0x8b0>
10004fda:	2380      	movs	r3, #128	; 0x80
10004fdc:	e012      	b.n	10005004 <UART_SetConfig+0x8b0>
10004fde:	2340      	movs	r3, #64	; 0x40
10004fe0:	e010      	b.n	10005004 <UART_SetConfig+0x8b0>
10004fe2:	2320      	movs	r3, #32
10004fe4:	e00e      	b.n	10005004 <UART_SetConfig+0x8b0>
10004fe6:	2310      	movs	r3, #16
10004fe8:	e00c      	b.n	10005004 <UART_SetConfig+0x8b0>
10004fea:	230c      	movs	r3, #12
10004fec:	e00a      	b.n	10005004 <UART_SetConfig+0x8b0>
10004fee:	230a      	movs	r3, #10
10004ff0:	e008      	b.n	10005004 <UART_SetConfig+0x8b0>
10004ff2:	2308      	movs	r3, #8
10004ff4:	e006      	b.n	10005004 <UART_SetConfig+0x8b0>
10004ff6:	2306      	movs	r3, #6
10004ff8:	e004      	b.n	10005004 <UART_SetConfig+0x8b0>
10004ffa:	2304      	movs	r3, #4
10004ffc:	e002      	b.n	10005004 <UART_SetConfig+0x8b0>
10004ffe:	2302      	movs	r3, #2
10005000:	e000      	b.n	10005004 <UART_SetConfig+0x8b0>
10005002:	2301      	movs	r3, #1
10005004:	fbb2 f3f3 	udiv	r3, r2, r3
10005008:	005a      	lsls	r2, r3, #1
1000500a:	687b      	ldr	r3, [r7, #4]
1000500c:	685b      	ldr	r3, [r3, #4]
1000500e:	085b      	lsrs	r3, r3, #1
10005010:	441a      	add	r2, r3
10005012:	687b      	ldr	r3, [r7, #4]
10005014:	685b      	ldr	r3, [r3, #4]
10005016:	fbb2 f3f3 	udiv	r3, r2, r3
1000501a:	b29b      	uxth	r3, r3
1000501c:	633b      	str	r3, [r7, #48]	; 0x30
        break;
1000501e:	e101      	b.n	10005224 <UART_SetConfig+0xad0>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10005020:	687b      	ldr	r3, [r7, #4]
10005022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005024:	2b00      	cmp	r3, #0
10005026:	d043      	beq.n	100050b0 <UART_SetConfig+0x95c>
10005028:	687b      	ldr	r3, [r7, #4]
1000502a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000502c:	2b01      	cmp	r3, #1
1000502e:	d03d      	beq.n	100050ac <UART_SetConfig+0x958>
10005030:	687b      	ldr	r3, [r7, #4]
10005032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005034:	2b02      	cmp	r3, #2
10005036:	d037      	beq.n	100050a8 <UART_SetConfig+0x954>
10005038:	687b      	ldr	r3, [r7, #4]
1000503a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000503c:	2b03      	cmp	r3, #3
1000503e:	d031      	beq.n	100050a4 <UART_SetConfig+0x950>
10005040:	687b      	ldr	r3, [r7, #4]
10005042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005044:	2b04      	cmp	r3, #4
10005046:	d02b      	beq.n	100050a0 <UART_SetConfig+0x94c>
10005048:	687b      	ldr	r3, [r7, #4]
1000504a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000504c:	2b05      	cmp	r3, #5
1000504e:	d025      	beq.n	1000509c <UART_SetConfig+0x948>
10005050:	687b      	ldr	r3, [r7, #4]
10005052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005054:	2b06      	cmp	r3, #6
10005056:	d01f      	beq.n	10005098 <UART_SetConfig+0x944>
10005058:	687b      	ldr	r3, [r7, #4]
1000505a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000505c:	2b07      	cmp	r3, #7
1000505e:	d019      	beq.n	10005094 <UART_SetConfig+0x940>
10005060:	687b      	ldr	r3, [r7, #4]
10005062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005064:	2b08      	cmp	r3, #8
10005066:	d013      	beq.n	10005090 <UART_SetConfig+0x93c>
10005068:	687b      	ldr	r3, [r7, #4]
1000506a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000506c:	2b09      	cmp	r3, #9
1000506e:	d00d      	beq.n	1000508c <UART_SetConfig+0x938>
10005070:	687b      	ldr	r3, [r7, #4]
10005072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005074:	2b0a      	cmp	r3, #10
10005076:	d007      	beq.n	10005088 <UART_SetConfig+0x934>
10005078:	687b      	ldr	r3, [r7, #4]
1000507a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000507c:	2b0b      	cmp	r3, #11
1000507e:	d101      	bne.n	10005084 <UART_SetConfig+0x930>
10005080:	4b77      	ldr	r3, [pc, #476]	; (10005260 <UART_SetConfig+0xb0c>)
10005082:	e016      	b.n	100050b2 <UART_SetConfig+0x95e>
10005084:	4b77      	ldr	r3, [pc, #476]	; (10005264 <UART_SetConfig+0xb10>)
10005086:	e014      	b.n	100050b2 <UART_SetConfig+0x95e>
10005088:	4b77      	ldr	r3, [pc, #476]	; (10005268 <UART_SetConfig+0xb14>)
1000508a:	e012      	b.n	100050b2 <UART_SetConfig+0x95e>
1000508c:	4b77      	ldr	r3, [pc, #476]	; (1000526c <UART_SetConfig+0xb18>)
1000508e:	e010      	b.n	100050b2 <UART_SetConfig+0x95e>
10005090:	4b77      	ldr	r3, [pc, #476]	; (10005270 <UART_SetConfig+0xb1c>)
10005092:	e00e      	b.n	100050b2 <UART_SetConfig+0x95e>
10005094:	4b77      	ldr	r3, [pc, #476]	; (10005274 <UART_SetConfig+0xb20>)
10005096:	e00c      	b.n	100050b2 <UART_SetConfig+0x95e>
10005098:	4b77      	ldr	r3, [pc, #476]	; (10005278 <UART_SetConfig+0xb24>)
1000509a:	e00a      	b.n	100050b2 <UART_SetConfig+0x95e>
1000509c:	4b77      	ldr	r3, [pc, #476]	; (1000527c <UART_SetConfig+0xb28>)
1000509e:	e008      	b.n	100050b2 <UART_SetConfig+0x95e>
100050a0:	4b77      	ldr	r3, [pc, #476]	; (10005280 <UART_SetConfig+0xb2c>)
100050a2:	e006      	b.n	100050b2 <UART_SetConfig+0x95e>
100050a4:	4b77      	ldr	r3, [pc, #476]	; (10005284 <UART_SetConfig+0xb30>)
100050a6:	e004      	b.n	100050b2 <UART_SetConfig+0x95e>
100050a8:	4b77      	ldr	r3, [pc, #476]	; (10005288 <UART_SetConfig+0xb34>)
100050aa:	e002      	b.n	100050b2 <UART_SetConfig+0x95e>
100050ac:	4b77      	ldr	r3, [pc, #476]	; (1000528c <UART_SetConfig+0xb38>)
100050ae:	e000      	b.n	100050b2 <UART_SetConfig+0x95e>
100050b0:	4b6c      	ldr	r3, [pc, #432]	; (10005264 <UART_SetConfig+0xb10>)
100050b2:	687a      	ldr	r2, [r7, #4]
100050b4:	6852      	ldr	r2, [r2, #4]
100050b6:	0852      	lsrs	r2, r2, #1
100050b8:	441a      	add	r2, r3
100050ba:	687b      	ldr	r3, [r7, #4]
100050bc:	685b      	ldr	r3, [r3, #4]
100050be:	fbb2 f3f3 	udiv	r3, r2, r3
100050c2:	b29b      	uxth	r3, r3
100050c4:	633b      	str	r3, [r7, #48]	; 0x30
        break;
100050c6:	e0ad      	b.n	10005224 <UART_SetConfig+0xad0>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
100050c8:	687b      	ldr	r3, [r7, #4]
100050ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100050cc:	2b00      	cmp	r3, #0
100050ce:	d045      	beq.n	1000515c <UART_SetConfig+0xa08>
100050d0:	687b      	ldr	r3, [r7, #4]
100050d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100050d4:	2b01      	cmp	r3, #1
100050d6:	d03f      	beq.n	10005158 <UART_SetConfig+0xa04>
100050d8:	687b      	ldr	r3, [r7, #4]
100050da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100050dc:	2b02      	cmp	r3, #2
100050de:	d039      	beq.n	10005154 <UART_SetConfig+0xa00>
100050e0:	687b      	ldr	r3, [r7, #4]
100050e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100050e4:	2b03      	cmp	r3, #3
100050e6:	d033      	beq.n	10005150 <UART_SetConfig+0x9fc>
100050e8:	687b      	ldr	r3, [r7, #4]
100050ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100050ec:	2b04      	cmp	r3, #4
100050ee:	d02d      	beq.n	1000514c <UART_SetConfig+0x9f8>
100050f0:	687b      	ldr	r3, [r7, #4]
100050f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100050f4:	2b05      	cmp	r3, #5
100050f6:	d027      	beq.n	10005148 <UART_SetConfig+0x9f4>
100050f8:	687b      	ldr	r3, [r7, #4]
100050fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100050fc:	2b06      	cmp	r3, #6
100050fe:	d021      	beq.n	10005144 <UART_SetConfig+0x9f0>
10005100:	687b      	ldr	r3, [r7, #4]
10005102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005104:	2b07      	cmp	r3, #7
10005106:	d01b      	beq.n	10005140 <UART_SetConfig+0x9ec>
10005108:	687b      	ldr	r3, [r7, #4]
1000510a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000510c:	2b08      	cmp	r3, #8
1000510e:	d015      	beq.n	1000513c <UART_SetConfig+0x9e8>
10005110:	687b      	ldr	r3, [r7, #4]
10005112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005114:	2b09      	cmp	r3, #9
10005116:	d00f      	beq.n	10005138 <UART_SetConfig+0x9e4>
10005118:	687b      	ldr	r3, [r7, #4]
1000511a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000511c:	2b0a      	cmp	r3, #10
1000511e:	d008      	beq.n	10005132 <UART_SetConfig+0x9de>
10005120:	687b      	ldr	r3, [r7, #4]
10005122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005124:	2b0b      	cmp	r3, #11
10005126:	d102      	bne.n	1000512e <UART_SetConfig+0x9da>
10005128:	f647 2312 	movw	r3, #31250	; 0x7a12
1000512c:	e017      	b.n	1000515e <UART_SetConfig+0xa0a>
1000512e:	4b51      	ldr	r3, [pc, #324]	; (10005274 <UART_SetConfig+0xb20>)
10005130:	e015      	b.n	1000515e <UART_SetConfig+0xa0a>
10005132:	f24f 4324 	movw	r3, #62500	; 0xf424
10005136:	e012      	b.n	1000515e <UART_SetConfig+0xa0a>
10005138:	4b55      	ldr	r3, [pc, #340]	; (10005290 <UART_SetConfig+0xb3c>)
1000513a:	e010      	b.n	1000515e <UART_SetConfig+0xa0a>
1000513c:	4b55      	ldr	r3, [pc, #340]	; (10005294 <UART_SetConfig+0xb40>)
1000513e:	e00e      	b.n	1000515e <UART_SetConfig+0xa0a>
10005140:	4b47      	ldr	r3, [pc, #284]	; (10005260 <UART_SetConfig+0xb0c>)
10005142:	e00c      	b.n	1000515e <UART_SetConfig+0xa0a>
10005144:	4b54      	ldr	r3, [pc, #336]	; (10005298 <UART_SetConfig+0xb44>)
10005146:	e00a      	b.n	1000515e <UART_SetConfig+0xa0a>
10005148:	4b54      	ldr	r3, [pc, #336]	; (1000529c <UART_SetConfig+0xb48>)
1000514a:	e008      	b.n	1000515e <UART_SetConfig+0xa0a>
1000514c:	4b46      	ldr	r3, [pc, #280]	; (10005268 <UART_SetConfig+0xb14>)
1000514e:	e006      	b.n	1000515e <UART_SetConfig+0xa0a>
10005150:	4b53      	ldr	r3, [pc, #332]	; (100052a0 <UART_SetConfig+0xb4c>)
10005152:	e004      	b.n	1000515e <UART_SetConfig+0xa0a>
10005154:	4b45      	ldr	r3, [pc, #276]	; (1000526c <UART_SetConfig+0xb18>)
10005156:	e002      	b.n	1000515e <UART_SetConfig+0xa0a>
10005158:	4b45      	ldr	r3, [pc, #276]	; (10005270 <UART_SetConfig+0xb1c>)
1000515a:	e000      	b.n	1000515e <UART_SetConfig+0xa0a>
1000515c:	4b45      	ldr	r3, [pc, #276]	; (10005274 <UART_SetConfig+0xb20>)
1000515e:	687a      	ldr	r2, [r7, #4]
10005160:	6852      	ldr	r2, [r2, #4]
10005162:	0852      	lsrs	r2, r2, #1
10005164:	441a      	add	r2, r3
10005166:	687b      	ldr	r3, [r7, #4]
10005168:	685b      	ldr	r3, [r3, #4]
1000516a:	fbb2 f3f3 	udiv	r3, r2, r3
1000516e:	b29b      	uxth	r3, r3
10005170:	633b      	str	r3, [r7, #48]	; 0x30
        break;
10005172:	e057      	b.n	10005224 <UART_SetConfig+0xad0>
      case UART_CLOCKSOURCE_HSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10005174:	687b      	ldr	r3, [r7, #4]
10005176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005178:	2b00      	cmp	r3, #0
1000517a:	d043      	beq.n	10005204 <UART_SetConfig+0xab0>
1000517c:	687b      	ldr	r3, [r7, #4]
1000517e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005180:	2b01      	cmp	r3, #1
10005182:	d03d      	beq.n	10005200 <UART_SetConfig+0xaac>
10005184:	687b      	ldr	r3, [r7, #4]
10005186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005188:	2b02      	cmp	r3, #2
1000518a:	d037      	beq.n	100051fc <UART_SetConfig+0xaa8>
1000518c:	687b      	ldr	r3, [r7, #4]
1000518e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005190:	2b03      	cmp	r3, #3
10005192:	d031      	beq.n	100051f8 <UART_SetConfig+0xaa4>
10005194:	687b      	ldr	r3, [r7, #4]
10005196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005198:	2b04      	cmp	r3, #4
1000519a:	d02b      	beq.n	100051f4 <UART_SetConfig+0xaa0>
1000519c:	687b      	ldr	r3, [r7, #4]
1000519e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100051a0:	2b05      	cmp	r3, #5
100051a2:	d025      	beq.n	100051f0 <UART_SetConfig+0xa9c>
100051a4:	687b      	ldr	r3, [r7, #4]
100051a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100051a8:	2b06      	cmp	r3, #6
100051aa:	d01f      	beq.n	100051ec <UART_SetConfig+0xa98>
100051ac:	687b      	ldr	r3, [r7, #4]
100051ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100051b0:	2b07      	cmp	r3, #7
100051b2:	d019      	beq.n	100051e8 <UART_SetConfig+0xa94>
100051b4:	687b      	ldr	r3, [r7, #4]
100051b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100051b8:	2b08      	cmp	r3, #8
100051ba:	d013      	beq.n	100051e4 <UART_SetConfig+0xa90>
100051bc:	687b      	ldr	r3, [r7, #4]
100051be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100051c0:	2b09      	cmp	r3, #9
100051c2:	d00d      	beq.n	100051e0 <UART_SetConfig+0xa8c>
100051c4:	687b      	ldr	r3, [r7, #4]
100051c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100051c8:	2b0a      	cmp	r3, #10
100051ca:	d007      	beq.n	100051dc <UART_SetConfig+0xa88>
100051cc:	687b      	ldr	r3, [r7, #4]
100051ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100051d0:	2b0b      	cmp	r3, #11
100051d2:	d101      	bne.n	100051d8 <UART_SetConfig+0xa84>
100051d4:	4b33      	ldr	r3, [pc, #204]	; (100052a4 <UART_SetConfig+0xb50>)
100051d6:	e016      	b.n	10005206 <UART_SetConfig+0xab2>
100051d8:	4b33      	ldr	r3, [pc, #204]	; (100052a8 <UART_SetConfig+0xb54>)
100051da:	e014      	b.n	10005206 <UART_SetConfig+0xab2>
100051dc:	4b33      	ldr	r3, [pc, #204]	; (100052ac <UART_SetConfig+0xb58>)
100051de:	e012      	b.n	10005206 <UART_SetConfig+0xab2>
100051e0:	4b33      	ldr	r3, [pc, #204]	; (100052b0 <UART_SetConfig+0xb5c>)
100051e2:	e010      	b.n	10005206 <UART_SetConfig+0xab2>
100051e4:	4b33      	ldr	r3, [pc, #204]	; (100052b4 <UART_SetConfig+0xb60>)
100051e6:	e00e      	b.n	10005206 <UART_SetConfig+0xab2>
100051e8:	4b33      	ldr	r3, [pc, #204]	; (100052b8 <UART_SetConfig+0xb64>)
100051ea:	e00c      	b.n	10005206 <UART_SetConfig+0xab2>
100051ec:	4b20      	ldr	r3, [pc, #128]	; (10005270 <UART_SetConfig+0xb1c>)
100051ee:	e00a      	b.n	10005206 <UART_SetConfig+0xab2>
100051f0:	4b32      	ldr	r3, [pc, #200]	; (100052bc <UART_SetConfig+0xb68>)
100051f2:	e008      	b.n	10005206 <UART_SetConfig+0xab2>
100051f4:	4b32      	ldr	r3, [pc, #200]	; (100052c0 <UART_SetConfig+0xb6c>)
100051f6:	e006      	b.n	10005206 <UART_SetConfig+0xab2>
100051f8:	4b1e      	ldr	r3, [pc, #120]	; (10005274 <UART_SetConfig+0xb20>)
100051fa:	e004      	b.n	10005206 <UART_SetConfig+0xab2>
100051fc:	4b31      	ldr	r3, [pc, #196]	; (100052c4 <UART_SetConfig+0xb70>)
100051fe:	e002      	b.n	10005206 <UART_SetConfig+0xab2>
10005200:	4b31      	ldr	r3, [pc, #196]	; (100052c8 <UART_SetConfig+0xb74>)
10005202:	e000      	b.n	10005206 <UART_SetConfig+0xab2>
10005204:	4b28      	ldr	r3, [pc, #160]	; (100052a8 <UART_SetConfig+0xb54>)
10005206:	687a      	ldr	r2, [r7, #4]
10005208:	6852      	ldr	r2, [r2, #4]
1000520a:	0852      	lsrs	r2, r2, #1
1000520c:	441a      	add	r2, r3
1000520e:	687b      	ldr	r3, [r7, #4]
10005210:	685b      	ldr	r3, [r3, #4]
10005212:	fbb2 f3f3 	udiv	r3, r2, r3
10005216:	b29b      	uxth	r3, r3
10005218:	633b      	str	r3, [r7, #48]	; 0x30
        break;
1000521a:	e003      	b.n	10005224 <UART_SetConfig+0xad0>
      default:
        ret = HAL_ERROR;
1000521c:	2301      	movs	r3, #1
1000521e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        break;
10005222:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
10005224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10005226:	2b0f      	cmp	r3, #15
10005228:	d916      	bls.n	10005258 <UART_SetConfig+0xb04>
1000522a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000522c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
10005230:	d212      	bcs.n	10005258 <UART_SetConfig+0xb04>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
10005232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10005234:	b29b      	uxth	r3, r3
10005236:	f023 030f 	bic.w	r3, r3, #15
1000523a:	847b      	strh	r3, [r7, #34]	; 0x22
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
1000523c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000523e:	085b      	lsrs	r3, r3, #1
10005240:	b29b      	uxth	r3, r3
10005242:	f003 0307 	and.w	r3, r3, #7
10005246:	b29a      	uxth	r2, r3
10005248:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
1000524a:	4313      	orrs	r3, r2
1000524c:	847b      	strh	r3, [r7, #34]	; 0x22
      huart->Instance->BRR = brrtemp;
1000524e:	687b      	ldr	r3, [r7, #4]
10005250:	681b      	ldr	r3, [r3, #0]
10005252:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
10005254:	60da      	str	r2, [r3, #12]
10005256:	e3a0      	b.n	1000599a <UART_SetConfig+0x1246>
    }
    else
    {
      ret = HAL_ERROR;
10005258:	2301      	movs	r3, #1
1000525a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
1000525e:	e39c      	b.n	1000599a <UART_SetConfig+0x1246>
10005260:	0007a120 	.word	0x0007a120
10005264:	07a12000 	.word	0x07a12000
10005268:	000f4240 	.word	0x000f4240
1000526c:	001e8480 	.word	0x001e8480
10005270:	003d0900 	.word	0x003d0900
10005274:	007a1200 	.word	0x007a1200
10005278:	00a2c2aa 	.word	0x00a2c2aa
1000527c:	00c35000 	.word	0x00c35000
10005280:	00f42400 	.word	0x00f42400
10005284:	01458554 	.word	0x01458554
10005288:	01e84800 	.word	0x01e84800
1000528c:	03d09000 	.word	0x03d09000
10005290:	0001e848 	.word	0x0001e848
10005294:	0003d090 	.word	0x0003d090
10005298:	000a2c2a 	.word	0x000a2c2a
1000529c:	000c3500 	.word	0x000c3500
100052a0:	00145854 	.word	0x00145854
100052a4:	0002dc6c 	.word	0x0002dc6c
100052a8:	02dc6c00 	.word	0x02dc6c00
100052ac:	0005b8d8 	.word	0x0005b8d8
100052b0:	000b71b0 	.word	0x000b71b0
100052b4:	0016e360 	.word	0x0016e360
100052b8:	002dc6c0 	.word	0x002dc6c0
100052bc:	00493e00 	.word	0x00493e00
100052c0:	005b8d80 	.word	0x005b8d80
100052c4:	00b71b00 	.word	0x00b71b00
100052c8:	016e3600 	.word	0x016e3600
    }
  }
  else
  {
    switch (clocksource)
100052cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
100052d0:	2b40      	cmp	r3, #64	; 0x40
100052d2:	f200 834f 	bhi.w	10005974 <UART_SetConfig+0x1220>
100052d6:	a201      	add	r2, pc, #4	; (adr r2, 100052dc <UART_SetConfig+0xb88>)
100052d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100052dc:	100053e1 	.word	0x100053e1
100052e0:	10005497 	.word	0x10005497
100052e4:	1000554d 	.word	0x1000554d
100052e8:	10005975 	.word	0x10005975
100052ec:	10005603 	.word	0x10005603
100052f0:	10005975 	.word	0x10005975
100052f4:	10005975 	.word	0x10005975
100052f8:	10005975 	.word	0x10005975
100052fc:	100056bd 	.word	0x100056bd
10005300:	10005975 	.word	0x10005975
10005304:	10005975 	.word	0x10005975
10005308:	10005975 	.word	0x10005975
1000530c:	10005975 	.word	0x10005975
10005310:	10005975 	.word	0x10005975
10005314:	10005975 	.word	0x10005975
10005318:	10005975 	.word	0x10005975
1000531c:	10005777 	.word	0x10005777
10005320:	10005975 	.word	0x10005975
10005324:	10005975 	.word	0x10005975
10005328:	10005975 	.word	0x10005975
1000532c:	10005975 	.word	0x10005975
10005330:	10005975 	.word	0x10005975
10005334:	10005975 	.word	0x10005975
10005338:	10005975 	.word	0x10005975
1000533c:	10005975 	.word	0x10005975
10005340:	10005975 	.word	0x10005975
10005344:	10005975 	.word	0x10005975
10005348:	10005975 	.word	0x10005975
1000534c:	10005975 	.word	0x10005975
10005350:	10005975 	.word	0x10005975
10005354:	10005975 	.word	0x10005975
10005358:	10005975 	.word	0x10005975
1000535c:	1000581f 	.word	0x1000581f
10005360:	10005975 	.word	0x10005975
10005364:	10005975 	.word	0x10005975
10005368:	10005975 	.word	0x10005975
1000536c:	10005975 	.word	0x10005975
10005370:	10005975 	.word	0x10005975
10005374:	10005975 	.word	0x10005975
10005378:	10005975 	.word	0x10005975
1000537c:	10005975 	.word	0x10005975
10005380:	10005975 	.word	0x10005975
10005384:	10005975 	.word	0x10005975
10005388:	10005975 	.word	0x10005975
1000538c:	10005975 	.word	0x10005975
10005390:	10005975 	.word	0x10005975
10005394:	10005975 	.word	0x10005975
10005398:	10005975 	.word	0x10005975
1000539c:	10005975 	.word	0x10005975
100053a0:	10005975 	.word	0x10005975
100053a4:	10005975 	.word	0x10005975
100053a8:	10005975 	.word	0x10005975
100053ac:	10005975 	.word	0x10005975
100053b0:	10005975 	.word	0x10005975
100053b4:	10005975 	.word	0x10005975
100053b8:	10005975 	.word	0x10005975
100053bc:	10005975 	.word	0x10005975
100053c0:	10005975 	.word	0x10005975
100053c4:	10005975 	.word	0x10005975
100053c8:	10005975 	.word	0x10005975
100053cc:	10005975 	.word	0x10005975
100053d0:	10005975 	.word	0x10005975
100053d4:	10005975 	.word	0x10005975
100053d8:	10005975 	.word	0x10005975
100053dc:	100058cd 	.word	0x100058cd
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
100053e0:	f7fc ffb8 	bl	10002354 <HAL_RCC_GetPCLK1Freq>
100053e4:	6278      	str	r0, [r7, #36]	; 0x24
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
100053e6:	687b      	ldr	r3, [r7, #4]
100053e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100053ea:	2b00      	cmp	r3, #0
100053ec:	d044      	beq.n	10005478 <UART_SetConfig+0xd24>
100053ee:	687b      	ldr	r3, [r7, #4]
100053f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100053f2:	2b01      	cmp	r3, #1
100053f4:	d03e      	beq.n	10005474 <UART_SetConfig+0xd20>
100053f6:	687b      	ldr	r3, [r7, #4]
100053f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100053fa:	2b02      	cmp	r3, #2
100053fc:	d038      	beq.n	10005470 <UART_SetConfig+0xd1c>
100053fe:	687b      	ldr	r3, [r7, #4]
10005400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005402:	2b03      	cmp	r3, #3
10005404:	d032      	beq.n	1000546c <UART_SetConfig+0xd18>
10005406:	687b      	ldr	r3, [r7, #4]
10005408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000540a:	2b04      	cmp	r3, #4
1000540c:	d02c      	beq.n	10005468 <UART_SetConfig+0xd14>
1000540e:	687b      	ldr	r3, [r7, #4]
10005410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005412:	2b05      	cmp	r3, #5
10005414:	d026      	beq.n	10005464 <UART_SetConfig+0xd10>
10005416:	687b      	ldr	r3, [r7, #4]
10005418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000541a:	2b06      	cmp	r3, #6
1000541c:	d020      	beq.n	10005460 <UART_SetConfig+0xd0c>
1000541e:	687b      	ldr	r3, [r7, #4]
10005420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005422:	2b07      	cmp	r3, #7
10005424:	d01a      	beq.n	1000545c <UART_SetConfig+0xd08>
10005426:	687b      	ldr	r3, [r7, #4]
10005428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000542a:	2b08      	cmp	r3, #8
1000542c:	d014      	beq.n	10005458 <UART_SetConfig+0xd04>
1000542e:	687b      	ldr	r3, [r7, #4]
10005430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005432:	2b09      	cmp	r3, #9
10005434:	d00e      	beq.n	10005454 <UART_SetConfig+0xd00>
10005436:	687b      	ldr	r3, [r7, #4]
10005438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000543a:	2b0a      	cmp	r3, #10
1000543c:	d008      	beq.n	10005450 <UART_SetConfig+0xcfc>
1000543e:	687b      	ldr	r3, [r7, #4]
10005440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005442:	2b0b      	cmp	r3, #11
10005444:	d102      	bne.n	1000544c <UART_SetConfig+0xcf8>
10005446:	f44f 7380 	mov.w	r3, #256	; 0x100
1000544a:	e016      	b.n	1000547a <UART_SetConfig+0xd26>
1000544c:	2301      	movs	r3, #1
1000544e:	e014      	b.n	1000547a <UART_SetConfig+0xd26>
10005450:	2380      	movs	r3, #128	; 0x80
10005452:	e012      	b.n	1000547a <UART_SetConfig+0xd26>
10005454:	2340      	movs	r3, #64	; 0x40
10005456:	e010      	b.n	1000547a <UART_SetConfig+0xd26>
10005458:	2320      	movs	r3, #32
1000545a:	e00e      	b.n	1000547a <UART_SetConfig+0xd26>
1000545c:	2310      	movs	r3, #16
1000545e:	e00c      	b.n	1000547a <UART_SetConfig+0xd26>
10005460:	230c      	movs	r3, #12
10005462:	e00a      	b.n	1000547a <UART_SetConfig+0xd26>
10005464:	230a      	movs	r3, #10
10005466:	e008      	b.n	1000547a <UART_SetConfig+0xd26>
10005468:	2308      	movs	r3, #8
1000546a:	e006      	b.n	1000547a <UART_SetConfig+0xd26>
1000546c:	2306      	movs	r3, #6
1000546e:	e004      	b.n	1000547a <UART_SetConfig+0xd26>
10005470:	2304      	movs	r3, #4
10005472:	e002      	b.n	1000547a <UART_SetConfig+0xd26>
10005474:	2302      	movs	r3, #2
10005476:	e000      	b.n	1000547a <UART_SetConfig+0xd26>
10005478:	2301      	movs	r3, #1
1000547a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
1000547c:	fbb2 f2f3 	udiv	r2, r2, r3
10005480:	687b      	ldr	r3, [r7, #4]
10005482:	685b      	ldr	r3, [r3, #4]
10005484:	085b      	lsrs	r3, r3, #1
10005486:	441a      	add	r2, r3
10005488:	687b      	ldr	r3, [r7, #4]
1000548a:	685b      	ldr	r3, [r3, #4]
1000548c:	fbb2 f3f3 	udiv	r3, r2, r3
10005490:	b29b      	uxth	r3, r3
10005492:	633b      	str	r3, [r7, #48]	; 0x30
        break;
10005494:	e272      	b.n	1000597c <UART_SetConfig+0x1228>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
10005496:	f7fc ff78 	bl	1000238a <HAL_RCC_GetPCLK2Freq>
1000549a:	6278      	str	r0, [r7, #36]	; 0x24
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
1000549c:	687b      	ldr	r3, [r7, #4]
1000549e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100054a0:	2b00      	cmp	r3, #0
100054a2:	d044      	beq.n	1000552e <UART_SetConfig+0xdda>
100054a4:	687b      	ldr	r3, [r7, #4]
100054a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100054a8:	2b01      	cmp	r3, #1
100054aa:	d03e      	beq.n	1000552a <UART_SetConfig+0xdd6>
100054ac:	687b      	ldr	r3, [r7, #4]
100054ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100054b0:	2b02      	cmp	r3, #2
100054b2:	d038      	beq.n	10005526 <UART_SetConfig+0xdd2>
100054b4:	687b      	ldr	r3, [r7, #4]
100054b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100054b8:	2b03      	cmp	r3, #3
100054ba:	d032      	beq.n	10005522 <UART_SetConfig+0xdce>
100054bc:	687b      	ldr	r3, [r7, #4]
100054be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100054c0:	2b04      	cmp	r3, #4
100054c2:	d02c      	beq.n	1000551e <UART_SetConfig+0xdca>
100054c4:	687b      	ldr	r3, [r7, #4]
100054c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100054c8:	2b05      	cmp	r3, #5
100054ca:	d026      	beq.n	1000551a <UART_SetConfig+0xdc6>
100054cc:	687b      	ldr	r3, [r7, #4]
100054ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100054d0:	2b06      	cmp	r3, #6
100054d2:	d020      	beq.n	10005516 <UART_SetConfig+0xdc2>
100054d4:	687b      	ldr	r3, [r7, #4]
100054d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100054d8:	2b07      	cmp	r3, #7
100054da:	d01a      	beq.n	10005512 <UART_SetConfig+0xdbe>
100054dc:	687b      	ldr	r3, [r7, #4]
100054de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100054e0:	2b08      	cmp	r3, #8
100054e2:	d014      	beq.n	1000550e <UART_SetConfig+0xdba>
100054e4:	687b      	ldr	r3, [r7, #4]
100054e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100054e8:	2b09      	cmp	r3, #9
100054ea:	d00e      	beq.n	1000550a <UART_SetConfig+0xdb6>
100054ec:	687b      	ldr	r3, [r7, #4]
100054ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100054f0:	2b0a      	cmp	r3, #10
100054f2:	d008      	beq.n	10005506 <UART_SetConfig+0xdb2>
100054f4:	687b      	ldr	r3, [r7, #4]
100054f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100054f8:	2b0b      	cmp	r3, #11
100054fa:	d102      	bne.n	10005502 <UART_SetConfig+0xdae>
100054fc:	f44f 7380 	mov.w	r3, #256	; 0x100
10005500:	e016      	b.n	10005530 <UART_SetConfig+0xddc>
10005502:	2301      	movs	r3, #1
10005504:	e014      	b.n	10005530 <UART_SetConfig+0xddc>
10005506:	2380      	movs	r3, #128	; 0x80
10005508:	e012      	b.n	10005530 <UART_SetConfig+0xddc>
1000550a:	2340      	movs	r3, #64	; 0x40
1000550c:	e010      	b.n	10005530 <UART_SetConfig+0xddc>
1000550e:	2320      	movs	r3, #32
10005510:	e00e      	b.n	10005530 <UART_SetConfig+0xddc>
10005512:	2310      	movs	r3, #16
10005514:	e00c      	b.n	10005530 <UART_SetConfig+0xddc>
10005516:	230c      	movs	r3, #12
10005518:	e00a      	b.n	10005530 <UART_SetConfig+0xddc>
1000551a:	230a      	movs	r3, #10
1000551c:	e008      	b.n	10005530 <UART_SetConfig+0xddc>
1000551e:	2308      	movs	r3, #8
10005520:	e006      	b.n	10005530 <UART_SetConfig+0xddc>
10005522:	2306      	movs	r3, #6
10005524:	e004      	b.n	10005530 <UART_SetConfig+0xddc>
10005526:	2304      	movs	r3, #4
10005528:	e002      	b.n	10005530 <UART_SetConfig+0xddc>
1000552a:	2302      	movs	r3, #2
1000552c:	e000      	b.n	10005530 <UART_SetConfig+0xddc>
1000552e:	2301      	movs	r3, #1
10005530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
10005532:	fbb2 f2f3 	udiv	r2, r2, r3
10005536:	687b      	ldr	r3, [r7, #4]
10005538:	685b      	ldr	r3, [r3, #4]
1000553a:	085b      	lsrs	r3, r3, #1
1000553c:	441a      	add	r2, r3
1000553e:	687b      	ldr	r3, [r7, #4]
10005540:	685b      	ldr	r3, [r3, #4]
10005542:	fbb2 f3f3 	udiv	r3, r2, r3
10005546:	b29b      	uxth	r3, r3
10005548:	633b      	str	r3, [r7, #48]	; 0x30
        break;
1000554a:	e217      	b.n	1000597c <UART_SetConfig+0x1228>
      case UART_CLOCKSOURCE_PCLK5:
        pclk = HAL_RCC_GetPCLK5Freq();
1000554c:	f7fc ff38 	bl	100023c0 <HAL_RCC_GetPCLK5Freq>
10005550:	6278      	str	r0, [r7, #36]	; 0x24
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10005552:	687b      	ldr	r3, [r7, #4]
10005554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005556:	2b00      	cmp	r3, #0
10005558:	d044      	beq.n	100055e4 <UART_SetConfig+0xe90>
1000555a:	687b      	ldr	r3, [r7, #4]
1000555c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000555e:	2b01      	cmp	r3, #1
10005560:	d03e      	beq.n	100055e0 <UART_SetConfig+0xe8c>
10005562:	687b      	ldr	r3, [r7, #4]
10005564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005566:	2b02      	cmp	r3, #2
10005568:	d038      	beq.n	100055dc <UART_SetConfig+0xe88>
1000556a:	687b      	ldr	r3, [r7, #4]
1000556c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000556e:	2b03      	cmp	r3, #3
10005570:	d032      	beq.n	100055d8 <UART_SetConfig+0xe84>
10005572:	687b      	ldr	r3, [r7, #4]
10005574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005576:	2b04      	cmp	r3, #4
10005578:	d02c      	beq.n	100055d4 <UART_SetConfig+0xe80>
1000557a:	687b      	ldr	r3, [r7, #4]
1000557c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000557e:	2b05      	cmp	r3, #5
10005580:	d026      	beq.n	100055d0 <UART_SetConfig+0xe7c>
10005582:	687b      	ldr	r3, [r7, #4]
10005584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005586:	2b06      	cmp	r3, #6
10005588:	d020      	beq.n	100055cc <UART_SetConfig+0xe78>
1000558a:	687b      	ldr	r3, [r7, #4]
1000558c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000558e:	2b07      	cmp	r3, #7
10005590:	d01a      	beq.n	100055c8 <UART_SetConfig+0xe74>
10005592:	687b      	ldr	r3, [r7, #4]
10005594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005596:	2b08      	cmp	r3, #8
10005598:	d014      	beq.n	100055c4 <UART_SetConfig+0xe70>
1000559a:	687b      	ldr	r3, [r7, #4]
1000559c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000559e:	2b09      	cmp	r3, #9
100055a0:	d00e      	beq.n	100055c0 <UART_SetConfig+0xe6c>
100055a2:	687b      	ldr	r3, [r7, #4]
100055a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100055a6:	2b0a      	cmp	r3, #10
100055a8:	d008      	beq.n	100055bc <UART_SetConfig+0xe68>
100055aa:	687b      	ldr	r3, [r7, #4]
100055ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100055ae:	2b0b      	cmp	r3, #11
100055b0:	d102      	bne.n	100055b8 <UART_SetConfig+0xe64>
100055b2:	f44f 7380 	mov.w	r3, #256	; 0x100
100055b6:	e016      	b.n	100055e6 <UART_SetConfig+0xe92>
100055b8:	2301      	movs	r3, #1
100055ba:	e014      	b.n	100055e6 <UART_SetConfig+0xe92>
100055bc:	2380      	movs	r3, #128	; 0x80
100055be:	e012      	b.n	100055e6 <UART_SetConfig+0xe92>
100055c0:	2340      	movs	r3, #64	; 0x40
100055c2:	e010      	b.n	100055e6 <UART_SetConfig+0xe92>
100055c4:	2320      	movs	r3, #32
100055c6:	e00e      	b.n	100055e6 <UART_SetConfig+0xe92>
100055c8:	2310      	movs	r3, #16
100055ca:	e00c      	b.n	100055e6 <UART_SetConfig+0xe92>
100055cc:	230c      	movs	r3, #12
100055ce:	e00a      	b.n	100055e6 <UART_SetConfig+0xe92>
100055d0:	230a      	movs	r3, #10
100055d2:	e008      	b.n	100055e6 <UART_SetConfig+0xe92>
100055d4:	2308      	movs	r3, #8
100055d6:	e006      	b.n	100055e6 <UART_SetConfig+0xe92>
100055d8:	2306      	movs	r3, #6
100055da:	e004      	b.n	100055e6 <UART_SetConfig+0xe92>
100055dc:	2304      	movs	r3, #4
100055de:	e002      	b.n	100055e6 <UART_SetConfig+0xe92>
100055e0:	2302      	movs	r3, #2
100055e2:	e000      	b.n	100055e6 <UART_SetConfig+0xe92>
100055e4:	2301      	movs	r3, #1
100055e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
100055e8:	fbb2 f2f3 	udiv	r2, r2, r3
100055ec:	687b      	ldr	r3, [r7, #4]
100055ee:	685b      	ldr	r3, [r3, #4]
100055f0:	085b      	lsrs	r3, r3, #1
100055f2:	441a      	add	r2, r3
100055f4:	687b      	ldr	r3, [r7, #4]
100055f6:	685b      	ldr	r3, [r3, #4]
100055f8:	fbb2 f3f3 	udiv	r3, r2, r3
100055fc:	b29b      	uxth	r3, r3
100055fe:	633b      	str	r3, [r7, #48]	; 0x30
        break;
10005600:	e1bc      	b.n	1000597c <UART_SetConfig+0x1228>
      case UART_CLOCKSOURCE_PLL3Q:
        HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10005602:	f107 0314 	add.w	r3, r7, #20
10005606:	4618      	mov	r0, r3
10005608:	f7fc fca2 	bl	10001f50 <HAL_RCC_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
1000560c:	69ba      	ldr	r2, [r7, #24]
1000560e:	687b      	ldr	r3, [r7, #4]
10005610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005612:	2b00      	cmp	r3, #0
10005614:	d044      	beq.n	100056a0 <UART_SetConfig+0xf4c>
10005616:	687b      	ldr	r3, [r7, #4]
10005618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000561a:	2b01      	cmp	r3, #1
1000561c:	d03e      	beq.n	1000569c <UART_SetConfig+0xf48>
1000561e:	687b      	ldr	r3, [r7, #4]
10005620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005622:	2b02      	cmp	r3, #2
10005624:	d038      	beq.n	10005698 <UART_SetConfig+0xf44>
10005626:	687b      	ldr	r3, [r7, #4]
10005628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000562a:	2b03      	cmp	r3, #3
1000562c:	d032      	beq.n	10005694 <UART_SetConfig+0xf40>
1000562e:	687b      	ldr	r3, [r7, #4]
10005630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005632:	2b04      	cmp	r3, #4
10005634:	d02c      	beq.n	10005690 <UART_SetConfig+0xf3c>
10005636:	687b      	ldr	r3, [r7, #4]
10005638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000563a:	2b05      	cmp	r3, #5
1000563c:	d026      	beq.n	1000568c <UART_SetConfig+0xf38>
1000563e:	687b      	ldr	r3, [r7, #4]
10005640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005642:	2b06      	cmp	r3, #6
10005644:	d020      	beq.n	10005688 <UART_SetConfig+0xf34>
10005646:	687b      	ldr	r3, [r7, #4]
10005648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000564a:	2b07      	cmp	r3, #7
1000564c:	d01a      	beq.n	10005684 <UART_SetConfig+0xf30>
1000564e:	687b      	ldr	r3, [r7, #4]
10005650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005652:	2b08      	cmp	r3, #8
10005654:	d014      	beq.n	10005680 <UART_SetConfig+0xf2c>
10005656:	687b      	ldr	r3, [r7, #4]
10005658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000565a:	2b09      	cmp	r3, #9
1000565c:	d00e      	beq.n	1000567c <UART_SetConfig+0xf28>
1000565e:	687b      	ldr	r3, [r7, #4]
10005660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005662:	2b0a      	cmp	r3, #10
10005664:	d008      	beq.n	10005678 <UART_SetConfig+0xf24>
10005666:	687b      	ldr	r3, [r7, #4]
10005668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000566a:	2b0b      	cmp	r3, #11
1000566c:	d102      	bne.n	10005674 <UART_SetConfig+0xf20>
1000566e:	f44f 7380 	mov.w	r3, #256	; 0x100
10005672:	e016      	b.n	100056a2 <UART_SetConfig+0xf4e>
10005674:	2301      	movs	r3, #1
10005676:	e014      	b.n	100056a2 <UART_SetConfig+0xf4e>
10005678:	2380      	movs	r3, #128	; 0x80
1000567a:	e012      	b.n	100056a2 <UART_SetConfig+0xf4e>
1000567c:	2340      	movs	r3, #64	; 0x40
1000567e:	e010      	b.n	100056a2 <UART_SetConfig+0xf4e>
10005680:	2320      	movs	r3, #32
10005682:	e00e      	b.n	100056a2 <UART_SetConfig+0xf4e>
10005684:	2310      	movs	r3, #16
10005686:	e00c      	b.n	100056a2 <UART_SetConfig+0xf4e>
10005688:	230c      	movs	r3, #12
1000568a:	e00a      	b.n	100056a2 <UART_SetConfig+0xf4e>
1000568c:	230a      	movs	r3, #10
1000568e:	e008      	b.n	100056a2 <UART_SetConfig+0xf4e>
10005690:	2308      	movs	r3, #8
10005692:	e006      	b.n	100056a2 <UART_SetConfig+0xf4e>
10005694:	2306      	movs	r3, #6
10005696:	e004      	b.n	100056a2 <UART_SetConfig+0xf4e>
10005698:	2304      	movs	r3, #4
1000569a:	e002      	b.n	100056a2 <UART_SetConfig+0xf4e>
1000569c:	2302      	movs	r3, #2
1000569e:	e000      	b.n	100056a2 <UART_SetConfig+0xf4e>
100056a0:	2301      	movs	r3, #1
100056a2:	fbb2 f2f3 	udiv	r2, r2, r3
100056a6:	687b      	ldr	r3, [r7, #4]
100056a8:	685b      	ldr	r3, [r3, #4]
100056aa:	085b      	lsrs	r3, r3, #1
100056ac:	441a      	add	r2, r3
100056ae:	687b      	ldr	r3, [r7, #4]
100056b0:	685b      	ldr	r3, [r3, #4]
100056b2:	fbb2 f3f3 	udiv	r3, r2, r3
100056b6:	b29b      	uxth	r3, r3
100056b8:	633b      	str	r3, [r7, #48]	; 0x30
        break;
100056ba:	e15f      	b.n	1000597c <UART_SetConfig+0x1228>
      case UART_CLOCKSOURCE_PLL4Q:
        HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
100056bc:	f107 0308 	add.w	r3, r7, #8
100056c0:	4618      	mov	r0, r3
100056c2:	f7fc fd3f 	bl	10002144 <HAL_RCC_GetPLL4ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll4_clocks.PLL4_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
100056c6:	68fa      	ldr	r2, [r7, #12]
100056c8:	687b      	ldr	r3, [r7, #4]
100056ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100056cc:	2b00      	cmp	r3, #0
100056ce:	d044      	beq.n	1000575a <UART_SetConfig+0x1006>
100056d0:	687b      	ldr	r3, [r7, #4]
100056d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100056d4:	2b01      	cmp	r3, #1
100056d6:	d03e      	beq.n	10005756 <UART_SetConfig+0x1002>
100056d8:	687b      	ldr	r3, [r7, #4]
100056da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100056dc:	2b02      	cmp	r3, #2
100056de:	d038      	beq.n	10005752 <UART_SetConfig+0xffe>
100056e0:	687b      	ldr	r3, [r7, #4]
100056e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100056e4:	2b03      	cmp	r3, #3
100056e6:	d032      	beq.n	1000574e <UART_SetConfig+0xffa>
100056e8:	687b      	ldr	r3, [r7, #4]
100056ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100056ec:	2b04      	cmp	r3, #4
100056ee:	d02c      	beq.n	1000574a <UART_SetConfig+0xff6>
100056f0:	687b      	ldr	r3, [r7, #4]
100056f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100056f4:	2b05      	cmp	r3, #5
100056f6:	d026      	beq.n	10005746 <UART_SetConfig+0xff2>
100056f8:	687b      	ldr	r3, [r7, #4]
100056fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100056fc:	2b06      	cmp	r3, #6
100056fe:	d020      	beq.n	10005742 <UART_SetConfig+0xfee>
10005700:	687b      	ldr	r3, [r7, #4]
10005702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005704:	2b07      	cmp	r3, #7
10005706:	d01a      	beq.n	1000573e <UART_SetConfig+0xfea>
10005708:	687b      	ldr	r3, [r7, #4]
1000570a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000570c:	2b08      	cmp	r3, #8
1000570e:	d014      	beq.n	1000573a <UART_SetConfig+0xfe6>
10005710:	687b      	ldr	r3, [r7, #4]
10005712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005714:	2b09      	cmp	r3, #9
10005716:	d00e      	beq.n	10005736 <UART_SetConfig+0xfe2>
10005718:	687b      	ldr	r3, [r7, #4]
1000571a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000571c:	2b0a      	cmp	r3, #10
1000571e:	d008      	beq.n	10005732 <UART_SetConfig+0xfde>
10005720:	687b      	ldr	r3, [r7, #4]
10005722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005724:	2b0b      	cmp	r3, #11
10005726:	d102      	bne.n	1000572e <UART_SetConfig+0xfda>
10005728:	f44f 7380 	mov.w	r3, #256	; 0x100
1000572c:	e016      	b.n	1000575c <UART_SetConfig+0x1008>
1000572e:	2301      	movs	r3, #1
10005730:	e014      	b.n	1000575c <UART_SetConfig+0x1008>
10005732:	2380      	movs	r3, #128	; 0x80
10005734:	e012      	b.n	1000575c <UART_SetConfig+0x1008>
10005736:	2340      	movs	r3, #64	; 0x40
10005738:	e010      	b.n	1000575c <UART_SetConfig+0x1008>
1000573a:	2320      	movs	r3, #32
1000573c:	e00e      	b.n	1000575c <UART_SetConfig+0x1008>
1000573e:	2310      	movs	r3, #16
10005740:	e00c      	b.n	1000575c <UART_SetConfig+0x1008>
10005742:	230c      	movs	r3, #12
10005744:	e00a      	b.n	1000575c <UART_SetConfig+0x1008>
10005746:	230a      	movs	r3, #10
10005748:	e008      	b.n	1000575c <UART_SetConfig+0x1008>
1000574a:	2308      	movs	r3, #8
1000574c:	e006      	b.n	1000575c <UART_SetConfig+0x1008>
1000574e:	2306      	movs	r3, #6
10005750:	e004      	b.n	1000575c <UART_SetConfig+0x1008>
10005752:	2304      	movs	r3, #4
10005754:	e002      	b.n	1000575c <UART_SetConfig+0x1008>
10005756:	2302      	movs	r3, #2
10005758:	e000      	b.n	1000575c <UART_SetConfig+0x1008>
1000575a:	2301      	movs	r3, #1
1000575c:	fbb2 f2f3 	udiv	r2, r2, r3
10005760:	687b      	ldr	r3, [r7, #4]
10005762:	685b      	ldr	r3, [r3, #4]
10005764:	085b      	lsrs	r3, r3, #1
10005766:	441a      	add	r2, r3
10005768:	687b      	ldr	r3, [r7, #4]
1000576a:	685b      	ldr	r3, [r3, #4]
1000576c:	fbb2 f3f3 	udiv	r3, r2, r3
10005770:	b29b      	uxth	r3, r3
10005772:	633b      	str	r3, [r7, #48]	; 0x30
        break;
10005774:	e102      	b.n	1000597c <UART_SetConfig+0x1228>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10005776:	687b      	ldr	r3, [r7, #4]
10005778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000577a:	2b00      	cmp	r3, #0
1000577c:	d043      	beq.n	10005806 <UART_SetConfig+0x10b2>
1000577e:	687b      	ldr	r3, [r7, #4]
10005780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005782:	2b01      	cmp	r3, #1
10005784:	d03d      	beq.n	10005802 <UART_SetConfig+0x10ae>
10005786:	687b      	ldr	r3, [r7, #4]
10005788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000578a:	2b02      	cmp	r3, #2
1000578c:	d037      	beq.n	100057fe <UART_SetConfig+0x10aa>
1000578e:	687b      	ldr	r3, [r7, #4]
10005790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005792:	2b03      	cmp	r3, #3
10005794:	d031      	beq.n	100057fa <UART_SetConfig+0x10a6>
10005796:	687b      	ldr	r3, [r7, #4]
10005798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000579a:	2b04      	cmp	r3, #4
1000579c:	d02b      	beq.n	100057f6 <UART_SetConfig+0x10a2>
1000579e:	687b      	ldr	r3, [r7, #4]
100057a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100057a2:	2b05      	cmp	r3, #5
100057a4:	d025      	beq.n	100057f2 <UART_SetConfig+0x109e>
100057a6:	687b      	ldr	r3, [r7, #4]
100057a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100057aa:	2b06      	cmp	r3, #6
100057ac:	d01f      	beq.n	100057ee <UART_SetConfig+0x109a>
100057ae:	687b      	ldr	r3, [r7, #4]
100057b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100057b2:	2b07      	cmp	r3, #7
100057b4:	d019      	beq.n	100057ea <UART_SetConfig+0x1096>
100057b6:	687b      	ldr	r3, [r7, #4]
100057b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100057ba:	2b08      	cmp	r3, #8
100057bc:	d013      	beq.n	100057e6 <UART_SetConfig+0x1092>
100057be:	687b      	ldr	r3, [r7, #4]
100057c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100057c2:	2b09      	cmp	r3, #9
100057c4:	d00d      	beq.n	100057e2 <UART_SetConfig+0x108e>
100057c6:	687b      	ldr	r3, [r7, #4]
100057c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100057ca:	2b0a      	cmp	r3, #10
100057cc:	d007      	beq.n	100057de <UART_SetConfig+0x108a>
100057ce:	687b      	ldr	r3, [r7, #4]
100057d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100057d2:	2b0b      	cmp	r3, #11
100057d4:	d101      	bne.n	100057da <UART_SetConfig+0x1086>
100057d6:	4b7b      	ldr	r3, [pc, #492]	; (100059c4 <UART_SetConfig+0x1270>)
100057d8:	e016      	b.n	10005808 <UART_SetConfig+0x10b4>
100057da:	4b7b      	ldr	r3, [pc, #492]	; (100059c8 <UART_SetConfig+0x1274>)
100057dc:	e014      	b.n	10005808 <UART_SetConfig+0x10b4>
100057de:	4b7b      	ldr	r3, [pc, #492]	; (100059cc <UART_SetConfig+0x1278>)
100057e0:	e012      	b.n	10005808 <UART_SetConfig+0x10b4>
100057e2:	4b7b      	ldr	r3, [pc, #492]	; (100059d0 <UART_SetConfig+0x127c>)
100057e4:	e010      	b.n	10005808 <UART_SetConfig+0x10b4>
100057e6:	4b7b      	ldr	r3, [pc, #492]	; (100059d4 <UART_SetConfig+0x1280>)
100057e8:	e00e      	b.n	10005808 <UART_SetConfig+0x10b4>
100057ea:	4b7b      	ldr	r3, [pc, #492]	; (100059d8 <UART_SetConfig+0x1284>)
100057ec:	e00c      	b.n	10005808 <UART_SetConfig+0x10b4>
100057ee:	4b7b      	ldr	r3, [pc, #492]	; (100059dc <UART_SetConfig+0x1288>)
100057f0:	e00a      	b.n	10005808 <UART_SetConfig+0x10b4>
100057f2:	4b7b      	ldr	r3, [pc, #492]	; (100059e0 <UART_SetConfig+0x128c>)
100057f4:	e008      	b.n	10005808 <UART_SetConfig+0x10b4>
100057f6:	4b7b      	ldr	r3, [pc, #492]	; (100059e4 <UART_SetConfig+0x1290>)
100057f8:	e006      	b.n	10005808 <UART_SetConfig+0x10b4>
100057fa:	4b7b      	ldr	r3, [pc, #492]	; (100059e8 <UART_SetConfig+0x1294>)
100057fc:	e004      	b.n	10005808 <UART_SetConfig+0x10b4>
100057fe:	4b7b      	ldr	r3, [pc, #492]	; (100059ec <UART_SetConfig+0x1298>)
10005800:	e002      	b.n	10005808 <UART_SetConfig+0x10b4>
10005802:	4b7b      	ldr	r3, [pc, #492]	; (100059f0 <UART_SetConfig+0x129c>)
10005804:	e000      	b.n	10005808 <UART_SetConfig+0x10b4>
10005806:	4b70      	ldr	r3, [pc, #448]	; (100059c8 <UART_SetConfig+0x1274>)
10005808:	687a      	ldr	r2, [r7, #4]
1000580a:	6852      	ldr	r2, [r2, #4]
1000580c:	0852      	lsrs	r2, r2, #1
1000580e:	441a      	add	r2, r3
10005810:	687b      	ldr	r3, [r7, #4]
10005812:	685b      	ldr	r3, [r3, #4]
10005814:	fbb2 f3f3 	udiv	r3, r2, r3
10005818:	b29b      	uxth	r3, r3
1000581a:	633b      	str	r3, [r7, #48]	; 0x30
        break;
1000581c:	e0ae      	b.n	1000597c <UART_SetConfig+0x1228>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
1000581e:	687b      	ldr	r3, [r7, #4]
10005820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005822:	2b00      	cmp	r3, #0
10005824:	d046      	beq.n	100058b4 <UART_SetConfig+0x1160>
10005826:	687b      	ldr	r3, [r7, #4]
10005828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000582a:	2b01      	cmp	r3, #1
1000582c:	d040      	beq.n	100058b0 <UART_SetConfig+0x115c>
1000582e:	687b      	ldr	r3, [r7, #4]
10005830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005832:	2b02      	cmp	r3, #2
10005834:	d03a      	beq.n	100058ac <UART_SetConfig+0x1158>
10005836:	687b      	ldr	r3, [r7, #4]
10005838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000583a:	2b03      	cmp	r3, #3
1000583c:	d034      	beq.n	100058a8 <UART_SetConfig+0x1154>
1000583e:	687b      	ldr	r3, [r7, #4]
10005840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005842:	2b04      	cmp	r3, #4
10005844:	d02e      	beq.n	100058a4 <UART_SetConfig+0x1150>
10005846:	687b      	ldr	r3, [r7, #4]
10005848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000584a:	2b05      	cmp	r3, #5
1000584c:	d028      	beq.n	100058a0 <UART_SetConfig+0x114c>
1000584e:	687b      	ldr	r3, [r7, #4]
10005850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005852:	2b06      	cmp	r3, #6
10005854:	d022      	beq.n	1000589c <UART_SetConfig+0x1148>
10005856:	687b      	ldr	r3, [r7, #4]
10005858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000585a:	2b07      	cmp	r3, #7
1000585c:	d01c      	beq.n	10005898 <UART_SetConfig+0x1144>
1000585e:	687b      	ldr	r3, [r7, #4]
10005860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005862:	2b08      	cmp	r3, #8
10005864:	d016      	beq.n	10005894 <UART_SetConfig+0x1140>
10005866:	687b      	ldr	r3, [r7, #4]
10005868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000586a:	2b09      	cmp	r3, #9
1000586c:	d00f      	beq.n	1000588e <UART_SetConfig+0x113a>
1000586e:	687b      	ldr	r3, [r7, #4]
10005870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005872:	2b0a      	cmp	r3, #10
10005874:	d008      	beq.n	10005888 <UART_SetConfig+0x1134>
10005876:	687b      	ldr	r3, [r7, #4]
10005878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000587a:	2b0b      	cmp	r3, #11
1000587c:	d102      	bne.n	10005884 <UART_SetConfig+0x1130>
1000587e:	f643 5309 	movw	r3, #15625	; 0x3d09
10005882:	e018      	b.n	100058b6 <UART_SetConfig+0x1162>
10005884:	4b54      	ldr	r3, [pc, #336]	; (100059d8 <UART_SetConfig+0x1284>)
10005886:	e016      	b.n	100058b6 <UART_SetConfig+0x1162>
10005888:	f647 2312 	movw	r3, #31250	; 0x7a12
1000588c:	e013      	b.n	100058b6 <UART_SetConfig+0x1162>
1000588e:	f24f 4324 	movw	r3, #62500	; 0xf424
10005892:	e010      	b.n	100058b6 <UART_SetConfig+0x1162>
10005894:	4b57      	ldr	r3, [pc, #348]	; (100059f4 <UART_SetConfig+0x12a0>)
10005896:	e00e      	b.n	100058b6 <UART_SetConfig+0x1162>
10005898:	4b4a      	ldr	r3, [pc, #296]	; (100059c4 <UART_SetConfig+0x1270>)
1000589a:	e00c      	b.n	100058b6 <UART_SetConfig+0x1162>
1000589c:	4b56      	ldr	r3, [pc, #344]	; (100059f8 <UART_SetConfig+0x12a4>)
1000589e:	e00a      	b.n	100058b6 <UART_SetConfig+0x1162>
100058a0:	4b56      	ldr	r3, [pc, #344]	; (100059fc <UART_SetConfig+0x12a8>)
100058a2:	e008      	b.n	100058b6 <UART_SetConfig+0x1162>
100058a4:	4b49      	ldr	r3, [pc, #292]	; (100059cc <UART_SetConfig+0x1278>)
100058a6:	e006      	b.n	100058b6 <UART_SetConfig+0x1162>
100058a8:	4b55      	ldr	r3, [pc, #340]	; (10005a00 <UART_SetConfig+0x12ac>)
100058aa:	e004      	b.n	100058b6 <UART_SetConfig+0x1162>
100058ac:	4b48      	ldr	r3, [pc, #288]	; (100059d0 <UART_SetConfig+0x127c>)
100058ae:	e002      	b.n	100058b6 <UART_SetConfig+0x1162>
100058b0:	4b48      	ldr	r3, [pc, #288]	; (100059d4 <UART_SetConfig+0x1280>)
100058b2:	e000      	b.n	100058b6 <UART_SetConfig+0x1162>
100058b4:	4b48      	ldr	r3, [pc, #288]	; (100059d8 <UART_SetConfig+0x1284>)
100058b6:	687a      	ldr	r2, [r7, #4]
100058b8:	6852      	ldr	r2, [r2, #4]
100058ba:	0852      	lsrs	r2, r2, #1
100058bc:	441a      	add	r2, r3
100058be:	687b      	ldr	r3, [r7, #4]
100058c0:	685b      	ldr	r3, [r3, #4]
100058c2:	fbb2 f3f3 	udiv	r3, r2, r3
100058c6:	b29b      	uxth	r3, r3
100058c8:	633b      	str	r3, [r7, #48]	; 0x30
        break;
100058ca:	e057      	b.n	1000597c <UART_SetConfig+0x1228>
      case UART_CLOCKSOURCE_HSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
100058cc:	687b      	ldr	r3, [r7, #4]
100058ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100058d0:	2b00      	cmp	r3, #0
100058d2:	d043      	beq.n	1000595c <UART_SetConfig+0x1208>
100058d4:	687b      	ldr	r3, [r7, #4]
100058d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100058d8:	2b01      	cmp	r3, #1
100058da:	d03d      	beq.n	10005958 <UART_SetConfig+0x1204>
100058dc:	687b      	ldr	r3, [r7, #4]
100058de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100058e0:	2b02      	cmp	r3, #2
100058e2:	d037      	beq.n	10005954 <UART_SetConfig+0x1200>
100058e4:	687b      	ldr	r3, [r7, #4]
100058e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100058e8:	2b03      	cmp	r3, #3
100058ea:	d031      	beq.n	10005950 <UART_SetConfig+0x11fc>
100058ec:	687b      	ldr	r3, [r7, #4]
100058ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100058f0:	2b04      	cmp	r3, #4
100058f2:	d02b      	beq.n	1000594c <UART_SetConfig+0x11f8>
100058f4:	687b      	ldr	r3, [r7, #4]
100058f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100058f8:	2b05      	cmp	r3, #5
100058fa:	d025      	beq.n	10005948 <UART_SetConfig+0x11f4>
100058fc:	687b      	ldr	r3, [r7, #4]
100058fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005900:	2b06      	cmp	r3, #6
10005902:	d01f      	beq.n	10005944 <UART_SetConfig+0x11f0>
10005904:	687b      	ldr	r3, [r7, #4]
10005906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005908:	2b07      	cmp	r3, #7
1000590a:	d019      	beq.n	10005940 <UART_SetConfig+0x11ec>
1000590c:	687b      	ldr	r3, [r7, #4]
1000590e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005910:	2b08      	cmp	r3, #8
10005912:	d013      	beq.n	1000593c <UART_SetConfig+0x11e8>
10005914:	687b      	ldr	r3, [r7, #4]
10005916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005918:	2b09      	cmp	r3, #9
1000591a:	d00d      	beq.n	10005938 <UART_SetConfig+0x11e4>
1000591c:	687b      	ldr	r3, [r7, #4]
1000591e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005920:	2b0a      	cmp	r3, #10
10005922:	d007      	beq.n	10005934 <UART_SetConfig+0x11e0>
10005924:	687b      	ldr	r3, [r7, #4]
10005926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10005928:	2b0b      	cmp	r3, #11
1000592a:	d101      	bne.n	10005930 <UART_SetConfig+0x11dc>
1000592c:	4b35      	ldr	r3, [pc, #212]	; (10005a04 <UART_SetConfig+0x12b0>)
1000592e:	e016      	b.n	1000595e <UART_SetConfig+0x120a>
10005930:	4b35      	ldr	r3, [pc, #212]	; (10005a08 <UART_SetConfig+0x12b4>)
10005932:	e014      	b.n	1000595e <UART_SetConfig+0x120a>
10005934:	4b35      	ldr	r3, [pc, #212]	; (10005a0c <UART_SetConfig+0x12b8>)
10005936:	e012      	b.n	1000595e <UART_SetConfig+0x120a>
10005938:	4b35      	ldr	r3, [pc, #212]	; (10005a10 <UART_SetConfig+0x12bc>)
1000593a:	e010      	b.n	1000595e <UART_SetConfig+0x120a>
1000593c:	4b35      	ldr	r3, [pc, #212]	; (10005a14 <UART_SetConfig+0x12c0>)
1000593e:	e00e      	b.n	1000595e <UART_SetConfig+0x120a>
10005940:	4b35      	ldr	r3, [pc, #212]	; (10005a18 <UART_SetConfig+0x12c4>)
10005942:	e00c      	b.n	1000595e <UART_SetConfig+0x120a>
10005944:	4b23      	ldr	r3, [pc, #140]	; (100059d4 <UART_SetConfig+0x1280>)
10005946:	e00a      	b.n	1000595e <UART_SetConfig+0x120a>
10005948:	4b34      	ldr	r3, [pc, #208]	; (10005a1c <UART_SetConfig+0x12c8>)
1000594a:	e008      	b.n	1000595e <UART_SetConfig+0x120a>
1000594c:	4b34      	ldr	r3, [pc, #208]	; (10005a20 <UART_SetConfig+0x12cc>)
1000594e:	e006      	b.n	1000595e <UART_SetConfig+0x120a>
10005950:	4b21      	ldr	r3, [pc, #132]	; (100059d8 <UART_SetConfig+0x1284>)
10005952:	e004      	b.n	1000595e <UART_SetConfig+0x120a>
10005954:	4b33      	ldr	r3, [pc, #204]	; (10005a24 <UART_SetConfig+0x12d0>)
10005956:	e002      	b.n	1000595e <UART_SetConfig+0x120a>
10005958:	4b33      	ldr	r3, [pc, #204]	; (10005a28 <UART_SetConfig+0x12d4>)
1000595a:	e000      	b.n	1000595e <UART_SetConfig+0x120a>
1000595c:	4b2a      	ldr	r3, [pc, #168]	; (10005a08 <UART_SetConfig+0x12b4>)
1000595e:	687a      	ldr	r2, [r7, #4]
10005960:	6852      	ldr	r2, [r2, #4]
10005962:	0852      	lsrs	r2, r2, #1
10005964:	441a      	add	r2, r3
10005966:	687b      	ldr	r3, [r7, #4]
10005968:	685b      	ldr	r3, [r3, #4]
1000596a:	fbb2 f3f3 	udiv	r3, r2, r3
1000596e:	b29b      	uxth	r3, r3
10005970:	633b      	str	r3, [r7, #48]	; 0x30
        break;
10005972:	e003      	b.n	1000597c <UART_SetConfig+0x1228>
      default:
        ret = HAL_ERROR;
10005974:	2301      	movs	r3, #1
10005976:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        break;
1000597a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
1000597c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000597e:	2b0f      	cmp	r3, #15
10005980:	d908      	bls.n	10005994 <UART_SetConfig+0x1240>
10005982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10005984:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
10005988:	d204      	bcs.n	10005994 <UART_SetConfig+0x1240>
    {
      huart->Instance->BRR = usartdiv;
1000598a:	687b      	ldr	r3, [r7, #4]
1000598c:	681b      	ldr	r3, [r3, #0]
1000598e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
10005990:	60da      	str	r2, [r3, #12]
10005992:	e002      	b.n	1000599a <UART_SetConfig+0x1246>
    }
    else
    {
      ret = HAL_ERROR;
10005994:	2301      	movs	r3, #1
10005996:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
1000599a:	687b      	ldr	r3, [r7, #4]
1000599c:	2201      	movs	r2, #1
1000599e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
100059a2:	687b      	ldr	r3, [r7, #4]
100059a4:	2201      	movs	r2, #1
100059a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
100059aa:	687b      	ldr	r3, [r7, #4]
100059ac:	2200      	movs	r2, #0
100059ae:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
100059b0:	687b      	ldr	r3, [r7, #4]
100059b2:	2200      	movs	r2, #0
100059b4:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
100059b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
100059ba:	4618      	mov	r0, r3
100059bc:	3738      	adds	r7, #56	; 0x38
100059be:	46bd      	mov	sp, r7
100059c0:	bd80      	pop	{r7, pc}
100059c2:	bf00      	nop
100059c4:	0003d090 	.word	0x0003d090
100059c8:	03d09000 	.word	0x03d09000
100059cc:	0007a120 	.word	0x0007a120
100059d0:	000f4240 	.word	0x000f4240
100059d4:	001e8480 	.word	0x001e8480
100059d8:	003d0900 	.word	0x003d0900
100059dc:	00516155 	.word	0x00516155
100059e0:	0061a800 	.word	0x0061a800
100059e4:	007a1200 	.word	0x007a1200
100059e8:	00a2c2aa 	.word	0x00a2c2aa
100059ec:	00f42400 	.word	0x00f42400
100059f0:	01e84800 	.word	0x01e84800
100059f4:	0001e848 	.word	0x0001e848
100059f8:	00051615 	.word	0x00051615
100059fc:	00061a80 	.word	0x00061a80
10005a00:	000a2c2a 	.word	0x000a2c2a
10005a04:	00016e36 	.word	0x00016e36
10005a08:	016e3600 	.word	0x016e3600
10005a0c:	0002dc6c 	.word	0x0002dc6c
10005a10:	0005b8d8 	.word	0x0005b8d8
10005a14:	000b71b0 	.word	0x000b71b0
10005a18:	0016e360 	.word	0x0016e360
10005a1c:	00249f00 	.word	0x00249f00
10005a20:	002dc6c0 	.word	0x002dc6c0
10005a24:	005b8d80 	.word	0x005b8d80
10005a28:	00b71b00 	.word	0x00b71b00

10005a2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
10005a2c:	b480      	push	{r7}
10005a2e:	b083      	sub	sp, #12
10005a30:	af00      	add	r7, sp, #0
10005a32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
10005a34:	687b      	ldr	r3, [r7, #4]
10005a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10005a38:	f003 0301 	and.w	r3, r3, #1
10005a3c:	2b00      	cmp	r3, #0
10005a3e:	d00a      	beq.n	10005a56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
10005a40:	687b      	ldr	r3, [r7, #4]
10005a42:	681b      	ldr	r3, [r3, #0]
10005a44:	685b      	ldr	r3, [r3, #4]
10005a46:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
10005a4a:	687b      	ldr	r3, [r7, #4]
10005a4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
10005a4e:	687b      	ldr	r3, [r7, #4]
10005a50:	681b      	ldr	r3, [r3, #0]
10005a52:	430a      	orrs	r2, r1
10005a54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
10005a56:	687b      	ldr	r3, [r7, #4]
10005a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10005a5a:	f003 0302 	and.w	r3, r3, #2
10005a5e:	2b00      	cmp	r3, #0
10005a60:	d00a      	beq.n	10005a78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
10005a62:	687b      	ldr	r3, [r7, #4]
10005a64:	681b      	ldr	r3, [r3, #0]
10005a66:	685b      	ldr	r3, [r3, #4]
10005a68:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
10005a6c:	687b      	ldr	r3, [r7, #4]
10005a6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
10005a70:	687b      	ldr	r3, [r7, #4]
10005a72:	681b      	ldr	r3, [r3, #0]
10005a74:	430a      	orrs	r2, r1
10005a76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
10005a78:	687b      	ldr	r3, [r7, #4]
10005a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10005a7c:	f003 0304 	and.w	r3, r3, #4
10005a80:	2b00      	cmp	r3, #0
10005a82:	d00a      	beq.n	10005a9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
10005a84:	687b      	ldr	r3, [r7, #4]
10005a86:	681b      	ldr	r3, [r3, #0]
10005a88:	685b      	ldr	r3, [r3, #4]
10005a8a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
10005a8e:	687b      	ldr	r3, [r7, #4]
10005a90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
10005a92:	687b      	ldr	r3, [r7, #4]
10005a94:	681b      	ldr	r3, [r3, #0]
10005a96:	430a      	orrs	r2, r1
10005a98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
10005a9a:	687b      	ldr	r3, [r7, #4]
10005a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10005a9e:	f003 0308 	and.w	r3, r3, #8
10005aa2:	2b00      	cmp	r3, #0
10005aa4:	d00a      	beq.n	10005abc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
10005aa6:	687b      	ldr	r3, [r7, #4]
10005aa8:	681b      	ldr	r3, [r3, #0]
10005aaa:	685b      	ldr	r3, [r3, #4]
10005aac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
10005ab0:	687b      	ldr	r3, [r7, #4]
10005ab2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
10005ab4:	687b      	ldr	r3, [r7, #4]
10005ab6:	681b      	ldr	r3, [r3, #0]
10005ab8:	430a      	orrs	r2, r1
10005aba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
10005abc:	687b      	ldr	r3, [r7, #4]
10005abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10005ac0:	f003 0310 	and.w	r3, r3, #16
10005ac4:	2b00      	cmp	r3, #0
10005ac6:	d00a      	beq.n	10005ade <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
10005ac8:	687b      	ldr	r3, [r7, #4]
10005aca:	681b      	ldr	r3, [r3, #0]
10005acc:	689b      	ldr	r3, [r3, #8]
10005ace:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
10005ad2:	687b      	ldr	r3, [r7, #4]
10005ad4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
10005ad6:	687b      	ldr	r3, [r7, #4]
10005ad8:	681b      	ldr	r3, [r3, #0]
10005ada:	430a      	orrs	r2, r1
10005adc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
10005ade:	687b      	ldr	r3, [r7, #4]
10005ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10005ae2:	f003 0320 	and.w	r3, r3, #32
10005ae6:	2b00      	cmp	r3, #0
10005ae8:	d00a      	beq.n	10005b00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
10005aea:	687b      	ldr	r3, [r7, #4]
10005aec:	681b      	ldr	r3, [r3, #0]
10005aee:	689b      	ldr	r3, [r3, #8]
10005af0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
10005af4:	687b      	ldr	r3, [r7, #4]
10005af6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
10005af8:	687b      	ldr	r3, [r7, #4]
10005afa:	681b      	ldr	r3, [r3, #0]
10005afc:	430a      	orrs	r2, r1
10005afe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
10005b00:	687b      	ldr	r3, [r7, #4]
10005b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10005b04:	f003 0340 	and.w	r3, r3, #64	; 0x40
10005b08:	2b00      	cmp	r3, #0
10005b0a:	d01a      	beq.n	10005b42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
10005b0c:	687b      	ldr	r3, [r7, #4]
10005b0e:	681b      	ldr	r3, [r3, #0]
10005b10:	685b      	ldr	r3, [r3, #4]
10005b12:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
10005b16:	687b      	ldr	r3, [r7, #4]
10005b18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
10005b1a:	687b      	ldr	r3, [r7, #4]
10005b1c:	681b      	ldr	r3, [r3, #0]
10005b1e:	430a      	orrs	r2, r1
10005b20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
10005b22:	687b      	ldr	r3, [r7, #4]
10005b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
10005b26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
10005b2a:	d10a      	bne.n	10005b42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
10005b2c:	687b      	ldr	r3, [r7, #4]
10005b2e:	681b      	ldr	r3, [r3, #0]
10005b30:	685b      	ldr	r3, [r3, #4]
10005b32:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
10005b36:	687b      	ldr	r3, [r7, #4]
10005b38:	6c9a      	ldr	r2, [r3, #72]	; 0x48
10005b3a:	687b      	ldr	r3, [r7, #4]
10005b3c:	681b      	ldr	r3, [r3, #0]
10005b3e:	430a      	orrs	r2, r1
10005b40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
10005b42:	687b      	ldr	r3, [r7, #4]
10005b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10005b46:	f003 0380 	and.w	r3, r3, #128	; 0x80
10005b4a:	2b00      	cmp	r3, #0
10005b4c:	d00a      	beq.n	10005b64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
10005b4e:	687b      	ldr	r3, [r7, #4]
10005b50:	681b      	ldr	r3, [r3, #0]
10005b52:	685b      	ldr	r3, [r3, #4]
10005b54:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
10005b58:	687b      	ldr	r3, [r7, #4]
10005b5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
10005b5c:	687b      	ldr	r3, [r7, #4]
10005b5e:	681b      	ldr	r3, [r3, #0]
10005b60:	430a      	orrs	r2, r1
10005b62:	605a      	str	r2, [r3, #4]
  }
}
10005b64:	bf00      	nop
10005b66:	370c      	adds	r7, #12
10005b68:	46bd      	mov	sp, r7
10005b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
10005b6e:	4770      	bx	lr

10005b70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
10005b70:	b580      	push	{r7, lr}
10005b72:	b086      	sub	sp, #24
10005b74:	af02      	add	r7, sp, #8
10005b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
10005b78:	687b      	ldr	r3, [r7, #4]
10005b7a:	2200      	movs	r2, #0
10005b7c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
10005b80:	f7fa fdec 	bl	1000075c <HAL_GetTick>
10005b84:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
10005b86:	687b      	ldr	r3, [r7, #4]
10005b88:	681b      	ldr	r3, [r3, #0]
10005b8a:	681b      	ldr	r3, [r3, #0]
10005b8c:	f003 0308 	and.w	r3, r3, #8
10005b90:	2b08      	cmp	r3, #8
10005b92:	d10e      	bne.n	10005bb2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
10005b94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
10005b98:	9300      	str	r3, [sp, #0]
10005b9a:	68fb      	ldr	r3, [r7, #12]
10005b9c:	2200      	movs	r2, #0
10005b9e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
10005ba2:	6878      	ldr	r0, [r7, #4]
10005ba4:	f000 f82c 	bl	10005c00 <UART_WaitOnFlagUntilTimeout>
10005ba8:	4603      	mov	r3, r0
10005baa:	2b00      	cmp	r3, #0
10005bac:	d001      	beq.n	10005bb2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
10005bae:	2303      	movs	r3, #3
10005bb0:	e022      	b.n	10005bf8 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
10005bb2:	687b      	ldr	r3, [r7, #4]
10005bb4:	681b      	ldr	r3, [r3, #0]
10005bb6:	681b      	ldr	r3, [r3, #0]
10005bb8:	f003 0304 	and.w	r3, r3, #4
10005bbc:	2b04      	cmp	r3, #4
10005bbe:	d10e      	bne.n	10005bde <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
10005bc0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
10005bc4:	9300      	str	r3, [sp, #0]
10005bc6:	68fb      	ldr	r3, [r7, #12]
10005bc8:	2200      	movs	r2, #0
10005bca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
10005bce:	6878      	ldr	r0, [r7, #4]
10005bd0:	f000 f816 	bl	10005c00 <UART_WaitOnFlagUntilTimeout>
10005bd4:	4603      	mov	r3, r0
10005bd6:	2b00      	cmp	r3, #0
10005bd8:	d001      	beq.n	10005bde <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
10005bda:	2303      	movs	r3, #3
10005bdc:	e00c      	b.n	10005bf8 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
10005bde:	687b      	ldr	r3, [r7, #4]
10005be0:	2220      	movs	r2, #32
10005be2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
10005be6:	687b      	ldr	r3, [r7, #4]
10005be8:	2220      	movs	r2, #32
10005bea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  __HAL_UNLOCK(huart);
10005bee:	687b      	ldr	r3, [r7, #4]
10005bf0:	2200      	movs	r2, #0
10005bf2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
10005bf6:	2300      	movs	r3, #0
}
10005bf8:	4618      	mov	r0, r3
10005bfa:	3710      	adds	r7, #16
10005bfc:	46bd      	mov	sp, r7
10005bfe:	bd80      	pop	{r7, pc}

10005c00 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
10005c00:	b580      	push	{r7, lr}
10005c02:	b084      	sub	sp, #16
10005c04:	af00      	add	r7, sp, #0
10005c06:	60f8      	str	r0, [r7, #12]
10005c08:	60b9      	str	r1, [r7, #8]
10005c0a:	603b      	str	r3, [r7, #0]
10005c0c:	4613      	mov	r3, r2
10005c0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
10005c10:	e062      	b.n	10005cd8 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
10005c12:	69bb      	ldr	r3, [r7, #24]
10005c14:	f1b3 3fff 	cmp.w	r3, #4294967295
10005c18:	d05e      	beq.n	10005cd8 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
10005c1a:	f7fa fd9f 	bl	1000075c <HAL_GetTick>
10005c1e:	4602      	mov	r2, r0
10005c20:	683b      	ldr	r3, [r7, #0]
10005c22:	1ad3      	subs	r3, r2, r3
10005c24:	69ba      	ldr	r2, [r7, #24]
10005c26:	429a      	cmp	r2, r3
10005c28:	d302      	bcc.n	10005c30 <UART_WaitOnFlagUntilTimeout+0x30>
10005c2a:	69bb      	ldr	r3, [r7, #24]
10005c2c:	2b00      	cmp	r3, #0
10005c2e:	d11d      	bne.n	10005c6c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
10005c30:	68fb      	ldr	r3, [r7, #12]
10005c32:	681b      	ldr	r3, [r3, #0]
10005c34:	681a      	ldr	r2, [r3, #0]
10005c36:	68fb      	ldr	r3, [r7, #12]
10005c38:	681b      	ldr	r3, [r3, #0]
10005c3a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
10005c3e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
10005c40:	68fb      	ldr	r3, [r7, #12]
10005c42:	681b      	ldr	r3, [r3, #0]
10005c44:	689a      	ldr	r2, [r3, #8]
10005c46:	68fb      	ldr	r3, [r7, #12]
10005c48:	681b      	ldr	r3, [r3, #0]
10005c4a:	f022 0201 	bic.w	r2, r2, #1
10005c4e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
10005c50:	68fb      	ldr	r3, [r7, #12]
10005c52:	2220      	movs	r2, #32
10005c54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
10005c58:	68fb      	ldr	r3, [r7, #12]
10005c5a:	2220      	movs	r2, #32
10005c5c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
10005c60:	68fb      	ldr	r3, [r7, #12]
10005c62:	2200      	movs	r2, #0
10005c64:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
10005c68:	2303      	movs	r3, #3
10005c6a:	e045      	b.n	10005cf8 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
10005c6c:	68fb      	ldr	r3, [r7, #12]
10005c6e:	681b      	ldr	r3, [r3, #0]
10005c70:	681b      	ldr	r3, [r3, #0]
10005c72:	f003 0304 	and.w	r3, r3, #4
10005c76:	2b00      	cmp	r3, #0
10005c78:	d02e      	beq.n	10005cd8 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
10005c7a:	68fb      	ldr	r3, [r7, #12]
10005c7c:	681b      	ldr	r3, [r3, #0]
10005c7e:	69db      	ldr	r3, [r3, #28]
10005c80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
10005c84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
10005c88:	d126      	bne.n	10005cd8 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
10005c8a:	68fb      	ldr	r3, [r7, #12]
10005c8c:	681b      	ldr	r3, [r3, #0]
10005c8e:	f44f 6200 	mov.w	r2, #2048	; 0x800
10005c92:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
10005c94:	68fb      	ldr	r3, [r7, #12]
10005c96:	681b      	ldr	r3, [r3, #0]
10005c98:	681a      	ldr	r2, [r3, #0]
10005c9a:	68fb      	ldr	r3, [r7, #12]
10005c9c:	681b      	ldr	r3, [r3, #0]
10005c9e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
10005ca2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
10005ca4:	68fb      	ldr	r3, [r7, #12]
10005ca6:	681b      	ldr	r3, [r3, #0]
10005ca8:	689a      	ldr	r2, [r3, #8]
10005caa:	68fb      	ldr	r3, [r7, #12]
10005cac:	681b      	ldr	r3, [r3, #0]
10005cae:	f022 0201 	bic.w	r2, r2, #1
10005cb2:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
10005cb4:	68fb      	ldr	r3, [r7, #12]
10005cb6:	2220      	movs	r2, #32
10005cb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
10005cbc:	68fb      	ldr	r3, [r7, #12]
10005cbe:	2220      	movs	r2, #32
10005cc0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
10005cc4:	68fb      	ldr	r3, [r7, #12]
10005cc6:	2220      	movs	r2, #32
10005cc8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
10005ccc:	68fb      	ldr	r3, [r7, #12]
10005cce:	2200      	movs	r2, #0
10005cd0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
          
          return HAL_TIMEOUT;
10005cd4:	2303      	movs	r3, #3
10005cd6:	e00f      	b.n	10005cf8 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
10005cd8:	68fb      	ldr	r3, [r7, #12]
10005cda:	681b      	ldr	r3, [r3, #0]
10005cdc:	69da      	ldr	r2, [r3, #28]
10005cde:	68bb      	ldr	r3, [r7, #8]
10005ce0:	4013      	ands	r3, r2
10005ce2:	68ba      	ldr	r2, [r7, #8]
10005ce4:	429a      	cmp	r2, r3
10005ce6:	bf0c      	ite	eq
10005ce8:	2301      	moveq	r3, #1
10005cea:	2300      	movne	r3, #0
10005cec:	b2db      	uxtb	r3, r3
10005cee:	461a      	mov	r2, r3
10005cf0:	79fb      	ldrb	r3, [r7, #7]
10005cf2:	429a      	cmp	r2, r3
10005cf4:	d08d      	beq.n	10005c12 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
10005cf6:	2300      	movs	r3, #0
}
10005cf8:	4618      	mov	r0, r3
10005cfa:	3710      	adds	r7, #16
10005cfc:	46bd      	mov	sp, r7
10005cfe:	bd80      	pop	{r7, pc}

10005d00 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
10005d00:	b480      	push	{r7}
10005d02:	b085      	sub	sp, #20
10005d04:	af00      	add	r7, sp, #0
10005d06:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
10005d08:	687b      	ldr	r3, [r7, #4]
10005d0a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
10005d0e:	2b01      	cmp	r3, #1
10005d10:	d101      	bne.n	10005d16 <HAL_UARTEx_DisableFifoMode+0x16>
10005d12:	2302      	movs	r3, #2
10005d14:	e027      	b.n	10005d66 <HAL_UARTEx_DisableFifoMode+0x66>
10005d16:	687b      	ldr	r3, [r7, #4]
10005d18:	2201      	movs	r2, #1
10005d1a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
10005d1e:	687b      	ldr	r3, [r7, #4]
10005d20:	2224      	movs	r2, #36	; 0x24
10005d22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
10005d26:	687b      	ldr	r3, [r7, #4]
10005d28:	681b      	ldr	r3, [r3, #0]
10005d2a:	681b      	ldr	r3, [r3, #0]
10005d2c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
10005d2e:	687b      	ldr	r3, [r7, #4]
10005d30:	681b      	ldr	r3, [r3, #0]
10005d32:	681a      	ldr	r2, [r3, #0]
10005d34:	687b      	ldr	r3, [r7, #4]
10005d36:	681b      	ldr	r3, [r3, #0]
10005d38:	f022 0201 	bic.w	r2, r2, #1
10005d3c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
10005d3e:	68fb      	ldr	r3, [r7, #12]
10005d40:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
10005d44:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
10005d46:	687b      	ldr	r3, [r7, #4]
10005d48:	2200      	movs	r2, #0
10005d4a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
10005d4c:	687b      	ldr	r3, [r7, #4]
10005d4e:	681b      	ldr	r3, [r3, #0]
10005d50:	68fa      	ldr	r2, [r7, #12]
10005d52:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
10005d54:	687b      	ldr	r3, [r7, #4]
10005d56:	2220      	movs	r2, #32
10005d58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
10005d5c:	687b      	ldr	r3, [r7, #4]
10005d5e:	2200      	movs	r2, #0
10005d60:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
10005d64:	2300      	movs	r3, #0
}
10005d66:	4618      	mov	r0, r3
10005d68:	3714      	adds	r7, #20
10005d6a:	46bd      	mov	sp, r7
10005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
10005d70:	4770      	bx	lr

10005d72 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
10005d72:	b580      	push	{r7, lr}
10005d74:	b084      	sub	sp, #16
10005d76:	af00      	add	r7, sp, #0
10005d78:	6078      	str	r0, [r7, #4]
10005d7a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
10005d7c:	687b      	ldr	r3, [r7, #4]
10005d7e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
10005d82:	2b01      	cmp	r3, #1
10005d84:	d101      	bne.n	10005d8a <HAL_UARTEx_SetTxFifoThreshold+0x18>
10005d86:	2302      	movs	r3, #2
10005d88:	e02d      	b.n	10005de6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
10005d8a:	687b      	ldr	r3, [r7, #4]
10005d8c:	2201      	movs	r2, #1
10005d8e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
10005d92:	687b      	ldr	r3, [r7, #4]
10005d94:	2224      	movs	r2, #36	; 0x24
10005d96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
10005d9a:	687b      	ldr	r3, [r7, #4]
10005d9c:	681b      	ldr	r3, [r3, #0]
10005d9e:	681b      	ldr	r3, [r3, #0]
10005da0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
10005da2:	687b      	ldr	r3, [r7, #4]
10005da4:	681b      	ldr	r3, [r3, #0]
10005da6:	681a      	ldr	r2, [r3, #0]
10005da8:	687b      	ldr	r3, [r7, #4]
10005daa:	681b      	ldr	r3, [r3, #0]
10005dac:	f022 0201 	bic.w	r2, r2, #1
10005db0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
10005db2:	687b      	ldr	r3, [r7, #4]
10005db4:	681b      	ldr	r3, [r3, #0]
10005db6:	689b      	ldr	r3, [r3, #8]
10005db8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
10005dbc:	687b      	ldr	r3, [r7, #4]
10005dbe:	681b      	ldr	r3, [r3, #0]
10005dc0:	683a      	ldr	r2, [r7, #0]
10005dc2:	430a      	orrs	r2, r1
10005dc4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
10005dc6:	6878      	ldr	r0, [r7, #4]
10005dc8:	f000 f850 	bl	10005e6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
10005dcc:	687b      	ldr	r3, [r7, #4]
10005dce:	681b      	ldr	r3, [r3, #0]
10005dd0:	68fa      	ldr	r2, [r7, #12]
10005dd2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
10005dd4:	687b      	ldr	r3, [r7, #4]
10005dd6:	2220      	movs	r2, #32
10005dd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
10005ddc:	687b      	ldr	r3, [r7, #4]
10005dde:	2200      	movs	r2, #0
10005de0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
10005de4:	2300      	movs	r3, #0
}
10005de6:	4618      	mov	r0, r3
10005de8:	3710      	adds	r7, #16
10005dea:	46bd      	mov	sp, r7
10005dec:	bd80      	pop	{r7, pc}

10005dee <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
10005dee:	b580      	push	{r7, lr}
10005df0:	b084      	sub	sp, #16
10005df2:	af00      	add	r7, sp, #0
10005df4:	6078      	str	r0, [r7, #4]
10005df6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
10005df8:	687b      	ldr	r3, [r7, #4]
10005dfa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
10005dfe:	2b01      	cmp	r3, #1
10005e00:	d101      	bne.n	10005e06 <HAL_UARTEx_SetRxFifoThreshold+0x18>
10005e02:	2302      	movs	r3, #2
10005e04:	e02d      	b.n	10005e62 <HAL_UARTEx_SetRxFifoThreshold+0x74>
10005e06:	687b      	ldr	r3, [r7, #4]
10005e08:	2201      	movs	r2, #1
10005e0a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
10005e0e:	687b      	ldr	r3, [r7, #4]
10005e10:	2224      	movs	r2, #36	; 0x24
10005e12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
10005e16:	687b      	ldr	r3, [r7, #4]
10005e18:	681b      	ldr	r3, [r3, #0]
10005e1a:	681b      	ldr	r3, [r3, #0]
10005e1c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
10005e1e:	687b      	ldr	r3, [r7, #4]
10005e20:	681b      	ldr	r3, [r3, #0]
10005e22:	681a      	ldr	r2, [r3, #0]
10005e24:	687b      	ldr	r3, [r7, #4]
10005e26:	681b      	ldr	r3, [r3, #0]
10005e28:	f022 0201 	bic.w	r2, r2, #1
10005e2c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
10005e2e:	687b      	ldr	r3, [r7, #4]
10005e30:	681b      	ldr	r3, [r3, #0]
10005e32:	689b      	ldr	r3, [r3, #8]
10005e34:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
10005e38:	687b      	ldr	r3, [r7, #4]
10005e3a:	681b      	ldr	r3, [r3, #0]
10005e3c:	683a      	ldr	r2, [r7, #0]
10005e3e:	430a      	orrs	r2, r1
10005e40:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
10005e42:	6878      	ldr	r0, [r7, #4]
10005e44:	f000 f812 	bl	10005e6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
10005e48:	687b      	ldr	r3, [r7, #4]
10005e4a:	681b      	ldr	r3, [r3, #0]
10005e4c:	68fa      	ldr	r2, [r7, #12]
10005e4e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
10005e50:	687b      	ldr	r3, [r7, #4]
10005e52:	2220      	movs	r2, #32
10005e54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
10005e58:	687b      	ldr	r3, [r7, #4]
10005e5a:	2200      	movs	r2, #0
10005e5c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
10005e60:	2300      	movs	r3, #0
}
10005e62:	4618      	mov	r0, r3
10005e64:	3710      	adds	r7, #16
10005e66:	46bd      	mov	sp, r7
10005e68:	bd80      	pop	{r7, pc}
	...

10005e6c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
10005e6c:	b480      	push	{r7}
10005e6e:	b089      	sub	sp, #36	; 0x24
10005e70:	af00      	add	r7, sp, #0
10005e72:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
10005e74:	4a2f      	ldr	r2, [pc, #188]	; (10005f34 <UARTEx_SetNbDataToProcess+0xc8>)
10005e76:	f107 0314 	add.w	r3, r7, #20
10005e7a:	e892 0003 	ldmia.w	r2, {r0, r1}
10005e7e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
10005e82:	4a2d      	ldr	r2, [pc, #180]	; (10005f38 <UARTEx_SetNbDataToProcess+0xcc>)
10005e84:	f107 030c 	add.w	r3, r7, #12
10005e88:	e892 0003 	ldmia.w	r2, {r0, r1}
10005e8c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
10005e90:	687b      	ldr	r3, [r7, #4]
10005e92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
10005e94:	2b00      	cmp	r3, #0
10005e96:	d108      	bne.n	10005eaa <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
10005e98:	687b      	ldr	r3, [r7, #4]
10005e9a:	2201      	movs	r2, #1
10005e9c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
10005ea0:	687b      	ldr	r3, [r7, #4]
10005ea2:	2201      	movs	r2, #1
10005ea4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
10005ea8:	e03d      	b.n	10005f26 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
10005eaa:	2308      	movs	r3, #8
10005eac:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
10005eae:	2308      	movs	r3, #8
10005eb0:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
10005eb2:	687b      	ldr	r3, [r7, #4]
10005eb4:	681b      	ldr	r3, [r3, #0]
10005eb6:	689b      	ldr	r3, [r3, #8]
10005eb8:	0e5b      	lsrs	r3, r3, #25
10005eba:	b2db      	uxtb	r3, r3
10005ebc:	f003 0307 	and.w	r3, r3, #7
10005ec0:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
10005ec2:	687b      	ldr	r3, [r7, #4]
10005ec4:	681b      	ldr	r3, [r3, #0]
10005ec6:	689b      	ldr	r3, [r3, #8]
10005ec8:	0f5b      	lsrs	r3, r3, #29
10005eca:	b2db      	uxtb	r3, r3
10005ecc:	f003 0307 	and.w	r3, r3, #7
10005ed0:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
10005ed2:	7fbb      	ldrb	r3, [r7, #30]
10005ed4:	7f3a      	ldrb	r2, [r7, #28]
10005ed6:	f107 0120 	add.w	r1, r7, #32
10005eda:	440a      	add	r2, r1
10005edc:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
10005ee0:	fb02 f303 	mul.w	r3, r2, r3
10005ee4:	7f3a      	ldrb	r2, [r7, #28]
10005ee6:	f107 0120 	add.w	r1, r7, #32
10005eea:	440a      	add	r2, r1
10005eec:	f812 2c14 	ldrb.w	r2, [r2, #-20]
10005ef0:	fb93 f3f2 	sdiv	r3, r3, r2
10005ef4:	b29a      	uxth	r2, r3
10005ef6:	687b      	ldr	r3, [r7, #4]
10005ef8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
10005efc:	7ffb      	ldrb	r3, [r7, #31]
10005efe:	7f7a      	ldrb	r2, [r7, #29]
10005f00:	f107 0120 	add.w	r1, r7, #32
10005f04:	440a      	add	r2, r1
10005f06:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
10005f0a:	fb02 f303 	mul.w	r3, r2, r3
10005f0e:	7f7a      	ldrb	r2, [r7, #29]
10005f10:	f107 0120 	add.w	r1, r7, #32
10005f14:	440a      	add	r2, r1
10005f16:	f812 2c14 	ldrb.w	r2, [r2, #-20]
10005f1a:	fb93 f3f2 	sdiv	r3, r3, r2
10005f1e:	b29a      	uxth	r2, r3
10005f20:	687b      	ldr	r3, [r7, #4]
10005f22:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
10005f26:	bf00      	nop
10005f28:	3724      	adds	r7, #36	; 0x24
10005f2a:	46bd      	mov	sp, r7
10005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
10005f30:	4770      	bx	lr
10005f32:	bf00      	nop
10005f34:	100093a4 	.word	0x100093a4
10005f38:	100093ac 	.word	0x100093ac

10005f3c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
10005f3c:	b480      	push	{r7}
10005f3e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
10005f40:	bf00      	nop
10005f42:	46bd      	mov	sp, r7
10005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
10005f48:	4770      	bx	lr
	...

10005f4c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
10005f4c:	b480      	push	{r7}
10005f4e:	b085      	sub	sp, #20
10005f50:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
10005f52:	f3ef 8305 	mrs	r3, IPSR
10005f56:	60bb      	str	r3, [r7, #8]
  return(result);
10005f58:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
10005f5a:	2b00      	cmp	r3, #0
10005f5c:	d10f      	bne.n	10005f7e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
10005f5e:	f3ef 8310 	mrs	r3, PRIMASK
10005f62:	607b      	str	r3, [r7, #4]
  return(result);
10005f64:	687b      	ldr	r3, [r7, #4]
10005f66:	2b00      	cmp	r3, #0
10005f68:	d105      	bne.n	10005f76 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
10005f6a:	f3ef 8311 	mrs	r3, BASEPRI
10005f6e:	603b      	str	r3, [r7, #0]
  return(result);
10005f70:	683b      	ldr	r3, [r7, #0]
10005f72:	2b00      	cmp	r3, #0
10005f74:	d007      	beq.n	10005f86 <osKernelInitialize+0x3a>
10005f76:	4b0e      	ldr	r3, [pc, #56]	; (10005fb0 <osKernelInitialize+0x64>)
10005f78:	681b      	ldr	r3, [r3, #0]
10005f7a:	2b02      	cmp	r3, #2
10005f7c:	d103      	bne.n	10005f86 <osKernelInitialize+0x3a>
    stat = osErrorISR;
10005f7e:	f06f 0305 	mvn.w	r3, #5
10005f82:	60fb      	str	r3, [r7, #12]
10005f84:	e00c      	b.n	10005fa0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
10005f86:	4b0a      	ldr	r3, [pc, #40]	; (10005fb0 <osKernelInitialize+0x64>)
10005f88:	681b      	ldr	r3, [r3, #0]
10005f8a:	2b00      	cmp	r3, #0
10005f8c:	d105      	bne.n	10005f9a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
10005f8e:	4b08      	ldr	r3, [pc, #32]	; (10005fb0 <osKernelInitialize+0x64>)
10005f90:	2201      	movs	r2, #1
10005f92:	601a      	str	r2, [r3, #0]
      stat = osOK;
10005f94:	2300      	movs	r3, #0
10005f96:	60fb      	str	r3, [r7, #12]
10005f98:	e002      	b.n	10005fa0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
10005f9a:	f04f 33ff 	mov.w	r3, #4294967295
10005f9e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
10005fa0:	68fb      	ldr	r3, [r7, #12]
}
10005fa2:	4618      	mov	r0, r3
10005fa4:	3714      	adds	r7, #20
10005fa6:	46bd      	mov	sp, r7
10005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
10005fac:	4770      	bx	lr
10005fae:	bf00      	nop
10005fb0:	10020094 	.word	0x10020094

10005fb4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
10005fb4:	b580      	push	{r7, lr}
10005fb6:	b084      	sub	sp, #16
10005fb8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
10005fba:	f3ef 8305 	mrs	r3, IPSR
10005fbe:	60bb      	str	r3, [r7, #8]
  return(result);
10005fc0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
10005fc2:	2b00      	cmp	r3, #0
10005fc4:	d10f      	bne.n	10005fe6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
10005fc6:	f3ef 8310 	mrs	r3, PRIMASK
10005fca:	607b      	str	r3, [r7, #4]
  return(result);
10005fcc:	687b      	ldr	r3, [r7, #4]
10005fce:	2b00      	cmp	r3, #0
10005fd0:	d105      	bne.n	10005fde <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
10005fd2:	f3ef 8311 	mrs	r3, BASEPRI
10005fd6:	603b      	str	r3, [r7, #0]
  return(result);
10005fd8:	683b      	ldr	r3, [r7, #0]
10005fda:	2b00      	cmp	r3, #0
10005fdc:	d007      	beq.n	10005fee <osKernelStart+0x3a>
10005fde:	4b0f      	ldr	r3, [pc, #60]	; (1000601c <osKernelStart+0x68>)
10005fe0:	681b      	ldr	r3, [r3, #0]
10005fe2:	2b02      	cmp	r3, #2
10005fe4:	d103      	bne.n	10005fee <osKernelStart+0x3a>
    stat = osErrorISR;
10005fe6:	f06f 0305 	mvn.w	r3, #5
10005fea:	60fb      	str	r3, [r7, #12]
10005fec:	e010      	b.n	10006010 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
10005fee:	4b0b      	ldr	r3, [pc, #44]	; (1000601c <osKernelStart+0x68>)
10005ff0:	681b      	ldr	r3, [r3, #0]
10005ff2:	2b01      	cmp	r3, #1
10005ff4:	d109      	bne.n	1000600a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
10005ff6:	f7ff ffa1 	bl	10005f3c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
10005ffa:	4b08      	ldr	r3, [pc, #32]	; (1000601c <osKernelStart+0x68>)
10005ffc:	2202      	movs	r2, #2
10005ffe:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
10006000:	f001 fc84 	bl	1000790c <vTaskStartScheduler>
      stat = osOK;
10006004:	2300      	movs	r3, #0
10006006:	60fb      	str	r3, [r7, #12]
10006008:	e002      	b.n	10006010 <osKernelStart+0x5c>
    } else {
      stat = osError;
1000600a:	f04f 33ff 	mov.w	r3, #4294967295
1000600e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
10006010:	68fb      	ldr	r3, [r7, #12]
}
10006012:	4618      	mov	r0, r3
10006014:	3710      	adds	r7, #16
10006016:	46bd      	mov	sp, r7
10006018:	bd80      	pop	{r7, pc}
1000601a:	bf00      	nop
1000601c:	10020094 	.word	0x10020094

10006020 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
10006020:	b580      	push	{r7, lr}
10006022:	b090      	sub	sp, #64	; 0x40
10006024:	af04      	add	r7, sp, #16
10006026:	60f8      	str	r0, [r7, #12]
10006028:	60b9      	str	r1, [r7, #8]
1000602a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
1000602c:	2300      	movs	r3, #0
1000602e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
10006030:	f3ef 8305 	mrs	r3, IPSR
10006034:	61fb      	str	r3, [r7, #28]
  return(result);
10006036:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
10006038:	2b00      	cmp	r3, #0
1000603a:	f040 808f 	bne.w	1000615c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
1000603e:	f3ef 8310 	mrs	r3, PRIMASK
10006042:	61bb      	str	r3, [r7, #24]
  return(result);
10006044:	69bb      	ldr	r3, [r7, #24]
10006046:	2b00      	cmp	r3, #0
10006048:	d105      	bne.n	10006056 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
1000604a:	f3ef 8311 	mrs	r3, BASEPRI
1000604e:	617b      	str	r3, [r7, #20]
  return(result);
10006050:	697b      	ldr	r3, [r7, #20]
10006052:	2b00      	cmp	r3, #0
10006054:	d003      	beq.n	1000605e <osThreadNew+0x3e>
10006056:	4b44      	ldr	r3, [pc, #272]	; (10006168 <osThreadNew+0x148>)
10006058:	681b      	ldr	r3, [r3, #0]
1000605a:	2b02      	cmp	r3, #2
1000605c:	d07e      	beq.n	1000615c <osThreadNew+0x13c>
1000605e:	68fb      	ldr	r3, [r7, #12]
10006060:	2b00      	cmp	r3, #0
10006062:	d07b      	beq.n	1000615c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
10006064:	2380      	movs	r3, #128	; 0x80
10006066:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
10006068:	2318      	movs	r3, #24
1000606a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
1000606c:	2300      	movs	r3, #0
1000606e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
10006070:	f04f 33ff 	mov.w	r3, #4294967295
10006074:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
10006076:	687b      	ldr	r3, [r7, #4]
10006078:	2b00      	cmp	r3, #0
1000607a:	d045      	beq.n	10006108 <osThreadNew+0xe8>
      if (attr->name != NULL) {
1000607c:	687b      	ldr	r3, [r7, #4]
1000607e:	681b      	ldr	r3, [r3, #0]
10006080:	2b00      	cmp	r3, #0
10006082:	d002      	beq.n	1000608a <osThreadNew+0x6a>
        name = attr->name;
10006084:	687b      	ldr	r3, [r7, #4]
10006086:	681b      	ldr	r3, [r3, #0]
10006088:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
1000608a:	687b      	ldr	r3, [r7, #4]
1000608c:	699b      	ldr	r3, [r3, #24]
1000608e:	2b00      	cmp	r3, #0
10006090:	d002      	beq.n	10006098 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
10006092:	687b      	ldr	r3, [r7, #4]
10006094:	699b      	ldr	r3, [r3, #24]
10006096:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
10006098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000609a:	2b00      	cmp	r3, #0
1000609c:	d008      	beq.n	100060b0 <osThreadNew+0x90>
1000609e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100060a0:	2b38      	cmp	r3, #56	; 0x38
100060a2:	d805      	bhi.n	100060b0 <osThreadNew+0x90>
100060a4:	687b      	ldr	r3, [r7, #4]
100060a6:	685b      	ldr	r3, [r3, #4]
100060a8:	f003 0301 	and.w	r3, r3, #1
100060ac:	2b00      	cmp	r3, #0
100060ae:	d001      	beq.n	100060b4 <osThreadNew+0x94>
        return (NULL);
100060b0:	2300      	movs	r3, #0
100060b2:	e054      	b.n	1000615e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
100060b4:	687b      	ldr	r3, [r7, #4]
100060b6:	695b      	ldr	r3, [r3, #20]
100060b8:	2b00      	cmp	r3, #0
100060ba:	d003      	beq.n	100060c4 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
100060bc:	687b      	ldr	r3, [r7, #4]
100060be:	695b      	ldr	r3, [r3, #20]
100060c0:	089b      	lsrs	r3, r3, #2
100060c2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
100060c4:	687b      	ldr	r3, [r7, #4]
100060c6:	689b      	ldr	r3, [r3, #8]
100060c8:	2b00      	cmp	r3, #0
100060ca:	d00e      	beq.n	100060ea <osThreadNew+0xca>
100060cc:	687b      	ldr	r3, [r7, #4]
100060ce:	68db      	ldr	r3, [r3, #12]
100060d0:	2b5b      	cmp	r3, #91	; 0x5b
100060d2:	d90a      	bls.n	100060ea <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
100060d4:	687b      	ldr	r3, [r7, #4]
100060d6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
100060d8:	2b00      	cmp	r3, #0
100060da:	d006      	beq.n	100060ea <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
100060dc:	687b      	ldr	r3, [r7, #4]
100060de:	695b      	ldr	r3, [r3, #20]
100060e0:	2b00      	cmp	r3, #0
100060e2:	d002      	beq.n	100060ea <osThreadNew+0xca>
        mem = 1;
100060e4:	2301      	movs	r3, #1
100060e6:	623b      	str	r3, [r7, #32]
100060e8:	e010      	b.n	1000610c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
100060ea:	687b      	ldr	r3, [r7, #4]
100060ec:	689b      	ldr	r3, [r3, #8]
100060ee:	2b00      	cmp	r3, #0
100060f0:	d10c      	bne.n	1000610c <osThreadNew+0xec>
100060f2:	687b      	ldr	r3, [r7, #4]
100060f4:	68db      	ldr	r3, [r3, #12]
100060f6:	2b00      	cmp	r3, #0
100060f8:	d108      	bne.n	1000610c <osThreadNew+0xec>
100060fa:	687b      	ldr	r3, [r7, #4]
100060fc:	691b      	ldr	r3, [r3, #16]
100060fe:	2b00      	cmp	r3, #0
10006100:	d104      	bne.n	1000610c <osThreadNew+0xec>
          mem = 0;
10006102:	2300      	movs	r3, #0
10006104:	623b      	str	r3, [r7, #32]
10006106:	e001      	b.n	1000610c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
10006108:	2300      	movs	r3, #0
1000610a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
1000610c:	6a3b      	ldr	r3, [r7, #32]
1000610e:	2b01      	cmp	r3, #1
10006110:	d110      	bne.n	10006134 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
10006112:	687b      	ldr	r3, [r7, #4]
10006114:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
10006116:	687a      	ldr	r2, [r7, #4]
10006118:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
1000611a:	9202      	str	r2, [sp, #8]
1000611c:	9301      	str	r3, [sp, #4]
1000611e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10006120:	9300      	str	r3, [sp, #0]
10006122:	68bb      	ldr	r3, [r7, #8]
10006124:	6aba      	ldr	r2, [r7, #40]	; 0x28
10006126:	6af9      	ldr	r1, [r7, #44]	; 0x2c
10006128:	68f8      	ldr	r0, [r7, #12]
1000612a:	f001 fa1d 	bl	10007568 <xTaskCreateStatic>
1000612e:	4603      	mov	r3, r0
10006130:	613b      	str	r3, [r7, #16]
10006132:	e013      	b.n	1000615c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
10006134:	6a3b      	ldr	r3, [r7, #32]
10006136:	2b00      	cmp	r3, #0
10006138:	d110      	bne.n	1000615c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
1000613a:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000613c:	b29a      	uxth	r2, r3
1000613e:	f107 0310 	add.w	r3, r7, #16
10006142:	9301      	str	r3, [sp, #4]
10006144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10006146:	9300      	str	r3, [sp, #0]
10006148:	68bb      	ldr	r3, [r7, #8]
1000614a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
1000614c:	68f8      	ldr	r0, [r7, #12]
1000614e:	f001 fa65 	bl	1000761c <xTaskCreate>
10006152:	4603      	mov	r3, r0
10006154:	2b01      	cmp	r3, #1
10006156:	d001      	beq.n	1000615c <osThreadNew+0x13c>
          hTask = NULL;
10006158:	2300      	movs	r3, #0
1000615a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
1000615c:	693b      	ldr	r3, [r7, #16]
}
1000615e:	4618      	mov	r0, r3
10006160:	3730      	adds	r7, #48	; 0x30
10006162:	46bd      	mov	sp, r7
10006164:	bd80      	pop	{r7, pc}
10006166:	bf00      	nop
10006168:	10020094 	.word	0x10020094

1000616c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
1000616c:	b580      	push	{r7, lr}
1000616e:	b086      	sub	sp, #24
10006170:	af00      	add	r7, sp, #0
10006172:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
10006174:	f3ef 8305 	mrs	r3, IPSR
10006178:	613b      	str	r3, [r7, #16]
  return(result);
1000617a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
1000617c:	2b00      	cmp	r3, #0
1000617e:	d10f      	bne.n	100061a0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
10006180:	f3ef 8310 	mrs	r3, PRIMASK
10006184:	60fb      	str	r3, [r7, #12]
  return(result);
10006186:	68fb      	ldr	r3, [r7, #12]
10006188:	2b00      	cmp	r3, #0
1000618a:	d105      	bne.n	10006198 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
1000618c:	f3ef 8311 	mrs	r3, BASEPRI
10006190:	60bb      	str	r3, [r7, #8]
  return(result);
10006192:	68bb      	ldr	r3, [r7, #8]
10006194:	2b00      	cmp	r3, #0
10006196:	d007      	beq.n	100061a8 <osDelay+0x3c>
10006198:	4b0a      	ldr	r3, [pc, #40]	; (100061c4 <osDelay+0x58>)
1000619a:	681b      	ldr	r3, [r3, #0]
1000619c:	2b02      	cmp	r3, #2
1000619e:	d103      	bne.n	100061a8 <osDelay+0x3c>
    stat = osErrorISR;
100061a0:	f06f 0305 	mvn.w	r3, #5
100061a4:	617b      	str	r3, [r7, #20]
100061a6:	e007      	b.n	100061b8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
100061a8:	2300      	movs	r3, #0
100061aa:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
100061ac:	687b      	ldr	r3, [r7, #4]
100061ae:	2b00      	cmp	r3, #0
100061b0:	d002      	beq.n	100061b8 <osDelay+0x4c>
      vTaskDelay(ticks);
100061b2:	6878      	ldr	r0, [r7, #4]
100061b4:	f001 fb76 	bl	100078a4 <vTaskDelay>
    }
  }

  return (stat);
100061b8:	697b      	ldr	r3, [r7, #20]
}
100061ba:	4618      	mov	r0, r3
100061bc:	3718      	adds	r7, #24
100061be:	46bd      	mov	sp, r7
100061c0:	bd80      	pop	{r7, pc}
100061c2:	bf00      	nop
100061c4:	10020094 	.word	0x10020094

100061c8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
100061c8:	b480      	push	{r7}
100061ca:	b085      	sub	sp, #20
100061cc:	af00      	add	r7, sp, #0
100061ce:	60f8      	str	r0, [r7, #12]
100061d0:	60b9      	str	r1, [r7, #8]
100061d2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
100061d4:	68fb      	ldr	r3, [r7, #12]
100061d6:	4a07      	ldr	r2, [pc, #28]	; (100061f4 <vApplicationGetIdleTaskMemory+0x2c>)
100061d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
100061da:	68bb      	ldr	r3, [r7, #8]
100061dc:	4a06      	ldr	r2, [pc, #24]	; (100061f8 <vApplicationGetIdleTaskMemory+0x30>)
100061de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
100061e0:	687b      	ldr	r3, [r7, #4]
100061e2:	2280      	movs	r2, #128	; 0x80
100061e4:	601a      	str	r2, [r3, #0]
}
100061e6:	bf00      	nop
100061e8:	3714      	adds	r7, #20
100061ea:	46bd      	mov	sp, r7
100061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
100061f0:	4770      	bx	lr
100061f2:	bf00      	nop
100061f4:	10020098 	.word	0x10020098
100061f8:	100200f4 	.word	0x100200f4

100061fc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
100061fc:	b480      	push	{r7}
100061fe:	b085      	sub	sp, #20
10006200:	af00      	add	r7, sp, #0
10006202:	60f8      	str	r0, [r7, #12]
10006204:	60b9      	str	r1, [r7, #8]
10006206:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
10006208:	68fb      	ldr	r3, [r7, #12]
1000620a:	4a07      	ldr	r2, [pc, #28]	; (10006228 <vApplicationGetTimerTaskMemory+0x2c>)
1000620c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
1000620e:	68bb      	ldr	r3, [r7, #8]
10006210:	4a06      	ldr	r2, [pc, #24]	; (1000622c <vApplicationGetTimerTaskMemory+0x30>)
10006212:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
10006214:	687b      	ldr	r3, [r7, #4]
10006216:	f44f 7280 	mov.w	r2, #256	; 0x100
1000621a:	601a      	str	r2, [r3, #0]
}
1000621c:	bf00      	nop
1000621e:	3714      	adds	r7, #20
10006220:	46bd      	mov	sp, r7
10006222:	f85d 7b04 	ldr.w	r7, [sp], #4
10006226:	4770      	bx	lr
10006228:	100202f4 	.word	0x100202f4
1000622c:	10020350 	.word	0x10020350

10006230 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
10006230:	b580      	push	{r7, lr}
10006232:	b08a      	sub	sp, #40	; 0x28
10006234:	af00      	add	r7, sp, #0
10006236:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
10006238:	2300      	movs	r3, #0
1000623a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
1000623c:	f001 fbca 	bl	100079d4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
10006240:	4b57      	ldr	r3, [pc, #348]	; (100063a0 <pvPortMalloc+0x170>)
10006242:	681b      	ldr	r3, [r3, #0]
10006244:	2b00      	cmp	r3, #0
10006246:	d101      	bne.n	1000624c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
10006248:	f000 f90c 	bl	10006464 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
1000624c:	4b55      	ldr	r3, [pc, #340]	; (100063a4 <pvPortMalloc+0x174>)
1000624e:	681a      	ldr	r2, [r3, #0]
10006250:	687b      	ldr	r3, [r7, #4]
10006252:	4013      	ands	r3, r2
10006254:	2b00      	cmp	r3, #0
10006256:	f040 808c 	bne.w	10006372 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
1000625a:	687b      	ldr	r3, [r7, #4]
1000625c:	2b00      	cmp	r3, #0
1000625e:	d01c      	beq.n	1000629a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
10006260:	2208      	movs	r2, #8
10006262:	687b      	ldr	r3, [r7, #4]
10006264:	4413      	add	r3, r2
10006266:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
10006268:	687b      	ldr	r3, [r7, #4]
1000626a:	f003 0307 	and.w	r3, r3, #7
1000626e:	2b00      	cmp	r3, #0
10006270:	d013      	beq.n	1000629a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
10006272:	687b      	ldr	r3, [r7, #4]
10006274:	f023 0307 	bic.w	r3, r3, #7
10006278:	3308      	adds	r3, #8
1000627a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
1000627c:	687b      	ldr	r3, [r7, #4]
1000627e:	f003 0307 	and.w	r3, r3, #7
10006282:	2b00      	cmp	r3, #0
10006284:	d009      	beq.n	1000629a <pvPortMalloc+0x6a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
10006286:	f04f 0350 	mov.w	r3, #80	; 0x50
1000628a:	f383 8811 	msr	BASEPRI, r3
1000628e:	f3bf 8f6f 	isb	sy
10006292:	f3bf 8f4f 	dsb	sy
10006296:	617b      	str	r3, [r7, #20]
10006298:	e7fe      	b.n	10006298 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
1000629a:	687b      	ldr	r3, [r7, #4]
1000629c:	2b00      	cmp	r3, #0
1000629e:	d068      	beq.n	10006372 <pvPortMalloc+0x142>
100062a0:	4b41      	ldr	r3, [pc, #260]	; (100063a8 <pvPortMalloc+0x178>)
100062a2:	681b      	ldr	r3, [r3, #0]
100062a4:	687a      	ldr	r2, [r7, #4]
100062a6:	429a      	cmp	r2, r3
100062a8:	d863      	bhi.n	10006372 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
100062aa:	4b40      	ldr	r3, [pc, #256]	; (100063ac <pvPortMalloc+0x17c>)
100062ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
100062ae:	4b3f      	ldr	r3, [pc, #252]	; (100063ac <pvPortMalloc+0x17c>)
100062b0:	681b      	ldr	r3, [r3, #0]
100062b2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
100062b4:	e004      	b.n	100062c0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
100062b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100062b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
100062ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100062bc:	681b      	ldr	r3, [r3, #0]
100062be:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
100062c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100062c2:	685b      	ldr	r3, [r3, #4]
100062c4:	687a      	ldr	r2, [r7, #4]
100062c6:	429a      	cmp	r2, r3
100062c8:	d903      	bls.n	100062d2 <pvPortMalloc+0xa2>
100062ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100062cc:	681b      	ldr	r3, [r3, #0]
100062ce:	2b00      	cmp	r3, #0
100062d0:	d1f1      	bne.n	100062b6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
100062d2:	4b33      	ldr	r3, [pc, #204]	; (100063a0 <pvPortMalloc+0x170>)
100062d4:	681b      	ldr	r3, [r3, #0]
100062d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
100062d8:	429a      	cmp	r2, r3
100062da:	d04a      	beq.n	10006372 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
100062dc:	6a3b      	ldr	r3, [r7, #32]
100062de:	681b      	ldr	r3, [r3, #0]
100062e0:	2208      	movs	r2, #8
100062e2:	4413      	add	r3, r2
100062e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
100062e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100062e8:	681a      	ldr	r2, [r3, #0]
100062ea:	6a3b      	ldr	r3, [r7, #32]
100062ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
100062ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100062f0:	685a      	ldr	r2, [r3, #4]
100062f2:	687b      	ldr	r3, [r7, #4]
100062f4:	1ad2      	subs	r2, r2, r3
100062f6:	2308      	movs	r3, #8
100062f8:	005b      	lsls	r3, r3, #1
100062fa:	429a      	cmp	r2, r3
100062fc:	d91e      	bls.n	1000633c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
100062fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
10006300:	687b      	ldr	r3, [r7, #4]
10006302:	4413      	add	r3, r2
10006304:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
10006306:	69bb      	ldr	r3, [r7, #24]
10006308:	f003 0307 	and.w	r3, r3, #7
1000630c:	2b00      	cmp	r3, #0
1000630e:	d009      	beq.n	10006324 <pvPortMalloc+0xf4>
10006310:	f04f 0350 	mov.w	r3, #80	; 0x50
10006314:	f383 8811 	msr	BASEPRI, r3
10006318:	f3bf 8f6f 	isb	sy
1000631c:	f3bf 8f4f 	dsb	sy
10006320:	613b      	str	r3, [r7, #16]
10006322:	e7fe      	b.n	10006322 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
10006324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10006326:	685a      	ldr	r2, [r3, #4]
10006328:	687b      	ldr	r3, [r7, #4]
1000632a:	1ad2      	subs	r2, r2, r3
1000632c:	69bb      	ldr	r3, [r7, #24]
1000632e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
10006330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10006332:	687a      	ldr	r2, [r7, #4]
10006334:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
10006336:	69b8      	ldr	r0, [r7, #24]
10006338:	f000 f8f6 	bl	10006528 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
1000633c:	4b1a      	ldr	r3, [pc, #104]	; (100063a8 <pvPortMalloc+0x178>)
1000633e:	681a      	ldr	r2, [r3, #0]
10006340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10006342:	685b      	ldr	r3, [r3, #4]
10006344:	1ad3      	subs	r3, r2, r3
10006346:	4a18      	ldr	r2, [pc, #96]	; (100063a8 <pvPortMalloc+0x178>)
10006348:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
1000634a:	4b17      	ldr	r3, [pc, #92]	; (100063a8 <pvPortMalloc+0x178>)
1000634c:	681a      	ldr	r2, [r3, #0]
1000634e:	4b18      	ldr	r3, [pc, #96]	; (100063b0 <pvPortMalloc+0x180>)
10006350:	681b      	ldr	r3, [r3, #0]
10006352:	429a      	cmp	r2, r3
10006354:	d203      	bcs.n	1000635e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
10006356:	4b14      	ldr	r3, [pc, #80]	; (100063a8 <pvPortMalloc+0x178>)
10006358:	681b      	ldr	r3, [r3, #0]
1000635a:	4a15      	ldr	r2, [pc, #84]	; (100063b0 <pvPortMalloc+0x180>)
1000635c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
1000635e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10006360:	685a      	ldr	r2, [r3, #4]
10006362:	4b10      	ldr	r3, [pc, #64]	; (100063a4 <pvPortMalloc+0x174>)
10006364:	681b      	ldr	r3, [r3, #0]
10006366:	431a      	orrs	r2, r3
10006368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000636a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
1000636c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000636e:	2200      	movs	r2, #0
10006370:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
10006372:	f001 fb3d 	bl	100079f0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
10006376:	69fb      	ldr	r3, [r7, #28]
10006378:	f003 0307 	and.w	r3, r3, #7
1000637c:	2b00      	cmp	r3, #0
1000637e:	d009      	beq.n	10006394 <pvPortMalloc+0x164>
10006380:	f04f 0350 	mov.w	r3, #80	; 0x50
10006384:	f383 8811 	msr	BASEPRI, r3
10006388:	f3bf 8f6f 	isb	sy
1000638c:	f3bf 8f4f 	dsb	sy
10006390:	60fb      	str	r3, [r7, #12]
10006392:	e7fe      	b.n	10006392 <pvPortMalloc+0x162>
	return pvReturn;
10006394:	69fb      	ldr	r3, [r7, #28]
}
10006396:	4618      	mov	r0, r3
10006398:	3728      	adds	r7, #40	; 0x28
1000639a:	46bd      	mov	sp, r7
1000639c:	bd80      	pop	{r7, pc}
1000639e:	bf00      	nop
100063a0:	10021358 	.word	0x10021358
100063a4:	10021364 	.word	0x10021364
100063a8:	1002135c 	.word	0x1002135c
100063ac:	10021350 	.word	0x10021350
100063b0:	10021360 	.word	0x10021360

100063b4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
100063b4:	b580      	push	{r7, lr}
100063b6:	b086      	sub	sp, #24
100063b8:	af00      	add	r7, sp, #0
100063ba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
100063bc:	687b      	ldr	r3, [r7, #4]
100063be:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
100063c0:	687b      	ldr	r3, [r7, #4]
100063c2:	2b00      	cmp	r3, #0
100063c4:	d046      	beq.n	10006454 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
100063c6:	2308      	movs	r3, #8
100063c8:	425b      	negs	r3, r3
100063ca:	697a      	ldr	r2, [r7, #20]
100063cc:	4413      	add	r3, r2
100063ce:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
100063d0:	697b      	ldr	r3, [r7, #20]
100063d2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
100063d4:	693b      	ldr	r3, [r7, #16]
100063d6:	685a      	ldr	r2, [r3, #4]
100063d8:	4b20      	ldr	r3, [pc, #128]	; (1000645c <vPortFree+0xa8>)
100063da:	681b      	ldr	r3, [r3, #0]
100063dc:	4013      	ands	r3, r2
100063de:	2b00      	cmp	r3, #0
100063e0:	d109      	bne.n	100063f6 <vPortFree+0x42>
100063e2:	f04f 0350 	mov.w	r3, #80	; 0x50
100063e6:	f383 8811 	msr	BASEPRI, r3
100063ea:	f3bf 8f6f 	isb	sy
100063ee:	f3bf 8f4f 	dsb	sy
100063f2:	60fb      	str	r3, [r7, #12]
100063f4:	e7fe      	b.n	100063f4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
100063f6:	693b      	ldr	r3, [r7, #16]
100063f8:	681b      	ldr	r3, [r3, #0]
100063fa:	2b00      	cmp	r3, #0
100063fc:	d009      	beq.n	10006412 <vPortFree+0x5e>
100063fe:	f04f 0350 	mov.w	r3, #80	; 0x50
10006402:	f383 8811 	msr	BASEPRI, r3
10006406:	f3bf 8f6f 	isb	sy
1000640a:	f3bf 8f4f 	dsb	sy
1000640e:	60bb      	str	r3, [r7, #8]
10006410:	e7fe      	b.n	10006410 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
10006412:	693b      	ldr	r3, [r7, #16]
10006414:	685a      	ldr	r2, [r3, #4]
10006416:	4b11      	ldr	r3, [pc, #68]	; (1000645c <vPortFree+0xa8>)
10006418:	681b      	ldr	r3, [r3, #0]
1000641a:	4013      	ands	r3, r2
1000641c:	2b00      	cmp	r3, #0
1000641e:	d019      	beq.n	10006454 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
10006420:	693b      	ldr	r3, [r7, #16]
10006422:	681b      	ldr	r3, [r3, #0]
10006424:	2b00      	cmp	r3, #0
10006426:	d115      	bne.n	10006454 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
10006428:	693b      	ldr	r3, [r7, #16]
1000642a:	685a      	ldr	r2, [r3, #4]
1000642c:	4b0b      	ldr	r3, [pc, #44]	; (1000645c <vPortFree+0xa8>)
1000642e:	681b      	ldr	r3, [r3, #0]
10006430:	43db      	mvns	r3, r3
10006432:	401a      	ands	r2, r3
10006434:	693b      	ldr	r3, [r7, #16]
10006436:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
10006438:	f001 facc 	bl	100079d4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
1000643c:	693b      	ldr	r3, [r7, #16]
1000643e:	685a      	ldr	r2, [r3, #4]
10006440:	4b07      	ldr	r3, [pc, #28]	; (10006460 <vPortFree+0xac>)
10006442:	681b      	ldr	r3, [r3, #0]
10006444:	4413      	add	r3, r2
10006446:	4a06      	ldr	r2, [pc, #24]	; (10006460 <vPortFree+0xac>)
10006448:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
1000644a:	6938      	ldr	r0, [r7, #16]
1000644c:	f000 f86c 	bl	10006528 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
10006450:	f001 face 	bl	100079f0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
10006454:	bf00      	nop
10006456:	3718      	adds	r7, #24
10006458:	46bd      	mov	sp, r7
1000645a:	bd80      	pop	{r7, pc}
1000645c:	10021364 	.word	0x10021364
10006460:	1002135c 	.word	0x1002135c

10006464 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
10006464:	b480      	push	{r7}
10006466:	b085      	sub	sp, #20
10006468:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
1000646a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
1000646e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
10006470:	4b27      	ldr	r3, [pc, #156]	; (10006510 <prvHeapInit+0xac>)
10006472:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
10006474:	68fb      	ldr	r3, [r7, #12]
10006476:	f003 0307 	and.w	r3, r3, #7
1000647a:	2b00      	cmp	r3, #0
1000647c:	d00c      	beq.n	10006498 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
1000647e:	68fb      	ldr	r3, [r7, #12]
10006480:	3307      	adds	r3, #7
10006482:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
10006484:	68fb      	ldr	r3, [r7, #12]
10006486:	f023 0307 	bic.w	r3, r3, #7
1000648a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
1000648c:	68ba      	ldr	r2, [r7, #8]
1000648e:	68fb      	ldr	r3, [r7, #12]
10006490:	1ad3      	subs	r3, r2, r3
10006492:	4a1f      	ldr	r2, [pc, #124]	; (10006510 <prvHeapInit+0xac>)
10006494:	4413      	add	r3, r2
10006496:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
10006498:	68fb      	ldr	r3, [r7, #12]
1000649a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
1000649c:	4a1d      	ldr	r2, [pc, #116]	; (10006514 <prvHeapInit+0xb0>)
1000649e:	687b      	ldr	r3, [r7, #4]
100064a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
100064a2:	4b1c      	ldr	r3, [pc, #112]	; (10006514 <prvHeapInit+0xb0>)
100064a4:	2200      	movs	r2, #0
100064a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
100064a8:	687b      	ldr	r3, [r7, #4]
100064aa:	68ba      	ldr	r2, [r7, #8]
100064ac:	4413      	add	r3, r2
100064ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
100064b0:	2208      	movs	r2, #8
100064b2:	68fb      	ldr	r3, [r7, #12]
100064b4:	1a9b      	subs	r3, r3, r2
100064b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
100064b8:	68fb      	ldr	r3, [r7, #12]
100064ba:	f023 0307 	bic.w	r3, r3, #7
100064be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
100064c0:	68fb      	ldr	r3, [r7, #12]
100064c2:	4a15      	ldr	r2, [pc, #84]	; (10006518 <prvHeapInit+0xb4>)
100064c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
100064c6:	4b14      	ldr	r3, [pc, #80]	; (10006518 <prvHeapInit+0xb4>)
100064c8:	681b      	ldr	r3, [r3, #0]
100064ca:	2200      	movs	r2, #0
100064cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
100064ce:	4b12      	ldr	r3, [pc, #72]	; (10006518 <prvHeapInit+0xb4>)
100064d0:	681b      	ldr	r3, [r3, #0]
100064d2:	2200      	movs	r2, #0
100064d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
100064d6:	687b      	ldr	r3, [r7, #4]
100064d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
100064da:	683b      	ldr	r3, [r7, #0]
100064dc:	68fa      	ldr	r2, [r7, #12]
100064de:	1ad2      	subs	r2, r2, r3
100064e0:	683b      	ldr	r3, [r7, #0]
100064e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
100064e4:	4b0c      	ldr	r3, [pc, #48]	; (10006518 <prvHeapInit+0xb4>)
100064e6:	681a      	ldr	r2, [r3, #0]
100064e8:	683b      	ldr	r3, [r7, #0]
100064ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
100064ec:	683b      	ldr	r3, [r7, #0]
100064ee:	685b      	ldr	r3, [r3, #4]
100064f0:	4a0a      	ldr	r2, [pc, #40]	; (1000651c <prvHeapInit+0xb8>)
100064f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
100064f4:	683b      	ldr	r3, [r7, #0]
100064f6:	685b      	ldr	r3, [r3, #4]
100064f8:	4a09      	ldr	r2, [pc, #36]	; (10006520 <prvHeapInit+0xbc>)
100064fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
100064fc:	4b09      	ldr	r3, [pc, #36]	; (10006524 <prvHeapInit+0xc0>)
100064fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
10006502:	601a      	str	r2, [r3, #0]
}
10006504:	bf00      	nop
10006506:	3714      	adds	r7, #20
10006508:	46bd      	mov	sp, r7
1000650a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000650e:	4770      	bx	lr
10006510:	10020750 	.word	0x10020750
10006514:	10021350 	.word	0x10021350
10006518:	10021358 	.word	0x10021358
1000651c:	10021360 	.word	0x10021360
10006520:	1002135c 	.word	0x1002135c
10006524:	10021364 	.word	0x10021364

10006528 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
10006528:	b480      	push	{r7}
1000652a:	b085      	sub	sp, #20
1000652c:	af00      	add	r7, sp, #0
1000652e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
10006530:	4b28      	ldr	r3, [pc, #160]	; (100065d4 <prvInsertBlockIntoFreeList+0xac>)
10006532:	60fb      	str	r3, [r7, #12]
10006534:	e002      	b.n	1000653c <prvInsertBlockIntoFreeList+0x14>
10006536:	68fb      	ldr	r3, [r7, #12]
10006538:	681b      	ldr	r3, [r3, #0]
1000653a:	60fb      	str	r3, [r7, #12]
1000653c:	68fb      	ldr	r3, [r7, #12]
1000653e:	681b      	ldr	r3, [r3, #0]
10006540:	687a      	ldr	r2, [r7, #4]
10006542:	429a      	cmp	r2, r3
10006544:	d8f7      	bhi.n	10006536 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
10006546:	68fb      	ldr	r3, [r7, #12]
10006548:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
1000654a:	68fb      	ldr	r3, [r7, #12]
1000654c:	685b      	ldr	r3, [r3, #4]
1000654e:	68ba      	ldr	r2, [r7, #8]
10006550:	4413      	add	r3, r2
10006552:	687a      	ldr	r2, [r7, #4]
10006554:	429a      	cmp	r2, r3
10006556:	d108      	bne.n	1000656a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
10006558:	68fb      	ldr	r3, [r7, #12]
1000655a:	685a      	ldr	r2, [r3, #4]
1000655c:	687b      	ldr	r3, [r7, #4]
1000655e:	685b      	ldr	r3, [r3, #4]
10006560:	441a      	add	r2, r3
10006562:	68fb      	ldr	r3, [r7, #12]
10006564:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
10006566:	68fb      	ldr	r3, [r7, #12]
10006568:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
1000656a:	687b      	ldr	r3, [r7, #4]
1000656c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
1000656e:	687b      	ldr	r3, [r7, #4]
10006570:	685b      	ldr	r3, [r3, #4]
10006572:	68ba      	ldr	r2, [r7, #8]
10006574:	441a      	add	r2, r3
10006576:	68fb      	ldr	r3, [r7, #12]
10006578:	681b      	ldr	r3, [r3, #0]
1000657a:	429a      	cmp	r2, r3
1000657c:	d118      	bne.n	100065b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
1000657e:	68fb      	ldr	r3, [r7, #12]
10006580:	681a      	ldr	r2, [r3, #0]
10006582:	4b15      	ldr	r3, [pc, #84]	; (100065d8 <prvInsertBlockIntoFreeList+0xb0>)
10006584:	681b      	ldr	r3, [r3, #0]
10006586:	429a      	cmp	r2, r3
10006588:	d00d      	beq.n	100065a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
1000658a:	687b      	ldr	r3, [r7, #4]
1000658c:	685a      	ldr	r2, [r3, #4]
1000658e:	68fb      	ldr	r3, [r7, #12]
10006590:	681b      	ldr	r3, [r3, #0]
10006592:	685b      	ldr	r3, [r3, #4]
10006594:	441a      	add	r2, r3
10006596:	687b      	ldr	r3, [r7, #4]
10006598:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
1000659a:	68fb      	ldr	r3, [r7, #12]
1000659c:	681b      	ldr	r3, [r3, #0]
1000659e:	681a      	ldr	r2, [r3, #0]
100065a0:	687b      	ldr	r3, [r7, #4]
100065a2:	601a      	str	r2, [r3, #0]
100065a4:	e008      	b.n	100065b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
100065a6:	4b0c      	ldr	r3, [pc, #48]	; (100065d8 <prvInsertBlockIntoFreeList+0xb0>)
100065a8:	681a      	ldr	r2, [r3, #0]
100065aa:	687b      	ldr	r3, [r7, #4]
100065ac:	601a      	str	r2, [r3, #0]
100065ae:	e003      	b.n	100065b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
100065b0:	68fb      	ldr	r3, [r7, #12]
100065b2:	681a      	ldr	r2, [r3, #0]
100065b4:	687b      	ldr	r3, [r7, #4]
100065b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
100065b8:	68fa      	ldr	r2, [r7, #12]
100065ba:	687b      	ldr	r3, [r7, #4]
100065bc:	429a      	cmp	r2, r3
100065be:	d002      	beq.n	100065c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
100065c0:	68fb      	ldr	r3, [r7, #12]
100065c2:	687a      	ldr	r2, [r7, #4]
100065c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
100065c6:	bf00      	nop
100065c8:	3714      	adds	r7, #20
100065ca:	46bd      	mov	sp, r7
100065cc:	f85d 7b04 	ldr.w	r7, [sp], #4
100065d0:	4770      	bx	lr
100065d2:	bf00      	nop
100065d4:	10021350 	.word	0x10021350
100065d8:	10021358 	.word	0x10021358

100065dc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
100065dc:	b480      	push	{r7}
100065de:	b083      	sub	sp, #12
100065e0:	af00      	add	r7, sp, #0
100065e2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
100065e4:	687b      	ldr	r3, [r7, #4]
100065e6:	f103 0208 	add.w	r2, r3, #8
100065ea:	687b      	ldr	r3, [r7, #4]
100065ec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
100065ee:	687b      	ldr	r3, [r7, #4]
100065f0:	f04f 32ff 	mov.w	r2, #4294967295
100065f4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
100065f6:	687b      	ldr	r3, [r7, #4]
100065f8:	f103 0208 	add.w	r2, r3, #8
100065fc:	687b      	ldr	r3, [r7, #4]
100065fe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
10006600:	687b      	ldr	r3, [r7, #4]
10006602:	f103 0208 	add.w	r2, r3, #8
10006606:	687b      	ldr	r3, [r7, #4]
10006608:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
1000660a:	687b      	ldr	r3, [r7, #4]
1000660c:	2200      	movs	r2, #0
1000660e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
10006610:	bf00      	nop
10006612:	370c      	adds	r7, #12
10006614:	46bd      	mov	sp, r7
10006616:	f85d 7b04 	ldr.w	r7, [sp], #4
1000661a:	4770      	bx	lr

1000661c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
1000661c:	b480      	push	{r7}
1000661e:	b083      	sub	sp, #12
10006620:	af00      	add	r7, sp, #0
10006622:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
10006624:	687b      	ldr	r3, [r7, #4]
10006626:	2200      	movs	r2, #0
10006628:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
1000662a:	bf00      	nop
1000662c:	370c      	adds	r7, #12
1000662e:	46bd      	mov	sp, r7
10006630:	f85d 7b04 	ldr.w	r7, [sp], #4
10006634:	4770      	bx	lr

10006636 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
10006636:	b480      	push	{r7}
10006638:	b085      	sub	sp, #20
1000663a:	af00      	add	r7, sp, #0
1000663c:	6078      	str	r0, [r7, #4]
1000663e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
10006640:	687b      	ldr	r3, [r7, #4]
10006642:	685b      	ldr	r3, [r3, #4]
10006644:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
10006646:	683b      	ldr	r3, [r7, #0]
10006648:	68fa      	ldr	r2, [r7, #12]
1000664a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
1000664c:	68fb      	ldr	r3, [r7, #12]
1000664e:	689a      	ldr	r2, [r3, #8]
10006650:	683b      	ldr	r3, [r7, #0]
10006652:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
10006654:	68fb      	ldr	r3, [r7, #12]
10006656:	689b      	ldr	r3, [r3, #8]
10006658:	683a      	ldr	r2, [r7, #0]
1000665a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
1000665c:	68fb      	ldr	r3, [r7, #12]
1000665e:	683a      	ldr	r2, [r7, #0]
10006660:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
10006662:	683b      	ldr	r3, [r7, #0]
10006664:	687a      	ldr	r2, [r7, #4]
10006666:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
10006668:	687b      	ldr	r3, [r7, #4]
1000666a:	681b      	ldr	r3, [r3, #0]
1000666c:	1c5a      	adds	r2, r3, #1
1000666e:	687b      	ldr	r3, [r7, #4]
10006670:	601a      	str	r2, [r3, #0]
}
10006672:	bf00      	nop
10006674:	3714      	adds	r7, #20
10006676:	46bd      	mov	sp, r7
10006678:	f85d 7b04 	ldr.w	r7, [sp], #4
1000667c:	4770      	bx	lr

1000667e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
1000667e:	b480      	push	{r7}
10006680:	b085      	sub	sp, #20
10006682:	af00      	add	r7, sp, #0
10006684:	6078      	str	r0, [r7, #4]
10006686:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
10006688:	683b      	ldr	r3, [r7, #0]
1000668a:	681b      	ldr	r3, [r3, #0]
1000668c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
1000668e:	68bb      	ldr	r3, [r7, #8]
10006690:	f1b3 3fff 	cmp.w	r3, #4294967295
10006694:	d103      	bne.n	1000669e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
10006696:	687b      	ldr	r3, [r7, #4]
10006698:	691b      	ldr	r3, [r3, #16]
1000669a:	60fb      	str	r3, [r7, #12]
1000669c:	e00c      	b.n	100066b8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
1000669e:	687b      	ldr	r3, [r7, #4]
100066a0:	3308      	adds	r3, #8
100066a2:	60fb      	str	r3, [r7, #12]
100066a4:	e002      	b.n	100066ac <vListInsert+0x2e>
100066a6:	68fb      	ldr	r3, [r7, #12]
100066a8:	685b      	ldr	r3, [r3, #4]
100066aa:	60fb      	str	r3, [r7, #12]
100066ac:	68fb      	ldr	r3, [r7, #12]
100066ae:	685b      	ldr	r3, [r3, #4]
100066b0:	681b      	ldr	r3, [r3, #0]
100066b2:	68ba      	ldr	r2, [r7, #8]
100066b4:	429a      	cmp	r2, r3
100066b6:	d2f6      	bcs.n	100066a6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
100066b8:	68fb      	ldr	r3, [r7, #12]
100066ba:	685a      	ldr	r2, [r3, #4]
100066bc:	683b      	ldr	r3, [r7, #0]
100066be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
100066c0:	683b      	ldr	r3, [r7, #0]
100066c2:	685b      	ldr	r3, [r3, #4]
100066c4:	683a      	ldr	r2, [r7, #0]
100066c6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
100066c8:	683b      	ldr	r3, [r7, #0]
100066ca:	68fa      	ldr	r2, [r7, #12]
100066cc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
100066ce:	68fb      	ldr	r3, [r7, #12]
100066d0:	683a      	ldr	r2, [r7, #0]
100066d2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
100066d4:	683b      	ldr	r3, [r7, #0]
100066d6:	687a      	ldr	r2, [r7, #4]
100066d8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
100066da:	687b      	ldr	r3, [r7, #4]
100066dc:	681b      	ldr	r3, [r3, #0]
100066de:	1c5a      	adds	r2, r3, #1
100066e0:	687b      	ldr	r3, [r7, #4]
100066e2:	601a      	str	r2, [r3, #0]
}
100066e4:	bf00      	nop
100066e6:	3714      	adds	r7, #20
100066e8:	46bd      	mov	sp, r7
100066ea:	f85d 7b04 	ldr.w	r7, [sp], #4
100066ee:	4770      	bx	lr

100066f0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
100066f0:	b480      	push	{r7}
100066f2:	b085      	sub	sp, #20
100066f4:	af00      	add	r7, sp, #0
100066f6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
100066f8:	687b      	ldr	r3, [r7, #4]
100066fa:	691b      	ldr	r3, [r3, #16]
100066fc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
100066fe:	687b      	ldr	r3, [r7, #4]
10006700:	685b      	ldr	r3, [r3, #4]
10006702:	687a      	ldr	r2, [r7, #4]
10006704:	6892      	ldr	r2, [r2, #8]
10006706:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
10006708:	687b      	ldr	r3, [r7, #4]
1000670a:	689b      	ldr	r3, [r3, #8]
1000670c:	687a      	ldr	r2, [r7, #4]
1000670e:	6852      	ldr	r2, [r2, #4]
10006710:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
10006712:	68fb      	ldr	r3, [r7, #12]
10006714:	685b      	ldr	r3, [r3, #4]
10006716:	687a      	ldr	r2, [r7, #4]
10006718:	429a      	cmp	r2, r3
1000671a:	d103      	bne.n	10006724 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
1000671c:	687b      	ldr	r3, [r7, #4]
1000671e:	689a      	ldr	r2, [r3, #8]
10006720:	68fb      	ldr	r3, [r7, #12]
10006722:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
10006724:	687b      	ldr	r3, [r7, #4]
10006726:	2200      	movs	r2, #0
10006728:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
1000672a:	68fb      	ldr	r3, [r7, #12]
1000672c:	681b      	ldr	r3, [r3, #0]
1000672e:	1e5a      	subs	r2, r3, #1
10006730:	68fb      	ldr	r3, [r7, #12]
10006732:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
10006734:	68fb      	ldr	r3, [r7, #12]
10006736:	681b      	ldr	r3, [r3, #0]
}
10006738:	4618      	mov	r0, r3
1000673a:	3714      	adds	r7, #20
1000673c:	46bd      	mov	sp, r7
1000673e:	f85d 7b04 	ldr.w	r7, [sp], #4
10006742:	4770      	bx	lr

10006744 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
10006744:	b480      	push	{r7}
10006746:	b085      	sub	sp, #20
10006748:	af00      	add	r7, sp, #0
1000674a:	60f8      	str	r0, [r7, #12]
1000674c:	60b9      	str	r1, [r7, #8]
1000674e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
10006750:	68fb      	ldr	r3, [r7, #12]
10006752:	3b04      	subs	r3, #4
10006754:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
10006756:	68fb      	ldr	r3, [r7, #12]
10006758:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
1000675c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
1000675e:	68fb      	ldr	r3, [r7, #12]
10006760:	3b04      	subs	r3, #4
10006762:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
10006764:	68bb      	ldr	r3, [r7, #8]
10006766:	f023 0201 	bic.w	r2, r3, #1
1000676a:	68fb      	ldr	r3, [r7, #12]
1000676c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
1000676e:	68fb      	ldr	r3, [r7, #12]
10006770:	3b04      	subs	r3, #4
10006772:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
10006774:	4a0c      	ldr	r2, [pc, #48]	; (100067a8 <pxPortInitialiseStack+0x64>)
10006776:	68fb      	ldr	r3, [r7, #12]
10006778:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
1000677a:	68fb      	ldr	r3, [r7, #12]
1000677c:	3b14      	subs	r3, #20
1000677e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
10006780:	687a      	ldr	r2, [r7, #4]
10006782:	68fb      	ldr	r3, [r7, #12]
10006784:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
10006786:	68fb      	ldr	r3, [r7, #12]
10006788:	3b04      	subs	r3, #4
1000678a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
1000678c:	68fb      	ldr	r3, [r7, #12]
1000678e:	f06f 0202 	mvn.w	r2, #2
10006792:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
10006794:	68fb      	ldr	r3, [r7, #12]
10006796:	3b20      	subs	r3, #32
10006798:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
1000679a:	68fb      	ldr	r3, [r7, #12]
}
1000679c:	4618      	mov	r0, r3
1000679e:	3714      	adds	r7, #20
100067a0:	46bd      	mov	sp, r7
100067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
100067a6:	4770      	bx	lr
100067a8:	100067ad 	.word	0x100067ad

100067ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
100067ac:	b480      	push	{r7}
100067ae:	b085      	sub	sp, #20
100067b0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
100067b2:	2300      	movs	r3, #0
100067b4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
100067b6:	4b11      	ldr	r3, [pc, #68]	; (100067fc <prvTaskExitError+0x50>)
100067b8:	681b      	ldr	r3, [r3, #0]
100067ba:	f1b3 3fff 	cmp.w	r3, #4294967295
100067be:	d009      	beq.n	100067d4 <prvTaskExitError+0x28>
100067c0:	f04f 0350 	mov.w	r3, #80	; 0x50
100067c4:	f383 8811 	msr	BASEPRI, r3
100067c8:	f3bf 8f6f 	isb	sy
100067cc:	f3bf 8f4f 	dsb	sy
100067d0:	60fb      	str	r3, [r7, #12]
100067d2:	e7fe      	b.n	100067d2 <prvTaskExitError+0x26>
100067d4:	f04f 0350 	mov.w	r3, #80	; 0x50
100067d8:	f383 8811 	msr	BASEPRI, r3
100067dc:	f3bf 8f6f 	isb	sy
100067e0:	f3bf 8f4f 	dsb	sy
100067e4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
100067e6:	bf00      	nop
100067e8:	687b      	ldr	r3, [r7, #4]
100067ea:	2b00      	cmp	r3, #0
100067ec:	d0fc      	beq.n	100067e8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
100067ee:	bf00      	nop
100067f0:	3714      	adds	r7, #20
100067f2:	46bd      	mov	sp, r7
100067f4:	f85d 7b04 	ldr.w	r7, [sp], #4
100067f8:	4770      	bx	lr
100067fa:	bf00      	nop
100067fc:	1002000c 	.word	0x1002000c

10006800 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
10006800:	4b07      	ldr	r3, [pc, #28]	; (10006820 <pxCurrentTCBConst2>)
10006802:	6819      	ldr	r1, [r3, #0]
10006804:	6808      	ldr	r0, [r1, #0]
10006806:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1000680a:	f380 8809 	msr	PSP, r0
1000680e:	f3bf 8f6f 	isb	sy
10006812:	f04f 0000 	mov.w	r0, #0
10006816:	f380 8811 	msr	BASEPRI, r0
1000681a:	4770      	bx	lr
1000681c:	f3af 8000 	nop.w

10006820 <pxCurrentTCBConst2>:
10006820:	10021370 	.word	0x10021370
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
10006824:	bf00      	nop
10006826:	bf00      	nop

10006828 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
10006828:	4808      	ldr	r0, [pc, #32]	; (1000684c <prvPortStartFirstTask+0x24>)
1000682a:	6800      	ldr	r0, [r0, #0]
1000682c:	6800      	ldr	r0, [r0, #0]
1000682e:	f380 8808 	msr	MSP, r0
10006832:	f04f 0000 	mov.w	r0, #0
10006836:	f380 8814 	msr	CONTROL, r0
1000683a:	b662      	cpsie	i
1000683c:	b661      	cpsie	f
1000683e:	f3bf 8f4f 	dsb	sy
10006842:	f3bf 8f6f 	isb	sy
10006846:	df00      	svc	0
10006848:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
1000684a:	bf00      	nop
1000684c:	e000ed08 	.word	0xe000ed08

10006850 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
10006850:	b580      	push	{r7, lr}
10006852:	b086      	sub	sp, #24
10006854:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
10006856:	4b44      	ldr	r3, [pc, #272]	; (10006968 <xPortStartScheduler+0x118>)
10006858:	681b      	ldr	r3, [r3, #0]
1000685a:	4a44      	ldr	r2, [pc, #272]	; (1000696c <xPortStartScheduler+0x11c>)
1000685c:	4293      	cmp	r3, r2
1000685e:	d109      	bne.n	10006874 <xPortStartScheduler+0x24>
10006860:	f04f 0350 	mov.w	r3, #80	; 0x50
10006864:	f383 8811 	msr	BASEPRI, r3
10006868:	f3bf 8f6f 	isb	sy
1000686c:	f3bf 8f4f 	dsb	sy
10006870:	613b      	str	r3, [r7, #16]
10006872:	e7fe      	b.n	10006872 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
10006874:	4b3c      	ldr	r3, [pc, #240]	; (10006968 <xPortStartScheduler+0x118>)
10006876:	681b      	ldr	r3, [r3, #0]
10006878:	4a3d      	ldr	r2, [pc, #244]	; (10006970 <xPortStartScheduler+0x120>)
1000687a:	4293      	cmp	r3, r2
1000687c:	d109      	bne.n	10006892 <xPortStartScheduler+0x42>
1000687e:	f04f 0350 	mov.w	r3, #80	; 0x50
10006882:	f383 8811 	msr	BASEPRI, r3
10006886:	f3bf 8f6f 	isb	sy
1000688a:	f3bf 8f4f 	dsb	sy
1000688e:	60fb      	str	r3, [r7, #12]
10006890:	e7fe      	b.n	10006890 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
10006892:	4b38      	ldr	r3, [pc, #224]	; (10006974 <xPortStartScheduler+0x124>)
10006894:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
10006896:	697b      	ldr	r3, [r7, #20]
10006898:	781b      	ldrb	r3, [r3, #0]
1000689a:	b2db      	uxtb	r3, r3
1000689c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
1000689e:	697b      	ldr	r3, [r7, #20]
100068a0:	22ff      	movs	r2, #255	; 0xff
100068a2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
100068a4:	697b      	ldr	r3, [r7, #20]
100068a6:	781b      	ldrb	r3, [r3, #0]
100068a8:	b2db      	uxtb	r3, r3
100068aa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
100068ac:	78fb      	ldrb	r3, [r7, #3]
100068ae:	b2db      	uxtb	r3, r3
100068b0:	f003 0350 	and.w	r3, r3, #80	; 0x50
100068b4:	b2da      	uxtb	r2, r3
100068b6:	4b30      	ldr	r3, [pc, #192]	; (10006978 <xPortStartScheduler+0x128>)
100068b8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
100068ba:	4b30      	ldr	r3, [pc, #192]	; (1000697c <xPortStartScheduler+0x12c>)
100068bc:	2207      	movs	r2, #7
100068be:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
100068c0:	e009      	b.n	100068d6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
100068c2:	4b2e      	ldr	r3, [pc, #184]	; (1000697c <xPortStartScheduler+0x12c>)
100068c4:	681b      	ldr	r3, [r3, #0]
100068c6:	3b01      	subs	r3, #1
100068c8:	4a2c      	ldr	r2, [pc, #176]	; (1000697c <xPortStartScheduler+0x12c>)
100068ca:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
100068cc:	78fb      	ldrb	r3, [r7, #3]
100068ce:	b2db      	uxtb	r3, r3
100068d0:	005b      	lsls	r3, r3, #1
100068d2:	b2db      	uxtb	r3, r3
100068d4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
100068d6:	78fb      	ldrb	r3, [r7, #3]
100068d8:	b2db      	uxtb	r3, r3
100068da:	f003 0380 	and.w	r3, r3, #128	; 0x80
100068de:	2b80      	cmp	r3, #128	; 0x80
100068e0:	d0ef      	beq.n	100068c2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
100068e2:	4b26      	ldr	r3, [pc, #152]	; (1000697c <xPortStartScheduler+0x12c>)
100068e4:	681b      	ldr	r3, [r3, #0]
100068e6:	f1c3 0307 	rsb	r3, r3, #7
100068ea:	2b04      	cmp	r3, #4
100068ec:	d009      	beq.n	10006902 <xPortStartScheduler+0xb2>
100068ee:	f04f 0350 	mov.w	r3, #80	; 0x50
100068f2:	f383 8811 	msr	BASEPRI, r3
100068f6:	f3bf 8f6f 	isb	sy
100068fa:	f3bf 8f4f 	dsb	sy
100068fe:	60bb      	str	r3, [r7, #8]
10006900:	e7fe      	b.n	10006900 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
10006902:	4b1e      	ldr	r3, [pc, #120]	; (1000697c <xPortStartScheduler+0x12c>)
10006904:	681b      	ldr	r3, [r3, #0]
10006906:	021b      	lsls	r3, r3, #8
10006908:	4a1c      	ldr	r2, [pc, #112]	; (1000697c <xPortStartScheduler+0x12c>)
1000690a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
1000690c:	4b1b      	ldr	r3, [pc, #108]	; (1000697c <xPortStartScheduler+0x12c>)
1000690e:	681b      	ldr	r3, [r3, #0]
10006910:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
10006914:	4a19      	ldr	r2, [pc, #100]	; (1000697c <xPortStartScheduler+0x12c>)
10006916:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
10006918:	687b      	ldr	r3, [r7, #4]
1000691a:	b2da      	uxtb	r2, r3
1000691c:	697b      	ldr	r3, [r7, #20]
1000691e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
10006920:	4b17      	ldr	r3, [pc, #92]	; (10006980 <xPortStartScheduler+0x130>)
10006922:	681b      	ldr	r3, [r3, #0]
10006924:	4a16      	ldr	r2, [pc, #88]	; (10006980 <xPortStartScheduler+0x130>)
10006926:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1000692a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
1000692c:	4b14      	ldr	r3, [pc, #80]	; (10006980 <xPortStartScheduler+0x130>)
1000692e:	681b      	ldr	r3, [r3, #0]
10006930:	4a13      	ldr	r2, [pc, #76]	; (10006980 <xPortStartScheduler+0x130>)
10006932:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
10006936:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
10006938:	f000 f8d6 	bl	10006ae8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
1000693c:	4b11      	ldr	r3, [pc, #68]	; (10006984 <xPortStartScheduler+0x134>)
1000693e:	2200      	movs	r2, #0
10006940:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
10006942:	f000 f8f5 	bl	10006b30 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
10006946:	4b10      	ldr	r3, [pc, #64]	; (10006988 <xPortStartScheduler+0x138>)
10006948:	681b      	ldr	r3, [r3, #0]
1000694a:	4a0f      	ldr	r2, [pc, #60]	; (10006988 <xPortStartScheduler+0x138>)
1000694c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
10006950:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
10006952:	f7ff ff69 	bl	10006828 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
10006956:	f001 f9af 	bl	10007cb8 <vTaskSwitchContext>
	prvTaskExitError();
1000695a:	f7ff ff27 	bl	100067ac <prvTaskExitError>

	/* Should not get here! */
	return 0;
1000695e:	2300      	movs	r3, #0
}
10006960:	4618      	mov	r0, r3
10006962:	3718      	adds	r7, #24
10006964:	46bd      	mov	sp, r7
10006966:	bd80      	pop	{r7, pc}
10006968:	e000ed00 	.word	0xe000ed00
1000696c:	410fc271 	.word	0x410fc271
10006970:	410fc270 	.word	0x410fc270
10006974:	e000e400 	.word	0xe000e400
10006978:	10021368 	.word	0x10021368
1000697c:	1002136c 	.word	0x1002136c
10006980:	e000ed20 	.word	0xe000ed20
10006984:	1002000c 	.word	0x1002000c
10006988:	e000ef34 	.word	0xe000ef34

1000698c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
1000698c:	b480      	push	{r7}
1000698e:	b083      	sub	sp, #12
10006990:	af00      	add	r7, sp, #0
10006992:	f04f 0350 	mov.w	r3, #80	; 0x50
10006996:	f383 8811 	msr	BASEPRI, r3
1000699a:	f3bf 8f6f 	isb	sy
1000699e:	f3bf 8f4f 	dsb	sy
100069a2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
100069a4:	4b0e      	ldr	r3, [pc, #56]	; (100069e0 <vPortEnterCritical+0x54>)
100069a6:	681b      	ldr	r3, [r3, #0]
100069a8:	3301      	adds	r3, #1
100069aa:	4a0d      	ldr	r2, [pc, #52]	; (100069e0 <vPortEnterCritical+0x54>)
100069ac:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
100069ae:	4b0c      	ldr	r3, [pc, #48]	; (100069e0 <vPortEnterCritical+0x54>)
100069b0:	681b      	ldr	r3, [r3, #0]
100069b2:	2b01      	cmp	r3, #1
100069b4:	d10e      	bne.n	100069d4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
100069b6:	4b0b      	ldr	r3, [pc, #44]	; (100069e4 <vPortEnterCritical+0x58>)
100069b8:	681b      	ldr	r3, [r3, #0]
100069ba:	b2db      	uxtb	r3, r3
100069bc:	2b00      	cmp	r3, #0
100069be:	d009      	beq.n	100069d4 <vPortEnterCritical+0x48>
100069c0:	f04f 0350 	mov.w	r3, #80	; 0x50
100069c4:	f383 8811 	msr	BASEPRI, r3
100069c8:	f3bf 8f6f 	isb	sy
100069cc:	f3bf 8f4f 	dsb	sy
100069d0:	603b      	str	r3, [r7, #0]
100069d2:	e7fe      	b.n	100069d2 <vPortEnterCritical+0x46>
	}
}
100069d4:	bf00      	nop
100069d6:	370c      	adds	r7, #12
100069d8:	46bd      	mov	sp, r7
100069da:	f85d 7b04 	ldr.w	r7, [sp], #4
100069de:	4770      	bx	lr
100069e0:	1002000c 	.word	0x1002000c
100069e4:	e000ed04 	.word	0xe000ed04

100069e8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
100069e8:	b480      	push	{r7}
100069ea:	b083      	sub	sp, #12
100069ec:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
100069ee:	4b11      	ldr	r3, [pc, #68]	; (10006a34 <vPortExitCritical+0x4c>)
100069f0:	681b      	ldr	r3, [r3, #0]
100069f2:	2b00      	cmp	r3, #0
100069f4:	d109      	bne.n	10006a0a <vPortExitCritical+0x22>
100069f6:	f04f 0350 	mov.w	r3, #80	; 0x50
100069fa:	f383 8811 	msr	BASEPRI, r3
100069fe:	f3bf 8f6f 	isb	sy
10006a02:	f3bf 8f4f 	dsb	sy
10006a06:	607b      	str	r3, [r7, #4]
10006a08:	e7fe      	b.n	10006a08 <vPortExitCritical+0x20>
	uxCriticalNesting--;
10006a0a:	4b0a      	ldr	r3, [pc, #40]	; (10006a34 <vPortExitCritical+0x4c>)
10006a0c:	681b      	ldr	r3, [r3, #0]
10006a0e:	3b01      	subs	r3, #1
10006a10:	4a08      	ldr	r2, [pc, #32]	; (10006a34 <vPortExitCritical+0x4c>)
10006a12:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
10006a14:	4b07      	ldr	r3, [pc, #28]	; (10006a34 <vPortExitCritical+0x4c>)
10006a16:	681b      	ldr	r3, [r3, #0]
10006a18:	2b00      	cmp	r3, #0
10006a1a:	d104      	bne.n	10006a26 <vPortExitCritical+0x3e>
10006a1c:	2300      	movs	r3, #0
10006a1e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
10006a20:	683b      	ldr	r3, [r7, #0]
10006a22:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
10006a26:	bf00      	nop
10006a28:	370c      	adds	r7, #12
10006a2a:	46bd      	mov	sp, r7
10006a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
10006a30:	4770      	bx	lr
10006a32:	bf00      	nop
10006a34:	1002000c 	.word	0x1002000c
	...

10006a40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
10006a40:	f3ef 8009 	mrs	r0, PSP
10006a44:	f3bf 8f6f 	isb	sy
10006a48:	4b15      	ldr	r3, [pc, #84]	; (10006aa0 <pxCurrentTCBConst>)
10006a4a:	681a      	ldr	r2, [r3, #0]
10006a4c:	f01e 0f10 	tst.w	lr, #16
10006a50:	bf08      	it	eq
10006a52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
10006a56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
10006a5a:	6010      	str	r0, [r2, #0]
10006a5c:	e92d 0009 	stmdb	sp!, {r0, r3}
10006a60:	f04f 0050 	mov.w	r0, #80	; 0x50
10006a64:	f380 8811 	msr	BASEPRI, r0
10006a68:	f3bf 8f4f 	dsb	sy
10006a6c:	f3bf 8f6f 	isb	sy
10006a70:	f001 f922 	bl	10007cb8 <vTaskSwitchContext>
10006a74:	f04f 0000 	mov.w	r0, #0
10006a78:	f380 8811 	msr	BASEPRI, r0
10006a7c:	bc09      	pop	{r0, r3}
10006a7e:	6819      	ldr	r1, [r3, #0]
10006a80:	6808      	ldr	r0, [r1, #0]
10006a82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
10006a86:	f01e 0f10 	tst.w	lr, #16
10006a8a:	bf08      	it	eq
10006a8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
10006a90:	f380 8809 	msr	PSP, r0
10006a94:	f3bf 8f6f 	isb	sy
10006a98:	4770      	bx	lr
10006a9a:	bf00      	nop
10006a9c:	f3af 8000 	nop.w

10006aa0 <pxCurrentTCBConst>:
10006aa0:	10021370 	.word	0x10021370
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
10006aa4:	bf00      	nop
10006aa6:	bf00      	nop

10006aa8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
10006aa8:	b580      	push	{r7, lr}
10006aaa:	b082      	sub	sp, #8
10006aac:	af00      	add	r7, sp, #0
	__asm volatile
10006aae:	f04f 0350 	mov.w	r3, #80	; 0x50
10006ab2:	f383 8811 	msr	BASEPRI, r3
10006ab6:	f3bf 8f6f 	isb	sy
10006aba:	f3bf 8f4f 	dsb	sy
10006abe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
10006ac0:	f001 f842 	bl	10007b48 <xTaskIncrementTick>
10006ac4:	4603      	mov	r3, r0
10006ac6:	2b00      	cmp	r3, #0
10006ac8:	d003      	beq.n	10006ad2 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
10006aca:	4b06      	ldr	r3, [pc, #24]	; (10006ae4 <xPortSysTickHandler+0x3c>)
10006acc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
10006ad0:	601a      	str	r2, [r3, #0]
10006ad2:	2300      	movs	r3, #0
10006ad4:	603b      	str	r3, [r7, #0]
	__asm volatile
10006ad6:	683b      	ldr	r3, [r7, #0]
10006ad8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
10006adc:	bf00      	nop
10006ade:	3708      	adds	r7, #8
10006ae0:	46bd      	mov	sp, r7
10006ae2:	bd80      	pop	{r7, pc}
10006ae4:	e000ed04 	.word	0xe000ed04

10006ae8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
10006ae8:	b480      	push	{r7}
10006aea:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
10006aec:	4b0b      	ldr	r3, [pc, #44]	; (10006b1c <vPortSetupTimerInterrupt+0x34>)
10006aee:	2200      	movs	r2, #0
10006af0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
10006af2:	4b0b      	ldr	r3, [pc, #44]	; (10006b20 <vPortSetupTimerInterrupt+0x38>)
10006af4:	2200      	movs	r2, #0
10006af6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
10006af8:	4b0a      	ldr	r3, [pc, #40]	; (10006b24 <vPortSetupTimerInterrupt+0x3c>)
10006afa:	681b      	ldr	r3, [r3, #0]
10006afc:	4a0a      	ldr	r2, [pc, #40]	; (10006b28 <vPortSetupTimerInterrupt+0x40>)
10006afe:	fba2 2303 	umull	r2, r3, r2, r3
10006b02:	099b      	lsrs	r3, r3, #6
10006b04:	4a09      	ldr	r2, [pc, #36]	; (10006b2c <vPortSetupTimerInterrupt+0x44>)
10006b06:	3b01      	subs	r3, #1
10006b08:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
10006b0a:	4b04      	ldr	r3, [pc, #16]	; (10006b1c <vPortSetupTimerInterrupt+0x34>)
10006b0c:	2207      	movs	r2, #7
10006b0e:	601a      	str	r2, [r3, #0]
}
10006b10:	bf00      	nop
10006b12:	46bd      	mov	sp, r7
10006b14:	f85d 7b04 	ldr.w	r7, [sp], #4
10006b18:	4770      	bx	lr
10006b1a:	bf00      	nop
10006b1c:	e000e010 	.word	0xe000e010
10006b20:	e000e018 	.word	0xe000e018
10006b24:	10020000 	.word	0x10020000
10006b28:	10624dd3 	.word	0x10624dd3
10006b2c:	e000e014 	.word	0xe000e014

10006b30 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
10006b30:	f8df 000c 	ldr.w	r0, [pc, #12]	; 10006b40 <vPortEnableVFP+0x10>
10006b34:	6801      	ldr	r1, [r0, #0]
10006b36:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
10006b3a:	6001      	str	r1, [r0, #0]
10006b3c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
10006b3e:	bf00      	nop
10006b40:	e000ed88 	.word	0xe000ed88

10006b44 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
10006b44:	b480      	push	{r7}
10006b46:	b085      	sub	sp, #20
10006b48:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
10006b4a:	f3ef 8305 	mrs	r3, IPSR
10006b4e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
10006b50:	68fb      	ldr	r3, [r7, #12]
10006b52:	2b0f      	cmp	r3, #15
10006b54:	d913      	bls.n	10006b7e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
10006b56:	4a16      	ldr	r2, [pc, #88]	; (10006bb0 <vPortValidateInterruptPriority+0x6c>)
10006b58:	68fb      	ldr	r3, [r7, #12]
10006b5a:	4413      	add	r3, r2
10006b5c:	781b      	ldrb	r3, [r3, #0]
10006b5e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
10006b60:	4b14      	ldr	r3, [pc, #80]	; (10006bb4 <vPortValidateInterruptPriority+0x70>)
10006b62:	781b      	ldrb	r3, [r3, #0]
10006b64:	7afa      	ldrb	r2, [r7, #11]
10006b66:	429a      	cmp	r2, r3
10006b68:	d209      	bcs.n	10006b7e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
10006b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
10006b6e:	f383 8811 	msr	BASEPRI, r3
10006b72:	f3bf 8f6f 	isb	sy
10006b76:	f3bf 8f4f 	dsb	sy
10006b7a:	607b      	str	r3, [r7, #4]
10006b7c:	e7fe      	b.n	10006b7c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
10006b7e:	4b0e      	ldr	r3, [pc, #56]	; (10006bb8 <vPortValidateInterruptPriority+0x74>)
10006b80:	681b      	ldr	r3, [r3, #0]
10006b82:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
10006b86:	4b0d      	ldr	r3, [pc, #52]	; (10006bbc <vPortValidateInterruptPriority+0x78>)
10006b88:	681b      	ldr	r3, [r3, #0]
10006b8a:	429a      	cmp	r2, r3
10006b8c:	d909      	bls.n	10006ba2 <vPortValidateInterruptPriority+0x5e>
10006b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
10006b92:	f383 8811 	msr	BASEPRI, r3
10006b96:	f3bf 8f6f 	isb	sy
10006b9a:	f3bf 8f4f 	dsb	sy
10006b9e:	603b      	str	r3, [r7, #0]
10006ba0:	e7fe      	b.n	10006ba0 <vPortValidateInterruptPriority+0x5c>
	}
10006ba2:	bf00      	nop
10006ba4:	3714      	adds	r7, #20
10006ba6:	46bd      	mov	sp, r7
10006ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
10006bac:	4770      	bx	lr
10006bae:	bf00      	nop
10006bb0:	e000e3f0 	.word	0xe000e3f0
10006bb4:	10021368 	.word	0x10021368
10006bb8:	e000ed0c 	.word	0xe000ed0c
10006bbc:	1002136c 	.word	0x1002136c

10006bc0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
10006bc0:	b580      	push	{r7, lr}
10006bc2:	b084      	sub	sp, #16
10006bc4:	af00      	add	r7, sp, #0
10006bc6:	6078      	str	r0, [r7, #4]
10006bc8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
10006bca:	687b      	ldr	r3, [r7, #4]
10006bcc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
10006bce:	68fb      	ldr	r3, [r7, #12]
10006bd0:	2b00      	cmp	r3, #0
10006bd2:	d109      	bne.n	10006be8 <xQueueGenericReset+0x28>
10006bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
10006bd8:	f383 8811 	msr	BASEPRI, r3
10006bdc:	f3bf 8f6f 	isb	sy
10006be0:	f3bf 8f4f 	dsb	sy
10006be4:	60bb      	str	r3, [r7, #8]
10006be6:	e7fe      	b.n	10006be6 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
10006be8:	f7ff fed0 	bl	1000698c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
10006bec:	68fb      	ldr	r3, [r7, #12]
10006bee:	681a      	ldr	r2, [r3, #0]
10006bf0:	68fb      	ldr	r3, [r7, #12]
10006bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10006bf4:	68f9      	ldr	r1, [r7, #12]
10006bf6:	6c09      	ldr	r1, [r1, #64]	; 0x40
10006bf8:	fb01 f303 	mul.w	r3, r1, r3
10006bfc:	441a      	add	r2, r3
10006bfe:	68fb      	ldr	r3, [r7, #12]
10006c00:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
10006c02:	68fb      	ldr	r3, [r7, #12]
10006c04:	2200      	movs	r2, #0
10006c06:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
10006c08:	68fb      	ldr	r3, [r7, #12]
10006c0a:	681a      	ldr	r2, [r3, #0]
10006c0c:	68fb      	ldr	r3, [r7, #12]
10006c0e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
10006c10:	68fb      	ldr	r3, [r7, #12]
10006c12:	681a      	ldr	r2, [r3, #0]
10006c14:	68fb      	ldr	r3, [r7, #12]
10006c16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10006c18:	3b01      	subs	r3, #1
10006c1a:	68f9      	ldr	r1, [r7, #12]
10006c1c:	6c09      	ldr	r1, [r1, #64]	; 0x40
10006c1e:	fb01 f303 	mul.w	r3, r1, r3
10006c22:	441a      	add	r2, r3
10006c24:	68fb      	ldr	r3, [r7, #12]
10006c26:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
10006c28:	68fb      	ldr	r3, [r7, #12]
10006c2a:	22ff      	movs	r2, #255	; 0xff
10006c2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
10006c30:	68fb      	ldr	r3, [r7, #12]
10006c32:	22ff      	movs	r2, #255	; 0xff
10006c34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
10006c38:	683b      	ldr	r3, [r7, #0]
10006c3a:	2b00      	cmp	r3, #0
10006c3c:	d114      	bne.n	10006c68 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
10006c3e:	68fb      	ldr	r3, [r7, #12]
10006c40:	691b      	ldr	r3, [r3, #16]
10006c42:	2b00      	cmp	r3, #0
10006c44:	d01a      	beq.n	10006c7c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
10006c46:	68fb      	ldr	r3, [r7, #12]
10006c48:	3310      	adds	r3, #16
10006c4a:	4618      	mov	r0, r3
10006c4c:	f001 f8de 	bl	10007e0c <xTaskRemoveFromEventList>
10006c50:	4603      	mov	r3, r0
10006c52:	2b00      	cmp	r3, #0
10006c54:	d012      	beq.n	10006c7c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
10006c56:	4b0d      	ldr	r3, [pc, #52]	; (10006c8c <xQueueGenericReset+0xcc>)
10006c58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
10006c5c:	601a      	str	r2, [r3, #0]
10006c5e:	f3bf 8f4f 	dsb	sy
10006c62:	f3bf 8f6f 	isb	sy
10006c66:	e009      	b.n	10006c7c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
10006c68:	68fb      	ldr	r3, [r7, #12]
10006c6a:	3310      	adds	r3, #16
10006c6c:	4618      	mov	r0, r3
10006c6e:	f7ff fcb5 	bl	100065dc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
10006c72:	68fb      	ldr	r3, [r7, #12]
10006c74:	3324      	adds	r3, #36	; 0x24
10006c76:	4618      	mov	r0, r3
10006c78:	f7ff fcb0 	bl	100065dc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
10006c7c:	f7ff feb4 	bl	100069e8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
10006c80:	2301      	movs	r3, #1
}
10006c82:	4618      	mov	r0, r3
10006c84:	3710      	adds	r7, #16
10006c86:	46bd      	mov	sp, r7
10006c88:	bd80      	pop	{r7, pc}
10006c8a:	bf00      	nop
10006c8c:	e000ed04 	.word	0xe000ed04

10006c90 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
10006c90:	b580      	push	{r7, lr}
10006c92:	b08e      	sub	sp, #56	; 0x38
10006c94:	af02      	add	r7, sp, #8
10006c96:	60f8      	str	r0, [r7, #12]
10006c98:	60b9      	str	r1, [r7, #8]
10006c9a:	607a      	str	r2, [r7, #4]
10006c9c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
10006c9e:	68fb      	ldr	r3, [r7, #12]
10006ca0:	2b00      	cmp	r3, #0
10006ca2:	d109      	bne.n	10006cb8 <xQueueGenericCreateStatic+0x28>
10006ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
10006ca8:	f383 8811 	msr	BASEPRI, r3
10006cac:	f3bf 8f6f 	isb	sy
10006cb0:	f3bf 8f4f 	dsb	sy
10006cb4:	62bb      	str	r3, [r7, #40]	; 0x28
10006cb6:	e7fe      	b.n	10006cb6 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
10006cb8:	683b      	ldr	r3, [r7, #0]
10006cba:	2b00      	cmp	r3, #0
10006cbc:	d109      	bne.n	10006cd2 <xQueueGenericCreateStatic+0x42>
10006cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
10006cc2:	f383 8811 	msr	BASEPRI, r3
10006cc6:	f3bf 8f6f 	isb	sy
10006cca:	f3bf 8f4f 	dsb	sy
10006cce:	627b      	str	r3, [r7, #36]	; 0x24
10006cd0:	e7fe      	b.n	10006cd0 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
10006cd2:	687b      	ldr	r3, [r7, #4]
10006cd4:	2b00      	cmp	r3, #0
10006cd6:	d002      	beq.n	10006cde <xQueueGenericCreateStatic+0x4e>
10006cd8:	68bb      	ldr	r3, [r7, #8]
10006cda:	2b00      	cmp	r3, #0
10006cdc:	d001      	beq.n	10006ce2 <xQueueGenericCreateStatic+0x52>
10006cde:	2301      	movs	r3, #1
10006ce0:	e000      	b.n	10006ce4 <xQueueGenericCreateStatic+0x54>
10006ce2:	2300      	movs	r3, #0
10006ce4:	2b00      	cmp	r3, #0
10006ce6:	d109      	bne.n	10006cfc <xQueueGenericCreateStatic+0x6c>
10006ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
10006cec:	f383 8811 	msr	BASEPRI, r3
10006cf0:	f3bf 8f6f 	isb	sy
10006cf4:	f3bf 8f4f 	dsb	sy
10006cf8:	623b      	str	r3, [r7, #32]
10006cfa:	e7fe      	b.n	10006cfa <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
10006cfc:	687b      	ldr	r3, [r7, #4]
10006cfe:	2b00      	cmp	r3, #0
10006d00:	d102      	bne.n	10006d08 <xQueueGenericCreateStatic+0x78>
10006d02:	68bb      	ldr	r3, [r7, #8]
10006d04:	2b00      	cmp	r3, #0
10006d06:	d101      	bne.n	10006d0c <xQueueGenericCreateStatic+0x7c>
10006d08:	2301      	movs	r3, #1
10006d0a:	e000      	b.n	10006d0e <xQueueGenericCreateStatic+0x7e>
10006d0c:	2300      	movs	r3, #0
10006d0e:	2b00      	cmp	r3, #0
10006d10:	d109      	bne.n	10006d26 <xQueueGenericCreateStatic+0x96>
10006d12:	f04f 0350 	mov.w	r3, #80	; 0x50
10006d16:	f383 8811 	msr	BASEPRI, r3
10006d1a:	f3bf 8f6f 	isb	sy
10006d1e:	f3bf 8f4f 	dsb	sy
10006d22:	61fb      	str	r3, [r7, #28]
10006d24:	e7fe      	b.n	10006d24 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
10006d26:	2350      	movs	r3, #80	; 0x50
10006d28:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
10006d2a:	697b      	ldr	r3, [r7, #20]
10006d2c:	2b50      	cmp	r3, #80	; 0x50
10006d2e:	d009      	beq.n	10006d44 <xQueueGenericCreateStatic+0xb4>
10006d30:	f04f 0350 	mov.w	r3, #80	; 0x50
10006d34:	f383 8811 	msr	BASEPRI, r3
10006d38:	f3bf 8f6f 	isb	sy
10006d3c:	f3bf 8f4f 	dsb	sy
10006d40:	61bb      	str	r3, [r7, #24]
10006d42:	e7fe      	b.n	10006d42 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
10006d44:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
10006d46:	683b      	ldr	r3, [r7, #0]
10006d48:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
10006d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10006d4c:	2b00      	cmp	r3, #0
10006d4e:	d00d      	beq.n	10006d6c <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
10006d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10006d52:	2201      	movs	r2, #1
10006d54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
10006d58:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
10006d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10006d5e:	9300      	str	r3, [sp, #0]
10006d60:	4613      	mov	r3, r2
10006d62:	687a      	ldr	r2, [r7, #4]
10006d64:	68b9      	ldr	r1, [r7, #8]
10006d66:	68f8      	ldr	r0, [r7, #12]
10006d68:	f000 f805 	bl	10006d76 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
10006d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
10006d6e:	4618      	mov	r0, r3
10006d70:	3730      	adds	r7, #48	; 0x30
10006d72:	46bd      	mov	sp, r7
10006d74:	bd80      	pop	{r7, pc}

10006d76 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
10006d76:	b580      	push	{r7, lr}
10006d78:	b084      	sub	sp, #16
10006d7a:	af00      	add	r7, sp, #0
10006d7c:	60f8      	str	r0, [r7, #12]
10006d7e:	60b9      	str	r1, [r7, #8]
10006d80:	607a      	str	r2, [r7, #4]
10006d82:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
10006d84:	68bb      	ldr	r3, [r7, #8]
10006d86:	2b00      	cmp	r3, #0
10006d88:	d103      	bne.n	10006d92 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
10006d8a:	69bb      	ldr	r3, [r7, #24]
10006d8c:	69ba      	ldr	r2, [r7, #24]
10006d8e:	601a      	str	r2, [r3, #0]
10006d90:	e002      	b.n	10006d98 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
10006d92:	69bb      	ldr	r3, [r7, #24]
10006d94:	687a      	ldr	r2, [r7, #4]
10006d96:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
10006d98:	69bb      	ldr	r3, [r7, #24]
10006d9a:	68fa      	ldr	r2, [r7, #12]
10006d9c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
10006d9e:	69bb      	ldr	r3, [r7, #24]
10006da0:	68ba      	ldr	r2, [r7, #8]
10006da2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
10006da4:	2101      	movs	r1, #1
10006da6:	69b8      	ldr	r0, [r7, #24]
10006da8:	f7ff ff0a 	bl	10006bc0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
10006dac:	69bb      	ldr	r3, [r7, #24]
10006dae:	78fa      	ldrb	r2, [r7, #3]
10006db0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
10006db4:	bf00      	nop
10006db6:	3710      	adds	r7, #16
10006db8:	46bd      	mov	sp, r7
10006dba:	bd80      	pop	{r7, pc}

10006dbc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
10006dbc:	b580      	push	{r7, lr}
10006dbe:	b08e      	sub	sp, #56	; 0x38
10006dc0:	af00      	add	r7, sp, #0
10006dc2:	60f8      	str	r0, [r7, #12]
10006dc4:	60b9      	str	r1, [r7, #8]
10006dc6:	607a      	str	r2, [r7, #4]
10006dc8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
10006dca:	2300      	movs	r3, #0
10006dcc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
10006dce:	68fb      	ldr	r3, [r7, #12]
10006dd0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
10006dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10006dd4:	2b00      	cmp	r3, #0
10006dd6:	d109      	bne.n	10006dec <xQueueGenericSend+0x30>
10006dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
10006ddc:	f383 8811 	msr	BASEPRI, r3
10006de0:	f3bf 8f6f 	isb	sy
10006de4:	f3bf 8f4f 	dsb	sy
10006de8:	62bb      	str	r3, [r7, #40]	; 0x28
10006dea:	e7fe      	b.n	10006dea <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
10006dec:	68bb      	ldr	r3, [r7, #8]
10006dee:	2b00      	cmp	r3, #0
10006df0:	d103      	bne.n	10006dfa <xQueueGenericSend+0x3e>
10006df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10006df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10006df6:	2b00      	cmp	r3, #0
10006df8:	d101      	bne.n	10006dfe <xQueueGenericSend+0x42>
10006dfa:	2301      	movs	r3, #1
10006dfc:	e000      	b.n	10006e00 <xQueueGenericSend+0x44>
10006dfe:	2300      	movs	r3, #0
10006e00:	2b00      	cmp	r3, #0
10006e02:	d109      	bne.n	10006e18 <xQueueGenericSend+0x5c>
10006e04:	f04f 0350 	mov.w	r3, #80	; 0x50
10006e08:	f383 8811 	msr	BASEPRI, r3
10006e0c:	f3bf 8f6f 	isb	sy
10006e10:	f3bf 8f4f 	dsb	sy
10006e14:	627b      	str	r3, [r7, #36]	; 0x24
10006e16:	e7fe      	b.n	10006e16 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
10006e18:	683b      	ldr	r3, [r7, #0]
10006e1a:	2b02      	cmp	r3, #2
10006e1c:	d103      	bne.n	10006e26 <xQueueGenericSend+0x6a>
10006e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10006e20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10006e22:	2b01      	cmp	r3, #1
10006e24:	d101      	bne.n	10006e2a <xQueueGenericSend+0x6e>
10006e26:	2301      	movs	r3, #1
10006e28:	e000      	b.n	10006e2c <xQueueGenericSend+0x70>
10006e2a:	2300      	movs	r3, #0
10006e2c:	2b00      	cmp	r3, #0
10006e2e:	d109      	bne.n	10006e44 <xQueueGenericSend+0x88>
10006e30:	f04f 0350 	mov.w	r3, #80	; 0x50
10006e34:	f383 8811 	msr	BASEPRI, r3
10006e38:	f3bf 8f6f 	isb	sy
10006e3c:	f3bf 8f4f 	dsb	sy
10006e40:	623b      	str	r3, [r7, #32]
10006e42:	e7fe      	b.n	10006e42 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
10006e44:	f001 f998 	bl	10008178 <xTaskGetSchedulerState>
10006e48:	4603      	mov	r3, r0
10006e4a:	2b00      	cmp	r3, #0
10006e4c:	d102      	bne.n	10006e54 <xQueueGenericSend+0x98>
10006e4e:	687b      	ldr	r3, [r7, #4]
10006e50:	2b00      	cmp	r3, #0
10006e52:	d101      	bne.n	10006e58 <xQueueGenericSend+0x9c>
10006e54:	2301      	movs	r3, #1
10006e56:	e000      	b.n	10006e5a <xQueueGenericSend+0x9e>
10006e58:	2300      	movs	r3, #0
10006e5a:	2b00      	cmp	r3, #0
10006e5c:	d109      	bne.n	10006e72 <xQueueGenericSend+0xb6>
10006e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
10006e62:	f383 8811 	msr	BASEPRI, r3
10006e66:	f3bf 8f6f 	isb	sy
10006e6a:	f3bf 8f4f 	dsb	sy
10006e6e:	61fb      	str	r3, [r7, #28]
10006e70:	e7fe      	b.n	10006e70 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
10006e72:	f7ff fd8b 	bl	1000698c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
10006e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10006e78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
10006e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10006e7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10006e7e:	429a      	cmp	r2, r3
10006e80:	d302      	bcc.n	10006e88 <xQueueGenericSend+0xcc>
10006e82:	683b      	ldr	r3, [r7, #0]
10006e84:	2b02      	cmp	r3, #2
10006e86:	d129      	bne.n	10006edc <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
10006e88:	683a      	ldr	r2, [r7, #0]
10006e8a:	68b9      	ldr	r1, [r7, #8]
10006e8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
10006e8e:	f000 f9ff 	bl	10007290 <prvCopyDataToQueue>
10006e92:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
10006e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10006e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006e98:	2b00      	cmp	r3, #0
10006e9a:	d010      	beq.n	10006ebe <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
10006e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10006e9e:	3324      	adds	r3, #36	; 0x24
10006ea0:	4618      	mov	r0, r3
10006ea2:	f000 ffb3 	bl	10007e0c <xTaskRemoveFromEventList>
10006ea6:	4603      	mov	r3, r0
10006ea8:	2b00      	cmp	r3, #0
10006eaa:	d013      	beq.n	10006ed4 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
10006eac:	4b3f      	ldr	r3, [pc, #252]	; (10006fac <xQueueGenericSend+0x1f0>)
10006eae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
10006eb2:	601a      	str	r2, [r3, #0]
10006eb4:	f3bf 8f4f 	dsb	sy
10006eb8:	f3bf 8f6f 	isb	sy
10006ebc:	e00a      	b.n	10006ed4 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
10006ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10006ec0:	2b00      	cmp	r3, #0
10006ec2:	d007      	beq.n	10006ed4 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
10006ec4:	4b39      	ldr	r3, [pc, #228]	; (10006fac <xQueueGenericSend+0x1f0>)
10006ec6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
10006eca:	601a      	str	r2, [r3, #0]
10006ecc:	f3bf 8f4f 	dsb	sy
10006ed0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
10006ed4:	f7ff fd88 	bl	100069e8 <vPortExitCritical>
				return pdPASS;
10006ed8:	2301      	movs	r3, #1
10006eda:	e063      	b.n	10006fa4 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
10006edc:	687b      	ldr	r3, [r7, #4]
10006ede:	2b00      	cmp	r3, #0
10006ee0:	d103      	bne.n	10006eea <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
10006ee2:	f7ff fd81 	bl	100069e8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
10006ee6:	2300      	movs	r3, #0
10006ee8:	e05c      	b.n	10006fa4 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
10006eea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10006eec:	2b00      	cmp	r3, #0
10006eee:	d106      	bne.n	10006efe <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
10006ef0:	f107 0314 	add.w	r3, r7, #20
10006ef4:	4618      	mov	r0, r3
10006ef6:	f000 ffeb 	bl	10007ed0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
10006efa:	2301      	movs	r3, #1
10006efc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
10006efe:	f7ff fd73 	bl	100069e8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
10006f02:	f000 fd67 	bl	100079d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
10006f06:	f7ff fd41 	bl	1000698c <vPortEnterCritical>
10006f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10006f0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
10006f10:	b25b      	sxtb	r3, r3
10006f12:	f1b3 3fff 	cmp.w	r3, #4294967295
10006f16:	d103      	bne.n	10006f20 <xQueueGenericSend+0x164>
10006f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10006f1a:	2200      	movs	r2, #0
10006f1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
10006f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10006f22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
10006f26:	b25b      	sxtb	r3, r3
10006f28:	f1b3 3fff 	cmp.w	r3, #4294967295
10006f2c:	d103      	bne.n	10006f36 <xQueueGenericSend+0x17a>
10006f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10006f30:	2200      	movs	r2, #0
10006f32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
10006f36:	f7ff fd57 	bl	100069e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
10006f3a:	1d3a      	adds	r2, r7, #4
10006f3c:	f107 0314 	add.w	r3, r7, #20
10006f40:	4611      	mov	r1, r2
10006f42:	4618      	mov	r0, r3
10006f44:	f000 ffda 	bl	10007efc <xTaskCheckForTimeOut>
10006f48:	4603      	mov	r3, r0
10006f4a:	2b00      	cmp	r3, #0
10006f4c:	d124      	bne.n	10006f98 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
10006f4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
10006f50:	f000 fa96 	bl	10007480 <prvIsQueueFull>
10006f54:	4603      	mov	r3, r0
10006f56:	2b00      	cmp	r3, #0
10006f58:	d018      	beq.n	10006f8c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
10006f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10006f5c:	3310      	adds	r3, #16
10006f5e:	687a      	ldr	r2, [r7, #4]
10006f60:	4611      	mov	r1, r2
10006f62:	4618      	mov	r0, r3
10006f64:	f000 ff04 	bl	10007d70 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
10006f68:	6b38      	ldr	r0, [r7, #48]	; 0x30
10006f6a:	f000 fa21 	bl	100073b0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
10006f6e:	f000 fd3f 	bl	100079f0 <xTaskResumeAll>
10006f72:	4603      	mov	r3, r0
10006f74:	2b00      	cmp	r3, #0
10006f76:	f47f af7c 	bne.w	10006e72 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
10006f7a:	4b0c      	ldr	r3, [pc, #48]	; (10006fac <xQueueGenericSend+0x1f0>)
10006f7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
10006f80:	601a      	str	r2, [r3, #0]
10006f82:	f3bf 8f4f 	dsb	sy
10006f86:	f3bf 8f6f 	isb	sy
10006f8a:	e772      	b.n	10006e72 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
10006f8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
10006f8e:	f000 fa0f 	bl	100073b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
10006f92:	f000 fd2d 	bl	100079f0 <xTaskResumeAll>
10006f96:	e76c      	b.n	10006e72 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
10006f98:	6b38      	ldr	r0, [r7, #48]	; 0x30
10006f9a:	f000 fa09 	bl	100073b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
10006f9e:	f000 fd27 	bl	100079f0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
10006fa2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
10006fa4:	4618      	mov	r0, r3
10006fa6:	3738      	adds	r7, #56	; 0x38
10006fa8:	46bd      	mov	sp, r7
10006faa:	bd80      	pop	{r7, pc}
10006fac:	e000ed04 	.word	0xe000ed04

10006fb0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
10006fb0:	b580      	push	{r7, lr}
10006fb2:	b08e      	sub	sp, #56	; 0x38
10006fb4:	af00      	add	r7, sp, #0
10006fb6:	60f8      	str	r0, [r7, #12]
10006fb8:	60b9      	str	r1, [r7, #8]
10006fba:	607a      	str	r2, [r7, #4]
10006fbc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
10006fbe:	68fb      	ldr	r3, [r7, #12]
10006fc0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
10006fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10006fc4:	2b00      	cmp	r3, #0
10006fc6:	d109      	bne.n	10006fdc <xQueueGenericSendFromISR+0x2c>
10006fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
10006fcc:	f383 8811 	msr	BASEPRI, r3
10006fd0:	f3bf 8f6f 	isb	sy
10006fd4:	f3bf 8f4f 	dsb	sy
10006fd8:	627b      	str	r3, [r7, #36]	; 0x24
10006fda:	e7fe      	b.n	10006fda <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
10006fdc:	68bb      	ldr	r3, [r7, #8]
10006fde:	2b00      	cmp	r3, #0
10006fe0:	d103      	bne.n	10006fea <xQueueGenericSendFromISR+0x3a>
10006fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10006fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10006fe6:	2b00      	cmp	r3, #0
10006fe8:	d101      	bne.n	10006fee <xQueueGenericSendFromISR+0x3e>
10006fea:	2301      	movs	r3, #1
10006fec:	e000      	b.n	10006ff0 <xQueueGenericSendFromISR+0x40>
10006fee:	2300      	movs	r3, #0
10006ff0:	2b00      	cmp	r3, #0
10006ff2:	d109      	bne.n	10007008 <xQueueGenericSendFromISR+0x58>
10006ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
10006ff8:	f383 8811 	msr	BASEPRI, r3
10006ffc:	f3bf 8f6f 	isb	sy
10007000:	f3bf 8f4f 	dsb	sy
10007004:	623b      	str	r3, [r7, #32]
10007006:	e7fe      	b.n	10007006 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
10007008:	683b      	ldr	r3, [r7, #0]
1000700a:	2b02      	cmp	r3, #2
1000700c:	d103      	bne.n	10007016 <xQueueGenericSendFromISR+0x66>
1000700e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10007010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10007012:	2b01      	cmp	r3, #1
10007014:	d101      	bne.n	1000701a <xQueueGenericSendFromISR+0x6a>
10007016:	2301      	movs	r3, #1
10007018:	e000      	b.n	1000701c <xQueueGenericSendFromISR+0x6c>
1000701a:	2300      	movs	r3, #0
1000701c:	2b00      	cmp	r3, #0
1000701e:	d109      	bne.n	10007034 <xQueueGenericSendFromISR+0x84>
10007020:	f04f 0350 	mov.w	r3, #80	; 0x50
10007024:	f383 8811 	msr	BASEPRI, r3
10007028:	f3bf 8f6f 	isb	sy
1000702c:	f3bf 8f4f 	dsb	sy
10007030:	61fb      	str	r3, [r7, #28]
10007032:	e7fe      	b.n	10007032 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
10007034:	f7ff fd86 	bl	10006b44 <vPortValidateInterruptPriority>
	__asm volatile
10007038:	f3ef 8211 	mrs	r2, BASEPRI
1000703c:	f04f 0350 	mov.w	r3, #80	; 0x50
10007040:	f383 8811 	msr	BASEPRI, r3
10007044:	f3bf 8f6f 	isb	sy
10007048:	f3bf 8f4f 	dsb	sy
1000704c:	61ba      	str	r2, [r7, #24]
1000704e:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
10007050:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
10007052:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
10007054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10007056:	6b9a      	ldr	r2, [r3, #56]	; 0x38
10007058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000705a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
1000705c:	429a      	cmp	r2, r3
1000705e:	d302      	bcc.n	10007066 <xQueueGenericSendFromISR+0xb6>
10007060:	683b      	ldr	r3, [r7, #0]
10007062:	2b02      	cmp	r3, #2
10007064:	d12c      	bne.n	100070c0 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
10007066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10007068:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
1000706c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
10007070:	683a      	ldr	r2, [r7, #0]
10007072:	68b9      	ldr	r1, [r7, #8]
10007074:	6b38      	ldr	r0, [r7, #48]	; 0x30
10007076:	f000 f90b 	bl	10007290 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
1000707a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
1000707e:	f1b3 3fff 	cmp.w	r3, #4294967295
10007082:	d112      	bne.n	100070aa <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
10007084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10007086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10007088:	2b00      	cmp	r3, #0
1000708a:	d016      	beq.n	100070ba <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1000708c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000708e:	3324      	adds	r3, #36	; 0x24
10007090:	4618      	mov	r0, r3
10007092:	f000 febb 	bl	10007e0c <xTaskRemoveFromEventList>
10007096:	4603      	mov	r3, r0
10007098:	2b00      	cmp	r3, #0
1000709a:	d00e      	beq.n	100070ba <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
1000709c:	687b      	ldr	r3, [r7, #4]
1000709e:	2b00      	cmp	r3, #0
100070a0:	d00b      	beq.n	100070ba <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
100070a2:	687b      	ldr	r3, [r7, #4]
100070a4:	2201      	movs	r2, #1
100070a6:	601a      	str	r2, [r3, #0]
100070a8:	e007      	b.n	100070ba <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
100070aa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
100070ae:	3301      	adds	r3, #1
100070b0:	b2db      	uxtb	r3, r3
100070b2:	b25a      	sxtb	r2, r3
100070b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100070b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
100070ba:	2301      	movs	r3, #1
100070bc:	637b      	str	r3, [r7, #52]	; 0x34
		{
100070be:	e001      	b.n	100070c4 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
100070c0:	2300      	movs	r3, #0
100070c2:	637b      	str	r3, [r7, #52]	; 0x34
100070c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
100070c6:	613b      	str	r3, [r7, #16]
	__asm volatile
100070c8:	693b      	ldr	r3, [r7, #16]
100070ca:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
100070ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
100070d0:	4618      	mov	r0, r3
100070d2:	3738      	adds	r7, #56	; 0x38
100070d4:	46bd      	mov	sp, r7
100070d6:	bd80      	pop	{r7, pc}

100070d8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
100070d8:	b580      	push	{r7, lr}
100070da:	b08c      	sub	sp, #48	; 0x30
100070dc:	af00      	add	r7, sp, #0
100070de:	60f8      	str	r0, [r7, #12]
100070e0:	60b9      	str	r1, [r7, #8]
100070e2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
100070e4:	2300      	movs	r3, #0
100070e6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
100070e8:	68fb      	ldr	r3, [r7, #12]
100070ea:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
100070ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
100070ee:	2b00      	cmp	r3, #0
100070f0:	d109      	bne.n	10007106 <xQueueReceive+0x2e>
	__asm volatile
100070f2:	f04f 0350 	mov.w	r3, #80	; 0x50
100070f6:	f383 8811 	msr	BASEPRI, r3
100070fa:	f3bf 8f6f 	isb	sy
100070fe:	f3bf 8f4f 	dsb	sy
10007102:	623b      	str	r3, [r7, #32]
10007104:	e7fe      	b.n	10007104 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
10007106:	68bb      	ldr	r3, [r7, #8]
10007108:	2b00      	cmp	r3, #0
1000710a:	d103      	bne.n	10007114 <xQueueReceive+0x3c>
1000710c:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000710e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10007110:	2b00      	cmp	r3, #0
10007112:	d101      	bne.n	10007118 <xQueueReceive+0x40>
10007114:	2301      	movs	r3, #1
10007116:	e000      	b.n	1000711a <xQueueReceive+0x42>
10007118:	2300      	movs	r3, #0
1000711a:	2b00      	cmp	r3, #0
1000711c:	d109      	bne.n	10007132 <xQueueReceive+0x5a>
1000711e:	f04f 0350 	mov.w	r3, #80	; 0x50
10007122:	f383 8811 	msr	BASEPRI, r3
10007126:	f3bf 8f6f 	isb	sy
1000712a:	f3bf 8f4f 	dsb	sy
1000712e:	61fb      	str	r3, [r7, #28]
10007130:	e7fe      	b.n	10007130 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
10007132:	f001 f821 	bl	10008178 <xTaskGetSchedulerState>
10007136:	4603      	mov	r3, r0
10007138:	2b00      	cmp	r3, #0
1000713a:	d102      	bne.n	10007142 <xQueueReceive+0x6a>
1000713c:	687b      	ldr	r3, [r7, #4]
1000713e:	2b00      	cmp	r3, #0
10007140:	d101      	bne.n	10007146 <xQueueReceive+0x6e>
10007142:	2301      	movs	r3, #1
10007144:	e000      	b.n	10007148 <xQueueReceive+0x70>
10007146:	2300      	movs	r3, #0
10007148:	2b00      	cmp	r3, #0
1000714a:	d109      	bne.n	10007160 <xQueueReceive+0x88>
1000714c:	f04f 0350 	mov.w	r3, #80	; 0x50
10007150:	f383 8811 	msr	BASEPRI, r3
10007154:	f3bf 8f6f 	isb	sy
10007158:	f3bf 8f4f 	dsb	sy
1000715c:	61bb      	str	r3, [r7, #24]
1000715e:	e7fe      	b.n	1000715e <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
10007160:	f7ff fc14 	bl	1000698c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
10007164:	6abb      	ldr	r3, [r7, #40]	; 0x28
10007166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
10007168:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1000716a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000716c:	2b00      	cmp	r3, #0
1000716e:	d01f      	beq.n	100071b0 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
10007170:	68b9      	ldr	r1, [r7, #8]
10007172:	6ab8      	ldr	r0, [r7, #40]	; 0x28
10007174:	f000 f8f6 	bl	10007364 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
10007178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000717a:	1e5a      	subs	r2, r3, #1
1000717c:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000717e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
10007180:	6abb      	ldr	r3, [r7, #40]	; 0x28
10007182:	691b      	ldr	r3, [r3, #16]
10007184:	2b00      	cmp	r3, #0
10007186:	d00f      	beq.n	100071a8 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
10007188:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000718a:	3310      	adds	r3, #16
1000718c:	4618      	mov	r0, r3
1000718e:	f000 fe3d 	bl	10007e0c <xTaskRemoveFromEventList>
10007192:	4603      	mov	r3, r0
10007194:	2b00      	cmp	r3, #0
10007196:	d007      	beq.n	100071a8 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
10007198:	4b3c      	ldr	r3, [pc, #240]	; (1000728c <xQueueReceive+0x1b4>)
1000719a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1000719e:	601a      	str	r2, [r3, #0]
100071a0:	f3bf 8f4f 	dsb	sy
100071a4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
100071a8:	f7ff fc1e 	bl	100069e8 <vPortExitCritical>
				return pdPASS;
100071ac:	2301      	movs	r3, #1
100071ae:	e069      	b.n	10007284 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
100071b0:	687b      	ldr	r3, [r7, #4]
100071b2:	2b00      	cmp	r3, #0
100071b4:	d103      	bne.n	100071be <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
100071b6:	f7ff fc17 	bl	100069e8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
100071ba:	2300      	movs	r3, #0
100071bc:	e062      	b.n	10007284 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
100071be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
100071c0:	2b00      	cmp	r3, #0
100071c2:	d106      	bne.n	100071d2 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
100071c4:	f107 0310 	add.w	r3, r7, #16
100071c8:	4618      	mov	r0, r3
100071ca:	f000 fe81 	bl	10007ed0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
100071ce:	2301      	movs	r3, #1
100071d0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
100071d2:	f7ff fc09 	bl	100069e8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
100071d6:	f000 fbfd 	bl	100079d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
100071da:	f7ff fbd7 	bl	1000698c <vPortEnterCritical>
100071de:	6abb      	ldr	r3, [r7, #40]	; 0x28
100071e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
100071e4:	b25b      	sxtb	r3, r3
100071e6:	f1b3 3fff 	cmp.w	r3, #4294967295
100071ea:	d103      	bne.n	100071f4 <xQueueReceive+0x11c>
100071ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
100071ee:	2200      	movs	r2, #0
100071f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
100071f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
100071f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
100071fa:	b25b      	sxtb	r3, r3
100071fc:	f1b3 3fff 	cmp.w	r3, #4294967295
10007200:	d103      	bne.n	1000720a <xQueueReceive+0x132>
10007202:	6abb      	ldr	r3, [r7, #40]	; 0x28
10007204:	2200      	movs	r2, #0
10007206:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
1000720a:	f7ff fbed 	bl	100069e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1000720e:	1d3a      	adds	r2, r7, #4
10007210:	f107 0310 	add.w	r3, r7, #16
10007214:	4611      	mov	r1, r2
10007216:	4618      	mov	r0, r3
10007218:	f000 fe70 	bl	10007efc <xTaskCheckForTimeOut>
1000721c:	4603      	mov	r3, r0
1000721e:	2b00      	cmp	r3, #0
10007220:	d123      	bne.n	1000726a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
10007222:	6ab8      	ldr	r0, [r7, #40]	; 0x28
10007224:	f000 f916 	bl	10007454 <prvIsQueueEmpty>
10007228:	4603      	mov	r3, r0
1000722a:	2b00      	cmp	r3, #0
1000722c:	d017      	beq.n	1000725e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1000722e:	6abb      	ldr	r3, [r7, #40]	; 0x28
10007230:	3324      	adds	r3, #36	; 0x24
10007232:	687a      	ldr	r2, [r7, #4]
10007234:	4611      	mov	r1, r2
10007236:	4618      	mov	r0, r3
10007238:	f000 fd9a 	bl	10007d70 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1000723c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
1000723e:	f000 f8b7 	bl	100073b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
10007242:	f000 fbd5 	bl	100079f0 <xTaskResumeAll>
10007246:	4603      	mov	r3, r0
10007248:	2b00      	cmp	r3, #0
1000724a:	d189      	bne.n	10007160 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
1000724c:	4b0f      	ldr	r3, [pc, #60]	; (1000728c <xQueueReceive+0x1b4>)
1000724e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
10007252:	601a      	str	r2, [r3, #0]
10007254:	f3bf 8f4f 	dsb	sy
10007258:	f3bf 8f6f 	isb	sy
1000725c:	e780      	b.n	10007160 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
1000725e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
10007260:	f000 f8a6 	bl	100073b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
10007264:	f000 fbc4 	bl	100079f0 <xTaskResumeAll>
10007268:	e77a      	b.n	10007160 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
1000726a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
1000726c:	f000 f8a0 	bl	100073b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
10007270:	f000 fbbe 	bl	100079f0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
10007274:	6ab8      	ldr	r0, [r7, #40]	; 0x28
10007276:	f000 f8ed 	bl	10007454 <prvIsQueueEmpty>
1000727a:	4603      	mov	r3, r0
1000727c:	2b00      	cmp	r3, #0
1000727e:	f43f af6f 	beq.w	10007160 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
10007282:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
10007284:	4618      	mov	r0, r3
10007286:	3730      	adds	r7, #48	; 0x30
10007288:	46bd      	mov	sp, r7
1000728a:	bd80      	pop	{r7, pc}
1000728c:	e000ed04 	.word	0xe000ed04

10007290 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
10007290:	b580      	push	{r7, lr}
10007292:	b086      	sub	sp, #24
10007294:	af00      	add	r7, sp, #0
10007296:	60f8      	str	r0, [r7, #12]
10007298:	60b9      	str	r1, [r7, #8]
1000729a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
1000729c:	2300      	movs	r3, #0
1000729e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
100072a0:	68fb      	ldr	r3, [r7, #12]
100072a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
100072a4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
100072a6:	68fb      	ldr	r3, [r7, #12]
100072a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
100072aa:	2b00      	cmp	r3, #0
100072ac:	d10d      	bne.n	100072ca <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
100072ae:	68fb      	ldr	r3, [r7, #12]
100072b0:	681b      	ldr	r3, [r3, #0]
100072b2:	2b00      	cmp	r3, #0
100072b4:	d14d      	bne.n	10007352 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
100072b6:	68fb      	ldr	r3, [r7, #12]
100072b8:	689b      	ldr	r3, [r3, #8]
100072ba:	4618      	mov	r0, r3
100072bc:	f000 ff7a 	bl	100081b4 <xTaskPriorityDisinherit>
100072c0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
100072c2:	68fb      	ldr	r3, [r7, #12]
100072c4:	2200      	movs	r2, #0
100072c6:	609a      	str	r2, [r3, #8]
100072c8:	e043      	b.n	10007352 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
100072ca:	687b      	ldr	r3, [r7, #4]
100072cc:	2b00      	cmp	r3, #0
100072ce:	d119      	bne.n	10007304 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
100072d0:	68fb      	ldr	r3, [r7, #12]
100072d2:	6858      	ldr	r0, [r3, #4]
100072d4:	68fb      	ldr	r3, [r7, #12]
100072d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
100072d8:	461a      	mov	r2, r3
100072da:	68b9      	ldr	r1, [r7, #8]
100072dc:	f001 fb9a 	bl	10008a14 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
100072e0:	68fb      	ldr	r3, [r7, #12]
100072e2:	685a      	ldr	r2, [r3, #4]
100072e4:	68fb      	ldr	r3, [r7, #12]
100072e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
100072e8:	441a      	add	r2, r3
100072ea:	68fb      	ldr	r3, [r7, #12]
100072ec:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
100072ee:	68fb      	ldr	r3, [r7, #12]
100072f0:	685a      	ldr	r2, [r3, #4]
100072f2:	68fb      	ldr	r3, [r7, #12]
100072f4:	689b      	ldr	r3, [r3, #8]
100072f6:	429a      	cmp	r2, r3
100072f8:	d32b      	bcc.n	10007352 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
100072fa:	68fb      	ldr	r3, [r7, #12]
100072fc:	681a      	ldr	r2, [r3, #0]
100072fe:	68fb      	ldr	r3, [r7, #12]
10007300:	605a      	str	r2, [r3, #4]
10007302:	e026      	b.n	10007352 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
10007304:	68fb      	ldr	r3, [r7, #12]
10007306:	68d8      	ldr	r0, [r3, #12]
10007308:	68fb      	ldr	r3, [r7, #12]
1000730a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
1000730c:	461a      	mov	r2, r3
1000730e:	68b9      	ldr	r1, [r7, #8]
10007310:	f001 fb80 	bl	10008a14 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
10007314:	68fb      	ldr	r3, [r7, #12]
10007316:	68da      	ldr	r2, [r3, #12]
10007318:	68fb      	ldr	r3, [r7, #12]
1000731a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
1000731c:	425b      	negs	r3, r3
1000731e:	441a      	add	r2, r3
10007320:	68fb      	ldr	r3, [r7, #12]
10007322:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
10007324:	68fb      	ldr	r3, [r7, #12]
10007326:	68da      	ldr	r2, [r3, #12]
10007328:	68fb      	ldr	r3, [r7, #12]
1000732a:	681b      	ldr	r3, [r3, #0]
1000732c:	429a      	cmp	r2, r3
1000732e:	d207      	bcs.n	10007340 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
10007330:	68fb      	ldr	r3, [r7, #12]
10007332:	689a      	ldr	r2, [r3, #8]
10007334:	68fb      	ldr	r3, [r7, #12]
10007336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10007338:	425b      	negs	r3, r3
1000733a:	441a      	add	r2, r3
1000733c:	68fb      	ldr	r3, [r7, #12]
1000733e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
10007340:	687b      	ldr	r3, [r7, #4]
10007342:	2b02      	cmp	r3, #2
10007344:	d105      	bne.n	10007352 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
10007346:	693b      	ldr	r3, [r7, #16]
10007348:	2b00      	cmp	r3, #0
1000734a:	d002      	beq.n	10007352 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
1000734c:	693b      	ldr	r3, [r7, #16]
1000734e:	3b01      	subs	r3, #1
10007350:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
10007352:	693b      	ldr	r3, [r7, #16]
10007354:	1c5a      	adds	r2, r3, #1
10007356:	68fb      	ldr	r3, [r7, #12]
10007358:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
1000735a:	697b      	ldr	r3, [r7, #20]
}
1000735c:	4618      	mov	r0, r3
1000735e:	3718      	adds	r7, #24
10007360:	46bd      	mov	sp, r7
10007362:	bd80      	pop	{r7, pc}

10007364 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
10007364:	b580      	push	{r7, lr}
10007366:	b082      	sub	sp, #8
10007368:	af00      	add	r7, sp, #0
1000736a:	6078      	str	r0, [r7, #4]
1000736c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
1000736e:	687b      	ldr	r3, [r7, #4]
10007370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10007372:	2b00      	cmp	r3, #0
10007374:	d018      	beq.n	100073a8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
10007376:	687b      	ldr	r3, [r7, #4]
10007378:	68da      	ldr	r2, [r3, #12]
1000737a:	687b      	ldr	r3, [r7, #4]
1000737c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
1000737e:	441a      	add	r2, r3
10007380:	687b      	ldr	r3, [r7, #4]
10007382:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
10007384:	687b      	ldr	r3, [r7, #4]
10007386:	68da      	ldr	r2, [r3, #12]
10007388:	687b      	ldr	r3, [r7, #4]
1000738a:	689b      	ldr	r3, [r3, #8]
1000738c:	429a      	cmp	r2, r3
1000738e:	d303      	bcc.n	10007398 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
10007390:	687b      	ldr	r3, [r7, #4]
10007392:	681a      	ldr	r2, [r3, #0]
10007394:	687b      	ldr	r3, [r7, #4]
10007396:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
10007398:	687b      	ldr	r3, [r7, #4]
1000739a:	68d9      	ldr	r1, [r3, #12]
1000739c:	687b      	ldr	r3, [r7, #4]
1000739e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
100073a0:	461a      	mov	r2, r3
100073a2:	6838      	ldr	r0, [r7, #0]
100073a4:	f001 fb36 	bl	10008a14 <memcpy>
	}
}
100073a8:	bf00      	nop
100073aa:	3708      	adds	r7, #8
100073ac:	46bd      	mov	sp, r7
100073ae:	bd80      	pop	{r7, pc}

100073b0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
100073b0:	b580      	push	{r7, lr}
100073b2:	b084      	sub	sp, #16
100073b4:	af00      	add	r7, sp, #0
100073b6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
100073b8:	f7ff fae8 	bl	1000698c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
100073bc:	687b      	ldr	r3, [r7, #4]
100073be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
100073c2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
100073c4:	e011      	b.n	100073ea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
100073c6:	687b      	ldr	r3, [r7, #4]
100073c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100073ca:	2b00      	cmp	r3, #0
100073cc:	d012      	beq.n	100073f4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
100073ce:	687b      	ldr	r3, [r7, #4]
100073d0:	3324      	adds	r3, #36	; 0x24
100073d2:	4618      	mov	r0, r3
100073d4:	f000 fd1a 	bl	10007e0c <xTaskRemoveFromEventList>
100073d8:	4603      	mov	r3, r0
100073da:	2b00      	cmp	r3, #0
100073dc:	d001      	beq.n	100073e2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
100073de:	f000 fded 	bl	10007fbc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
100073e2:	7bfb      	ldrb	r3, [r7, #15]
100073e4:	3b01      	subs	r3, #1
100073e6:	b2db      	uxtb	r3, r3
100073e8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
100073ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
100073ee:	2b00      	cmp	r3, #0
100073f0:	dce9      	bgt.n	100073c6 <prvUnlockQueue+0x16>
100073f2:	e000      	b.n	100073f6 <prvUnlockQueue+0x46>
					break;
100073f4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
100073f6:	687b      	ldr	r3, [r7, #4]
100073f8:	22ff      	movs	r2, #255	; 0xff
100073fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
100073fe:	f7ff faf3 	bl	100069e8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
10007402:	f7ff fac3 	bl	1000698c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
10007406:	687b      	ldr	r3, [r7, #4]
10007408:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
1000740c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
1000740e:	e011      	b.n	10007434 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
10007410:	687b      	ldr	r3, [r7, #4]
10007412:	691b      	ldr	r3, [r3, #16]
10007414:	2b00      	cmp	r3, #0
10007416:	d012      	beq.n	1000743e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
10007418:	687b      	ldr	r3, [r7, #4]
1000741a:	3310      	adds	r3, #16
1000741c:	4618      	mov	r0, r3
1000741e:	f000 fcf5 	bl	10007e0c <xTaskRemoveFromEventList>
10007422:	4603      	mov	r3, r0
10007424:	2b00      	cmp	r3, #0
10007426:	d001      	beq.n	1000742c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
10007428:	f000 fdc8 	bl	10007fbc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
1000742c:	7bbb      	ldrb	r3, [r7, #14]
1000742e:	3b01      	subs	r3, #1
10007430:	b2db      	uxtb	r3, r3
10007432:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
10007434:	f997 300e 	ldrsb.w	r3, [r7, #14]
10007438:	2b00      	cmp	r3, #0
1000743a:	dce9      	bgt.n	10007410 <prvUnlockQueue+0x60>
1000743c:	e000      	b.n	10007440 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
1000743e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
10007440:	687b      	ldr	r3, [r7, #4]
10007442:	22ff      	movs	r2, #255	; 0xff
10007444:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
10007448:	f7ff face 	bl	100069e8 <vPortExitCritical>
}
1000744c:	bf00      	nop
1000744e:	3710      	adds	r7, #16
10007450:	46bd      	mov	sp, r7
10007452:	bd80      	pop	{r7, pc}

10007454 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
10007454:	b580      	push	{r7, lr}
10007456:	b084      	sub	sp, #16
10007458:	af00      	add	r7, sp, #0
1000745a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
1000745c:	f7ff fa96 	bl	1000698c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
10007460:	687b      	ldr	r3, [r7, #4]
10007462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
10007464:	2b00      	cmp	r3, #0
10007466:	d102      	bne.n	1000746e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
10007468:	2301      	movs	r3, #1
1000746a:	60fb      	str	r3, [r7, #12]
1000746c:	e001      	b.n	10007472 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
1000746e:	2300      	movs	r3, #0
10007470:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
10007472:	f7ff fab9 	bl	100069e8 <vPortExitCritical>

	return xReturn;
10007476:	68fb      	ldr	r3, [r7, #12]
}
10007478:	4618      	mov	r0, r3
1000747a:	3710      	adds	r7, #16
1000747c:	46bd      	mov	sp, r7
1000747e:	bd80      	pop	{r7, pc}

10007480 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
10007480:	b580      	push	{r7, lr}
10007482:	b084      	sub	sp, #16
10007484:	af00      	add	r7, sp, #0
10007486:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
10007488:	f7ff fa80 	bl	1000698c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
1000748c:	687b      	ldr	r3, [r7, #4]
1000748e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
10007490:	687b      	ldr	r3, [r7, #4]
10007492:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10007494:	429a      	cmp	r2, r3
10007496:	d102      	bne.n	1000749e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
10007498:	2301      	movs	r3, #1
1000749a:	60fb      	str	r3, [r7, #12]
1000749c:	e001      	b.n	100074a2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
1000749e:	2300      	movs	r3, #0
100074a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
100074a2:	f7ff faa1 	bl	100069e8 <vPortExitCritical>

	return xReturn;
100074a6:	68fb      	ldr	r3, [r7, #12]
}
100074a8:	4618      	mov	r0, r3
100074aa:	3710      	adds	r7, #16
100074ac:	46bd      	mov	sp, r7
100074ae:	bd80      	pop	{r7, pc}

100074b0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
100074b0:	b480      	push	{r7}
100074b2:	b085      	sub	sp, #20
100074b4:	af00      	add	r7, sp, #0
100074b6:	6078      	str	r0, [r7, #4]
100074b8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
100074ba:	2300      	movs	r3, #0
100074bc:	60fb      	str	r3, [r7, #12]
100074be:	e014      	b.n	100074ea <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
100074c0:	4a0e      	ldr	r2, [pc, #56]	; (100074fc <vQueueAddToRegistry+0x4c>)
100074c2:	68fb      	ldr	r3, [r7, #12]
100074c4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
100074c8:	2b00      	cmp	r3, #0
100074ca:	d10b      	bne.n	100074e4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
100074cc:	490b      	ldr	r1, [pc, #44]	; (100074fc <vQueueAddToRegistry+0x4c>)
100074ce:	68fb      	ldr	r3, [r7, #12]
100074d0:	683a      	ldr	r2, [r7, #0]
100074d2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
100074d6:	4a09      	ldr	r2, [pc, #36]	; (100074fc <vQueueAddToRegistry+0x4c>)
100074d8:	68fb      	ldr	r3, [r7, #12]
100074da:	00db      	lsls	r3, r3, #3
100074dc:	4413      	add	r3, r2
100074de:	687a      	ldr	r2, [r7, #4]
100074e0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
100074e2:	e005      	b.n	100074f0 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
100074e4:	68fb      	ldr	r3, [r7, #12]
100074e6:	3301      	adds	r3, #1
100074e8:	60fb      	str	r3, [r7, #12]
100074ea:	68fb      	ldr	r3, [r7, #12]
100074ec:	2b07      	cmp	r3, #7
100074ee:	d9e7      	bls.n	100074c0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
100074f0:	bf00      	nop
100074f2:	3714      	adds	r7, #20
100074f4:	46bd      	mov	sp, r7
100074f6:	f85d 7b04 	ldr.w	r7, [sp], #4
100074fa:	4770      	bx	lr
100074fc:	10021a44 	.word	0x10021a44

10007500 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
10007500:	b580      	push	{r7, lr}
10007502:	b086      	sub	sp, #24
10007504:	af00      	add	r7, sp, #0
10007506:	60f8      	str	r0, [r7, #12]
10007508:	60b9      	str	r1, [r7, #8]
1000750a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
1000750c:	68fb      	ldr	r3, [r7, #12]
1000750e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
10007510:	f7ff fa3c 	bl	1000698c <vPortEnterCritical>
10007514:	697b      	ldr	r3, [r7, #20]
10007516:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
1000751a:	b25b      	sxtb	r3, r3
1000751c:	f1b3 3fff 	cmp.w	r3, #4294967295
10007520:	d103      	bne.n	1000752a <vQueueWaitForMessageRestricted+0x2a>
10007522:	697b      	ldr	r3, [r7, #20]
10007524:	2200      	movs	r2, #0
10007526:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
1000752a:	697b      	ldr	r3, [r7, #20]
1000752c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
10007530:	b25b      	sxtb	r3, r3
10007532:	f1b3 3fff 	cmp.w	r3, #4294967295
10007536:	d103      	bne.n	10007540 <vQueueWaitForMessageRestricted+0x40>
10007538:	697b      	ldr	r3, [r7, #20]
1000753a:	2200      	movs	r2, #0
1000753c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
10007540:	f7ff fa52 	bl	100069e8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
10007544:	697b      	ldr	r3, [r7, #20]
10007546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
10007548:	2b00      	cmp	r3, #0
1000754a:	d106      	bne.n	1000755a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
1000754c:	697b      	ldr	r3, [r7, #20]
1000754e:	3324      	adds	r3, #36	; 0x24
10007550:	687a      	ldr	r2, [r7, #4]
10007552:	68b9      	ldr	r1, [r7, #8]
10007554:	4618      	mov	r0, r3
10007556:	f000 fc2f 	bl	10007db8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
1000755a:	6978      	ldr	r0, [r7, #20]
1000755c:	f7ff ff28 	bl	100073b0 <prvUnlockQueue>
	}
10007560:	bf00      	nop
10007562:	3718      	adds	r7, #24
10007564:	46bd      	mov	sp, r7
10007566:	bd80      	pop	{r7, pc}

10007568 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
10007568:	b580      	push	{r7, lr}
1000756a:	b08e      	sub	sp, #56	; 0x38
1000756c:	af04      	add	r7, sp, #16
1000756e:	60f8      	str	r0, [r7, #12]
10007570:	60b9      	str	r1, [r7, #8]
10007572:	607a      	str	r2, [r7, #4]
10007574:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
10007576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10007578:	2b00      	cmp	r3, #0
1000757a:	d109      	bne.n	10007590 <xTaskCreateStatic+0x28>
1000757c:	f04f 0350 	mov.w	r3, #80	; 0x50
10007580:	f383 8811 	msr	BASEPRI, r3
10007584:	f3bf 8f6f 	isb	sy
10007588:	f3bf 8f4f 	dsb	sy
1000758c:	623b      	str	r3, [r7, #32]
1000758e:	e7fe      	b.n	1000758e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
10007590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
10007592:	2b00      	cmp	r3, #0
10007594:	d109      	bne.n	100075aa <xTaskCreateStatic+0x42>
10007596:	f04f 0350 	mov.w	r3, #80	; 0x50
1000759a:	f383 8811 	msr	BASEPRI, r3
1000759e:	f3bf 8f6f 	isb	sy
100075a2:	f3bf 8f4f 	dsb	sy
100075a6:	61fb      	str	r3, [r7, #28]
100075a8:	e7fe      	b.n	100075a8 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
100075aa:	235c      	movs	r3, #92	; 0x5c
100075ac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
100075ae:	693b      	ldr	r3, [r7, #16]
100075b0:	2b5c      	cmp	r3, #92	; 0x5c
100075b2:	d009      	beq.n	100075c8 <xTaskCreateStatic+0x60>
100075b4:	f04f 0350 	mov.w	r3, #80	; 0x50
100075b8:	f383 8811 	msr	BASEPRI, r3
100075bc:	f3bf 8f6f 	isb	sy
100075c0:	f3bf 8f4f 	dsb	sy
100075c4:	61bb      	str	r3, [r7, #24]
100075c6:	e7fe      	b.n	100075c6 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
100075c8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
100075ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
100075cc:	2b00      	cmp	r3, #0
100075ce:	d01e      	beq.n	1000760e <xTaskCreateStatic+0xa6>
100075d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
100075d2:	2b00      	cmp	r3, #0
100075d4:	d01b      	beq.n	1000760e <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
100075d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
100075d8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
100075da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100075dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
100075de:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
100075e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100075e2:	2202      	movs	r2, #2
100075e4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
100075e8:	2300      	movs	r3, #0
100075ea:	9303      	str	r3, [sp, #12]
100075ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100075ee:	9302      	str	r3, [sp, #8]
100075f0:	f107 0314 	add.w	r3, r7, #20
100075f4:	9301      	str	r3, [sp, #4]
100075f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100075f8:	9300      	str	r3, [sp, #0]
100075fa:	683b      	ldr	r3, [r7, #0]
100075fc:	687a      	ldr	r2, [r7, #4]
100075fe:	68b9      	ldr	r1, [r7, #8]
10007600:	68f8      	ldr	r0, [r7, #12]
10007602:	f000 f850 	bl	100076a6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
10007606:	6a78      	ldr	r0, [r7, #36]	; 0x24
10007608:	f000 f8dc 	bl	100077c4 <prvAddNewTaskToReadyList>
1000760c:	e001      	b.n	10007612 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
1000760e:	2300      	movs	r3, #0
10007610:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
10007612:	697b      	ldr	r3, [r7, #20]
	}
10007614:	4618      	mov	r0, r3
10007616:	3728      	adds	r7, #40	; 0x28
10007618:	46bd      	mov	sp, r7
1000761a:	bd80      	pop	{r7, pc}

1000761c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
1000761c:	b580      	push	{r7, lr}
1000761e:	b08c      	sub	sp, #48	; 0x30
10007620:	af04      	add	r7, sp, #16
10007622:	60f8      	str	r0, [r7, #12]
10007624:	60b9      	str	r1, [r7, #8]
10007626:	603b      	str	r3, [r7, #0]
10007628:	4613      	mov	r3, r2
1000762a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
1000762c:	88fb      	ldrh	r3, [r7, #6]
1000762e:	009b      	lsls	r3, r3, #2
10007630:	4618      	mov	r0, r3
10007632:	f7fe fdfd 	bl	10006230 <pvPortMalloc>
10007636:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
10007638:	697b      	ldr	r3, [r7, #20]
1000763a:	2b00      	cmp	r3, #0
1000763c:	d00e      	beq.n	1000765c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
1000763e:	205c      	movs	r0, #92	; 0x5c
10007640:	f7fe fdf6 	bl	10006230 <pvPortMalloc>
10007644:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
10007646:	69fb      	ldr	r3, [r7, #28]
10007648:	2b00      	cmp	r3, #0
1000764a:	d003      	beq.n	10007654 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
1000764c:	69fb      	ldr	r3, [r7, #28]
1000764e:	697a      	ldr	r2, [r7, #20]
10007650:	631a      	str	r2, [r3, #48]	; 0x30
10007652:	e005      	b.n	10007660 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
10007654:	6978      	ldr	r0, [r7, #20]
10007656:	f7fe fead 	bl	100063b4 <vPortFree>
1000765a:	e001      	b.n	10007660 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
1000765c:	2300      	movs	r3, #0
1000765e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
10007660:	69fb      	ldr	r3, [r7, #28]
10007662:	2b00      	cmp	r3, #0
10007664:	d017      	beq.n	10007696 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
10007666:	69fb      	ldr	r3, [r7, #28]
10007668:	2200      	movs	r2, #0
1000766a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
1000766e:	88fa      	ldrh	r2, [r7, #6]
10007670:	2300      	movs	r3, #0
10007672:	9303      	str	r3, [sp, #12]
10007674:	69fb      	ldr	r3, [r7, #28]
10007676:	9302      	str	r3, [sp, #8]
10007678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1000767a:	9301      	str	r3, [sp, #4]
1000767c:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000767e:	9300      	str	r3, [sp, #0]
10007680:	683b      	ldr	r3, [r7, #0]
10007682:	68b9      	ldr	r1, [r7, #8]
10007684:	68f8      	ldr	r0, [r7, #12]
10007686:	f000 f80e 	bl	100076a6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1000768a:	69f8      	ldr	r0, [r7, #28]
1000768c:	f000 f89a 	bl	100077c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
10007690:	2301      	movs	r3, #1
10007692:	61bb      	str	r3, [r7, #24]
10007694:	e002      	b.n	1000769c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
10007696:	f04f 33ff 	mov.w	r3, #4294967295
1000769a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
1000769c:	69bb      	ldr	r3, [r7, #24]
	}
1000769e:	4618      	mov	r0, r3
100076a0:	3720      	adds	r7, #32
100076a2:	46bd      	mov	sp, r7
100076a4:	bd80      	pop	{r7, pc}

100076a6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
100076a6:	b580      	push	{r7, lr}
100076a8:	b088      	sub	sp, #32
100076aa:	af00      	add	r7, sp, #0
100076ac:	60f8      	str	r0, [r7, #12]
100076ae:	60b9      	str	r1, [r7, #8]
100076b0:	607a      	str	r2, [r7, #4]
100076b2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
100076b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100076b6:	6b18      	ldr	r0, [r3, #48]	; 0x30
100076b8:	687b      	ldr	r3, [r7, #4]
100076ba:	009b      	lsls	r3, r3, #2
100076bc:	461a      	mov	r2, r3
100076be:	21a5      	movs	r1, #165	; 0xa5
100076c0:	f001 f9b3 	bl	10008a2a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
100076c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100076c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
100076c8:	687b      	ldr	r3, [r7, #4]
100076ca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
100076ce:	3b01      	subs	r3, #1
100076d0:	009b      	lsls	r3, r3, #2
100076d2:	4413      	add	r3, r2
100076d4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
100076d6:	69bb      	ldr	r3, [r7, #24]
100076d8:	f023 0307 	bic.w	r3, r3, #7
100076dc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
100076de:	69bb      	ldr	r3, [r7, #24]
100076e0:	f003 0307 	and.w	r3, r3, #7
100076e4:	2b00      	cmp	r3, #0
100076e6:	d009      	beq.n	100076fc <prvInitialiseNewTask+0x56>
100076e8:	f04f 0350 	mov.w	r3, #80	; 0x50
100076ec:	f383 8811 	msr	BASEPRI, r3
100076f0:	f3bf 8f6f 	isb	sy
100076f4:	f3bf 8f4f 	dsb	sy
100076f8:	617b      	str	r3, [r7, #20]
100076fa:	e7fe      	b.n	100076fa <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
100076fc:	68bb      	ldr	r3, [r7, #8]
100076fe:	2b00      	cmp	r3, #0
10007700:	d01f      	beq.n	10007742 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
10007702:	2300      	movs	r3, #0
10007704:	61fb      	str	r3, [r7, #28]
10007706:	e012      	b.n	1000772e <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
10007708:	68ba      	ldr	r2, [r7, #8]
1000770a:	69fb      	ldr	r3, [r7, #28]
1000770c:	4413      	add	r3, r2
1000770e:	7819      	ldrb	r1, [r3, #0]
10007710:	6b3a      	ldr	r2, [r7, #48]	; 0x30
10007712:	69fb      	ldr	r3, [r7, #28]
10007714:	4413      	add	r3, r2
10007716:	3334      	adds	r3, #52	; 0x34
10007718:	460a      	mov	r2, r1
1000771a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
1000771c:	68ba      	ldr	r2, [r7, #8]
1000771e:	69fb      	ldr	r3, [r7, #28]
10007720:	4413      	add	r3, r2
10007722:	781b      	ldrb	r3, [r3, #0]
10007724:	2b00      	cmp	r3, #0
10007726:	d006      	beq.n	10007736 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
10007728:	69fb      	ldr	r3, [r7, #28]
1000772a:	3301      	adds	r3, #1
1000772c:	61fb      	str	r3, [r7, #28]
1000772e:	69fb      	ldr	r3, [r7, #28]
10007730:	2b0f      	cmp	r3, #15
10007732:	d9e9      	bls.n	10007708 <prvInitialiseNewTask+0x62>
10007734:	e000      	b.n	10007738 <prvInitialiseNewTask+0x92>
			{
				break;
10007736:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
10007738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000773a:	2200      	movs	r2, #0
1000773c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
10007740:	e003      	b.n	1000774a <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
10007742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10007744:	2200      	movs	r2, #0
10007746:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1000774a:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000774c:	2b37      	cmp	r3, #55	; 0x37
1000774e:	d901      	bls.n	10007754 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
10007750:	2337      	movs	r3, #55	; 0x37
10007752:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
10007754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10007756:	6aba      	ldr	r2, [r7, #40]	; 0x28
10007758:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
1000775a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000775c:	6aba      	ldr	r2, [r7, #40]	; 0x28
1000775e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
10007760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10007762:	2200      	movs	r2, #0
10007764:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
10007766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10007768:	3304      	adds	r3, #4
1000776a:	4618      	mov	r0, r3
1000776c:	f7fe ff56 	bl	1000661c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
10007770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10007772:	3318      	adds	r3, #24
10007774:	4618      	mov	r0, r3
10007776:	f7fe ff51 	bl	1000661c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
1000777a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000777c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
1000777e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
10007780:	6abb      	ldr	r3, [r7, #40]	; 0x28
10007782:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
10007786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10007788:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
1000778a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000778c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
1000778e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
10007790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10007792:	2200      	movs	r2, #0
10007794:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
10007796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10007798:	2200      	movs	r2, #0
1000779a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1000779e:	683a      	ldr	r2, [r7, #0]
100077a0:	68f9      	ldr	r1, [r7, #12]
100077a2:	69b8      	ldr	r0, [r7, #24]
100077a4:	f7fe ffce 	bl	10006744 <pxPortInitialiseStack>
100077a8:	4602      	mov	r2, r0
100077aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100077ac:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
100077ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
100077b0:	2b00      	cmp	r3, #0
100077b2:	d002      	beq.n	100077ba <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
100077b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
100077b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
100077b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
100077ba:	bf00      	nop
100077bc:	3720      	adds	r7, #32
100077be:	46bd      	mov	sp, r7
100077c0:	bd80      	pop	{r7, pc}
	...

100077c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
100077c4:	b580      	push	{r7, lr}
100077c6:	b082      	sub	sp, #8
100077c8:	af00      	add	r7, sp, #0
100077ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
100077cc:	f7ff f8de 	bl	1000698c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
100077d0:	4b2d      	ldr	r3, [pc, #180]	; (10007888 <prvAddNewTaskToReadyList+0xc4>)
100077d2:	681b      	ldr	r3, [r3, #0]
100077d4:	3301      	adds	r3, #1
100077d6:	4a2c      	ldr	r2, [pc, #176]	; (10007888 <prvAddNewTaskToReadyList+0xc4>)
100077d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
100077da:	4b2c      	ldr	r3, [pc, #176]	; (1000788c <prvAddNewTaskToReadyList+0xc8>)
100077dc:	681b      	ldr	r3, [r3, #0]
100077de:	2b00      	cmp	r3, #0
100077e0:	d109      	bne.n	100077f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
100077e2:	4a2a      	ldr	r2, [pc, #168]	; (1000788c <prvAddNewTaskToReadyList+0xc8>)
100077e4:	687b      	ldr	r3, [r7, #4]
100077e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
100077e8:	4b27      	ldr	r3, [pc, #156]	; (10007888 <prvAddNewTaskToReadyList+0xc4>)
100077ea:	681b      	ldr	r3, [r3, #0]
100077ec:	2b01      	cmp	r3, #1
100077ee:	d110      	bne.n	10007812 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
100077f0:	f000 fc08 	bl	10008004 <prvInitialiseTaskLists>
100077f4:	e00d      	b.n	10007812 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
100077f6:	4b26      	ldr	r3, [pc, #152]	; (10007890 <prvAddNewTaskToReadyList+0xcc>)
100077f8:	681b      	ldr	r3, [r3, #0]
100077fa:	2b00      	cmp	r3, #0
100077fc:	d109      	bne.n	10007812 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
100077fe:	4b23      	ldr	r3, [pc, #140]	; (1000788c <prvAddNewTaskToReadyList+0xc8>)
10007800:	681b      	ldr	r3, [r3, #0]
10007802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
10007804:	687b      	ldr	r3, [r7, #4]
10007806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10007808:	429a      	cmp	r2, r3
1000780a:	d802      	bhi.n	10007812 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
1000780c:	4a1f      	ldr	r2, [pc, #124]	; (1000788c <prvAddNewTaskToReadyList+0xc8>)
1000780e:	687b      	ldr	r3, [r7, #4]
10007810:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
10007812:	4b20      	ldr	r3, [pc, #128]	; (10007894 <prvAddNewTaskToReadyList+0xd0>)
10007814:	681b      	ldr	r3, [r3, #0]
10007816:	3301      	adds	r3, #1
10007818:	4a1e      	ldr	r2, [pc, #120]	; (10007894 <prvAddNewTaskToReadyList+0xd0>)
1000781a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
1000781c:	4b1d      	ldr	r3, [pc, #116]	; (10007894 <prvAddNewTaskToReadyList+0xd0>)
1000781e:	681a      	ldr	r2, [r3, #0]
10007820:	687b      	ldr	r3, [r7, #4]
10007822:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
10007824:	687b      	ldr	r3, [r7, #4]
10007826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
10007828:	4b1b      	ldr	r3, [pc, #108]	; (10007898 <prvAddNewTaskToReadyList+0xd4>)
1000782a:	681b      	ldr	r3, [r3, #0]
1000782c:	429a      	cmp	r2, r3
1000782e:	d903      	bls.n	10007838 <prvAddNewTaskToReadyList+0x74>
10007830:	687b      	ldr	r3, [r7, #4]
10007832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10007834:	4a18      	ldr	r2, [pc, #96]	; (10007898 <prvAddNewTaskToReadyList+0xd4>)
10007836:	6013      	str	r3, [r2, #0]
10007838:	687b      	ldr	r3, [r7, #4]
1000783a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1000783c:	4613      	mov	r3, r2
1000783e:	009b      	lsls	r3, r3, #2
10007840:	4413      	add	r3, r2
10007842:	009b      	lsls	r3, r3, #2
10007844:	4a15      	ldr	r2, [pc, #84]	; (1000789c <prvAddNewTaskToReadyList+0xd8>)
10007846:	441a      	add	r2, r3
10007848:	687b      	ldr	r3, [r7, #4]
1000784a:	3304      	adds	r3, #4
1000784c:	4619      	mov	r1, r3
1000784e:	4610      	mov	r0, r2
10007850:	f7fe fef1 	bl	10006636 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
10007854:	f7ff f8c8 	bl	100069e8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
10007858:	4b0d      	ldr	r3, [pc, #52]	; (10007890 <prvAddNewTaskToReadyList+0xcc>)
1000785a:	681b      	ldr	r3, [r3, #0]
1000785c:	2b00      	cmp	r3, #0
1000785e:	d00e      	beq.n	1000787e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
10007860:	4b0a      	ldr	r3, [pc, #40]	; (1000788c <prvAddNewTaskToReadyList+0xc8>)
10007862:	681b      	ldr	r3, [r3, #0]
10007864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
10007866:	687b      	ldr	r3, [r7, #4]
10007868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1000786a:	429a      	cmp	r2, r3
1000786c:	d207      	bcs.n	1000787e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
1000786e:	4b0c      	ldr	r3, [pc, #48]	; (100078a0 <prvAddNewTaskToReadyList+0xdc>)
10007870:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
10007874:	601a      	str	r2, [r3, #0]
10007876:	f3bf 8f4f 	dsb	sy
1000787a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
1000787e:	bf00      	nop
10007880:	3708      	adds	r7, #8
10007882:	46bd      	mov	sp, r7
10007884:	bd80      	pop	{r7, pc}
10007886:	bf00      	nop
10007888:	10021844 	.word	0x10021844
1000788c:	10021370 	.word	0x10021370
10007890:	10021850 	.word	0x10021850
10007894:	10021860 	.word	0x10021860
10007898:	1002184c 	.word	0x1002184c
1000789c:	10021374 	.word	0x10021374
100078a0:	e000ed04 	.word	0xe000ed04

100078a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
100078a4:	b580      	push	{r7, lr}
100078a6:	b084      	sub	sp, #16
100078a8:	af00      	add	r7, sp, #0
100078aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
100078ac:	2300      	movs	r3, #0
100078ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
100078b0:	687b      	ldr	r3, [r7, #4]
100078b2:	2b00      	cmp	r3, #0
100078b4:	d016      	beq.n	100078e4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
100078b6:	4b13      	ldr	r3, [pc, #76]	; (10007904 <vTaskDelay+0x60>)
100078b8:	681b      	ldr	r3, [r3, #0]
100078ba:	2b00      	cmp	r3, #0
100078bc:	d009      	beq.n	100078d2 <vTaskDelay+0x2e>
100078be:	f04f 0350 	mov.w	r3, #80	; 0x50
100078c2:	f383 8811 	msr	BASEPRI, r3
100078c6:	f3bf 8f6f 	isb	sy
100078ca:	f3bf 8f4f 	dsb	sy
100078ce:	60bb      	str	r3, [r7, #8]
100078d0:	e7fe      	b.n	100078d0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
100078d2:	f000 f87f 	bl	100079d4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
100078d6:	2100      	movs	r1, #0
100078d8:	6878      	ldr	r0, [r7, #4]
100078da:	f000 fcd7 	bl	1000828c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
100078de:	f000 f887 	bl	100079f0 <xTaskResumeAll>
100078e2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
100078e4:	68fb      	ldr	r3, [r7, #12]
100078e6:	2b00      	cmp	r3, #0
100078e8:	d107      	bne.n	100078fa <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
100078ea:	4b07      	ldr	r3, [pc, #28]	; (10007908 <vTaskDelay+0x64>)
100078ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
100078f0:	601a      	str	r2, [r3, #0]
100078f2:	f3bf 8f4f 	dsb	sy
100078f6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
100078fa:	bf00      	nop
100078fc:	3710      	adds	r7, #16
100078fe:	46bd      	mov	sp, r7
10007900:	bd80      	pop	{r7, pc}
10007902:	bf00      	nop
10007904:	1002186c 	.word	0x1002186c
10007908:	e000ed04 	.word	0xe000ed04

1000790c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
1000790c:	b580      	push	{r7, lr}
1000790e:	b08a      	sub	sp, #40	; 0x28
10007910:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
10007912:	2300      	movs	r3, #0
10007914:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
10007916:	2300      	movs	r3, #0
10007918:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
1000791a:	463a      	mov	r2, r7
1000791c:	1d39      	adds	r1, r7, #4
1000791e:	f107 0308 	add.w	r3, r7, #8
10007922:	4618      	mov	r0, r3
10007924:	f7fe fc50 	bl	100061c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
10007928:	6839      	ldr	r1, [r7, #0]
1000792a:	687b      	ldr	r3, [r7, #4]
1000792c:	68ba      	ldr	r2, [r7, #8]
1000792e:	9202      	str	r2, [sp, #8]
10007930:	9301      	str	r3, [sp, #4]
10007932:	2300      	movs	r3, #0
10007934:	9300      	str	r3, [sp, #0]
10007936:	2300      	movs	r3, #0
10007938:	460a      	mov	r2, r1
1000793a:	4920      	ldr	r1, [pc, #128]	; (100079bc <vTaskStartScheduler+0xb0>)
1000793c:	4820      	ldr	r0, [pc, #128]	; (100079c0 <vTaskStartScheduler+0xb4>)
1000793e:	f7ff fe13 	bl	10007568 <xTaskCreateStatic>
10007942:	4602      	mov	r2, r0
10007944:	4b1f      	ldr	r3, [pc, #124]	; (100079c4 <vTaskStartScheduler+0xb8>)
10007946:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
10007948:	4b1e      	ldr	r3, [pc, #120]	; (100079c4 <vTaskStartScheduler+0xb8>)
1000794a:	681b      	ldr	r3, [r3, #0]
1000794c:	2b00      	cmp	r3, #0
1000794e:	d002      	beq.n	10007956 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
10007950:	2301      	movs	r3, #1
10007952:	617b      	str	r3, [r7, #20]
10007954:	e001      	b.n	1000795a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
10007956:	2300      	movs	r3, #0
10007958:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
1000795a:	697b      	ldr	r3, [r7, #20]
1000795c:	2b01      	cmp	r3, #1
1000795e:	d102      	bne.n	10007966 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
10007960:	f000 fce8 	bl	10008334 <xTimerCreateTimerTask>
10007964:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
10007966:	697b      	ldr	r3, [r7, #20]
10007968:	2b01      	cmp	r3, #1
1000796a:	d115      	bne.n	10007998 <vTaskStartScheduler+0x8c>
1000796c:	f04f 0350 	mov.w	r3, #80	; 0x50
10007970:	f383 8811 	msr	BASEPRI, r3
10007974:	f3bf 8f6f 	isb	sy
10007978:	f3bf 8f4f 	dsb	sy
1000797c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
1000797e:	4b12      	ldr	r3, [pc, #72]	; (100079c8 <vTaskStartScheduler+0xbc>)
10007980:	f04f 32ff 	mov.w	r2, #4294967295
10007984:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
10007986:	4b11      	ldr	r3, [pc, #68]	; (100079cc <vTaskStartScheduler+0xc0>)
10007988:	2201      	movs	r2, #1
1000798a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
1000798c:	4b10      	ldr	r3, [pc, #64]	; (100079d0 <vTaskStartScheduler+0xc4>)
1000798e:	2200      	movs	r2, #0
10007990:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
10007992:	f7fe ff5d 	bl	10006850 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
10007996:	e00d      	b.n	100079b4 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
10007998:	697b      	ldr	r3, [r7, #20]
1000799a:	f1b3 3fff 	cmp.w	r3, #4294967295
1000799e:	d109      	bne.n	100079b4 <vTaskStartScheduler+0xa8>
100079a0:	f04f 0350 	mov.w	r3, #80	; 0x50
100079a4:	f383 8811 	msr	BASEPRI, r3
100079a8:	f3bf 8f6f 	isb	sy
100079ac:	f3bf 8f4f 	dsb	sy
100079b0:	60fb      	str	r3, [r7, #12]
100079b2:	e7fe      	b.n	100079b2 <vTaskStartScheduler+0xa6>
}
100079b4:	bf00      	nop
100079b6:	3718      	adds	r7, #24
100079b8:	46bd      	mov	sp, r7
100079ba:	bd80      	pop	{r7, pc}
100079bc:	100093b4 	.word	0x100093b4
100079c0:	10007fd5 	.word	0x10007fd5
100079c4:	10021868 	.word	0x10021868
100079c8:	10021864 	.word	0x10021864
100079cc:	10021850 	.word	0x10021850
100079d0:	10021848 	.word	0x10021848

100079d4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
100079d4:	b480      	push	{r7}
100079d6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
100079d8:	4b04      	ldr	r3, [pc, #16]	; (100079ec <vTaskSuspendAll+0x18>)
100079da:	681b      	ldr	r3, [r3, #0]
100079dc:	3301      	adds	r3, #1
100079de:	4a03      	ldr	r2, [pc, #12]	; (100079ec <vTaskSuspendAll+0x18>)
100079e0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
100079e2:	bf00      	nop
100079e4:	46bd      	mov	sp, r7
100079e6:	f85d 7b04 	ldr.w	r7, [sp], #4
100079ea:	4770      	bx	lr
100079ec:	1002186c 	.word	0x1002186c

100079f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
100079f0:	b580      	push	{r7, lr}
100079f2:	b084      	sub	sp, #16
100079f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
100079f6:	2300      	movs	r3, #0
100079f8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
100079fa:	2300      	movs	r3, #0
100079fc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
100079fe:	4b41      	ldr	r3, [pc, #260]	; (10007b04 <xTaskResumeAll+0x114>)
10007a00:	681b      	ldr	r3, [r3, #0]
10007a02:	2b00      	cmp	r3, #0
10007a04:	d109      	bne.n	10007a1a <xTaskResumeAll+0x2a>
10007a06:	f04f 0350 	mov.w	r3, #80	; 0x50
10007a0a:	f383 8811 	msr	BASEPRI, r3
10007a0e:	f3bf 8f6f 	isb	sy
10007a12:	f3bf 8f4f 	dsb	sy
10007a16:	603b      	str	r3, [r7, #0]
10007a18:	e7fe      	b.n	10007a18 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
10007a1a:	f7fe ffb7 	bl	1000698c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
10007a1e:	4b39      	ldr	r3, [pc, #228]	; (10007b04 <xTaskResumeAll+0x114>)
10007a20:	681b      	ldr	r3, [r3, #0]
10007a22:	3b01      	subs	r3, #1
10007a24:	4a37      	ldr	r2, [pc, #220]	; (10007b04 <xTaskResumeAll+0x114>)
10007a26:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
10007a28:	4b36      	ldr	r3, [pc, #216]	; (10007b04 <xTaskResumeAll+0x114>)
10007a2a:	681b      	ldr	r3, [r3, #0]
10007a2c:	2b00      	cmp	r3, #0
10007a2e:	d162      	bne.n	10007af6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
10007a30:	4b35      	ldr	r3, [pc, #212]	; (10007b08 <xTaskResumeAll+0x118>)
10007a32:	681b      	ldr	r3, [r3, #0]
10007a34:	2b00      	cmp	r3, #0
10007a36:	d05e      	beq.n	10007af6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
10007a38:	e02f      	b.n	10007a9a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
10007a3a:	4b34      	ldr	r3, [pc, #208]	; (10007b0c <xTaskResumeAll+0x11c>)
10007a3c:	68db      	ldr	r3, [r3, #12]
10007a3e:	68db      	ldr	r3, [r3, #12]
10007a40:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
10007a42:	68fb      	ldr	r3, [r7, #12]
10007a44:	3318      	adds	r3, #24
10007a46:	4618      	mov	r0, r3
10007a48:	f7fe fe52 	bl	100066f0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
10007a4c:	68fb      	ldr	r3, [r7, #12]
10007a4e:	3304      	adds	r3, #4
10007a50:	4618      	mov	r0, r3
10007a52:	f7fe fe4d 	bl	100066f0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
10007a56:	68fb      	ldr	r3, [r7, #12]
10007a58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
10007a5a:	4b2d      	ldr	r3, [pc, #180]	; (10007b10 <xTaskResumeAll+0x120>)
10007a5c:	681b      	ldr	r3, [r3, #0]
10007a5e:	429a      	cmp	r2, r3
10007a60:	d903      	bls.n	10007a6a <xTaskResumeAll+0x7a>
10007a62:	68fb      	ldr	r3, [r7, #12]
10007a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10007a66:	4a2a      	ldr	r2, [pc, #168]	; (10007b10 <xTaskResumeAll+0x120>)
10007a68:	6013      	str	r3, [r2, #0]
10007a6a:	68fb      	ldr	r3, [r7, #12]
10007a6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
10007a6e:	4613      	mov	r3, r2
10007a70:	009b      	lsls	r3, r3, #2
10007a72:	4413      	add	r3, r2
10007a74:	009b      	lsls	r3, r3, #2
10007a76:	4a27      	ldr	r2, [pc, #156]	; (10007b14 <xTaskResumeAll+0x124>)
10007a78:	441a      	add	r2, r3
10007a7a:	68fb      	ldr	r3, [r7, #12]
10007a7c:	3304      	adds	r3, #4
10007a7e:	4619      	mov	r1, r3
10007a80:	4610      	mov	r0, r2
10007a82:	f7fe fdd8 	bl	10006636 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
10007a86:	68fb      	ldr	r3, [r7, #12]
10007a88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
10007a8a:	4b23      	ldr	r3, [pc, #140]	; (10007b18 <xTaskResumeAll+0x128>)
10007a8c:	681b      	ldr	r3, [r3, #0]
10007a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10007a90:	429a      	cmp	r2, r3
10007a92:	d302      	bcc.n	10007a9a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
10007a94:	4b21      	ldr	r3, [pc, #132]	; (10007b1c <xTaskResumeAll+0x12c>)
10007a96:	2201      	movs	r2, #1
10007a98:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
10007a9a:	4b1c      	ldr	r3, [pc, #112]	; (10007b0c <xTaskResumeAll+0x11c>)
10007a9c:	681b      	ldr	r3, [r3, #0]
10007a9e:	2b00      	cmp	r3, #0
10007aa0:	d1cb      	bne.n	10007a3a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
10007aa2:	68fb      	ldr	r3, [r7, #12]
10007aa4:	2b00      	cmp	r3, #0
10007aa6:	d001      	beq.n	10007aac <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
10007aa8:	f000 fb46 	bl	10008138 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
10007aac:	4b1c      	ldr	r3, [pc, #112]	; (10007b20 <xTaskResumeAll+0x130>)
10007aae:	681b      	ldr	r3, [r3, #0]
10007ab0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
10007ab2:	687b      	ldr	r3, [r7, #4]
10007ab4:	2b00      	cmp	r3, #0
10007ab6:	d010      	beq.n	10007ada <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
10007ab8:	f000 f846 	bl	10007b48 <xTaskIncrementTick>
10007abc:	4603      	mov	r3, r0
10007abe:	2b00      	cmp	r3, #0
10007ac0:	d002      	beq.n	10007ac8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
10007ac2:	4b16      	ldr	r3, [pc, #88]	; (10007b1c <xTaskResumeAll+0x12c>)
10007ac4:	2201      	movs	r2, #1
10007ac6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
10007ac8:	687b      	ldr	r3, [r7, #4]
10007aca:	3b01      	subs	r3, #1
10007acc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
10007ace:	687b      	ldr	r3, [r7, #4]
10007ad0:	2b00      	cmp	r3, #0
10007ad2:	d1f1      	bne.n	10007ab8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
10007ad4:	4b12      	ldr	r3, [pc, #72]	; (10007b20 <xTaskResumeAll+0x130>)
10007ad6:	2200      	movs	r2, #0
10007ad8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
10007ada:	4b10      	ldr	r3, [pc, #64]	; (10007b1c <xTaskResumeAll+0x12c>)
10007adc:	681b      	ldr	r3, [r3, #0]
10007ade:	2b00      	cmp	r3, #0
10007ae0:	d009      	beq.n	10007af6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
10007ae2:	2301      	movs	r3, #1
10007ae4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
10007ae6:	4b0f      	ldr	r3, [pc, #60]	; (10007b24 <xTaskResumeAll+0x134>)
10007ae8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
10007aec:	601a      	str	r2, [r3, #0]
10007aee:	f3bf 8f4f 	dsb	sy
10007af2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
10007af6:	f7fe ff77 	bl	100069e8 <vPortExitCritical>

	return xAlreadyYielded;
10007afa:	68bb      	ldr	r3, [r7, #8]
}
10007afc:	4618      	mov	r0, r3
10007afe:	3710      	adds	r7, #16
10007b00:	46bd      	mov	sp, r7
10007b02:	bd80      	pop	{r7, pc}
10007b04:	1002186c 	.word	0x1002186c
10007b08:	10021844 	.word	0x10021844
10007b0c:	10021804 	.word	0x10021804
10007b10:	1002184c 	.word	0x1002184c
10007b14:	10021374 	.word	0x10021374
10007b18:	10021370 	.word	0x10021370
10007b1c:	10021858 	.word	0x10021858
10007b20:	10021854 	.word	0x10021854
10007b24:	e000ed04 	.word	0xe000ed04

10007b28 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
10007b28:	b480      	push	{r7}
10007b2a:	b083      	sub	sp, #12
10007b2c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
10007b2e:	4b05      	ldr	r3, [pc, #20]	; (10007b44 <xTaskGetTickCount+0x1c>)
10007b30:	681b      	ldr	r3, [r3, #0]
10007b32:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
10007b34:	687b      	ldr	r3, [r7, #4]
}
10007b36:	4618      	mov	r0, r3
10007b38:	370c      	adds	r7, #12
10007b3a:	46bd      	mov	sp, r7
10007b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
10007b40:	4770      	bx	lr
10007b42:	bf00      	nop
10007b44:	10021848 	.word	0x10021848

10007b48 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
10007b48:	b580      	push	{r7, lr}
10007b4a:	b086      	sub	sp, #24
10007b4c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
10007b4e:	2300      	movs	r3, #0
10007b50:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
10007b52:	4b4e      	ldr	r3, [pc, #312]	; (10007c8c <xTaskIncrementTick+0x144>)
10007b54:	681b      	ldr	r3, [r3, #0]
10007b56:	2b00      	cmp	r3, #0
10007b58:	f040 8088 	bne.w	10007c6c <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
10007b5c:	4b4c      	ldr	r3, [pc, #304]	; (10007c90 <xTaskIncrementTick+0x148>)
10007b5e:	681b      	ldr	r3, [r3, #0]
10007b60:	3301      	adds	r3, #1
10007b62:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
10007b64:	4a4a      	ldr	r2, [pc, #296]	; (10007c90 <xTaskIncrementTick+0x148>)
10007b66:	693b      	ldr	r3, [r7, #16]
10007b68:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
10007b6a:	693b      	ldr	r3, [r7, #16]
10007b6c:	2b00      	cmp	r3, #0
10007b6e:	d11f      	bne.n	10007bb0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
10007b70:	4b48      	ldr	r3, [pc, #288]	; (10007c94 <xTaskIncrementTick+0x14c>)
10007b72:	681b      	ldr	r3, [r3, #0]
10007b74:	681b      	ldr	r3, [r3, #0]
10007b76:	2b00      	cmp	r3, #0
10007b78:	d009      	beq.n	10007b8e <xTaskIncrementTick+0x46>
10007b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
10007b7e:	f383 8811 	msr	BASEPRI, r3
10007b82:	f3bf 8f6f 	isb	sy
10007b86:	f3bf 8f4f 	dsb	sy
10007b8a:	603b      	str	r3, [r7, #0]
10007b8c:	e7fe      	b.n	10007b8c <xTaskIncrementTick+0x44>
10007b8e:	4b41      	ldr	r3, [pc, #260]	; (10007c94 <xTaskIncrementTick+0x14c>)
10007b90:	681b      	ldr	r3, [r3, #0]
10007b92:	60fb      	str	r3, [r7, #12]
10007b94:	4b40      	ldr	r3, [pc, #256]	; (10007c98 <xTaskIncrementTick+0x150>)
10007b96:	681b      	ldr	r3, [r3, #0]
10007b98:	4a3e      	ldr	r2, [pc, #248]	; (10007c94 <xTaskIncrementTick+0x14c>)
10007b9a:	6013      	str	r3, [r2, #0]
10007b9c:	4a3e      	ldr	r2, [pc, #248]	; (10007c98 <xTaskIncrementTick+0x150>)
10007b9e:	68fb      	ldr	r3, [r7, #12]
10007ba0:	6013      	str	r3, [r2, #0]
10007ba2:	4b3e      	ldr	r3, [pc, #248]	; (10007c9c <xTaskIncrementTick+0x154>)
10007ba4:	681b      	ldr	r3, [r3, #0]
10007ba6:	3301      	adds	r3, #1
10007ba8:	4a3c      	ldr	r2, [pc, #240]	; (10007c9c <xTaskIncrementTick+0x154>)
10007baa:	6013      	str	r3, [r2, #0]
10007bac:	f000 fac4 	bl	10008138 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
10007bb0:	4b3b      	ldr	r3, [pc, #236]	; (10007ca0 <xTaskIncrementTick+0x158>)
10007bb2:	681b      	ldr	r3, [r3, #0]
10007bb4:	693a      	ldr	r2, [r7, #16]
10007bb6:	429a      	cmp	r2, r3
10007bb8:	d349      	bcc.n	10007c4e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
10007bba:	4b36      	ldr	r3, [pc, #216]	; (10007c94 <xTaskIncrementTick+0x14c>)
10007bbc:	681b      	ldr	r3, [r3, #0]
10007bbe:	681b      	ldr	r3, [r3, #0]
10007bc0:	2b00      	cmp	r3, #0
10007bc2:	d104      	bne.n	10007bce <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
10007bc4:	4b36      	ldr	r3, [pc, #216]	; (10007ca0 <xTaskIncrementTick+0x158>)
10007bc6:	f04f 32ff 	mov.w	r2, #4294967295
10007bca:	601a      	str	r2, [r3, #0]
					break;
10007bcc:	e03f      	b.n	10007c4e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
10007bce:	4b31      	ldr	r3, [pc, #196]	; (10007c94 <xTaskIncrementTick+0x14c>)
10007bd0:	681b      	ldr	r3, [r3, #0]
10007bd2:	68db      	ldr	r3, [r3, #12]
10007bd4:	68db      	ldr	r3, [r3, #12]
10007bd6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
10007bd8:	68bb      	ldr	r3, [r7, #8]
10007bda:	685b      	ldr	r3, [r3, #4]
10007bdc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
10007bde:	693a      	ldr	r2, [r7, #16]
10007be0:	687b      	ldr	r3, [r7, #4]
10007be2:	429a      	cmp	r2, r3
10007be4:	d203      	bcs.n	10007bee <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
10007be6:	4a2e      	ldr	r2, [pc, #184]	; (10007ca0 <xTaskIncrementTick+0x158>)
10007be8:	687b      	ldr	r3, [r7, #4]
10007bea:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
10007bec:	e02f      	b.n	10007c4e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
10007bee:	68bb      	ldr	r3, [r7, #8]
10007bf0:	3304      	adds	r3, #4
10007bf2:	4618      	mov	r0, r3
10007bf4:	f7fe fd7c 	bl	100066f0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
10007bf8:	68bb      	ldr	r3, [r7, #8]
10007bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10007bfc:	2b00      	cmp	r3, #0
10007bfe:	d004      	beq.n	10007c0a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
10007c00:	68bb      	ldr	r3, [r7, #8]
10007c02:	3318      	adds	r3, #24
10007c04:	4618      	mov	r0, r3
10007c06:	f7fe fd73 	bl	100066f0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
10007c0a:	68bb      	ldr	r3, [r7, #8]
10007c0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
10007c0e:	4b25      	ldr	r3, [pc, #148]	; (10007ca4 <xTaskIncrementTick+0x15c>)
10007c10:	681b      	ldr	r3, [r3, #0]
10007c12:	429a      	cmp	r2, r3
10007c14:	d903      	bls.n	10007c1e <xTaskIncrementTick+0xd6>
10007c16:	68bb      	ldr	r3, [r7, #8]
10007c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10007c1a:	4a22      	ldr	r2, [pc, #136]	; (10007ca4 <xTaskIncrementTick+0x15c>)
10007c1c:	6013      	str	r3, [r2, #0]
10007c1e:	68bb      	ldr	r3, [r7, #8]
10007c20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
10007c22:	4613      	mov	r3, r2
10007c24:	009b      	lsls	r3, r3, #2
10007c26:	4413      	add	r3, r2
10007c28:	009b      	lsls	r3, r3, #2
10007c2a:	4a1f      	ldr	r2, [pc, #124]	; (10007ca8 <xTaskIncrementTick+0x160>)
10007c2c:	441a      	add	r2, r3
10007c2e:	68bb      	ldr	r3, [r7, #8]
10007c30:	3304      	adds	r3, #4
10007c32:	4619      	mov	r1, r3
10007c34:	4610      	mov	r0, r2
10007c36:	f7fe fcfe 	bl	10006636 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
10007c3a:	68bb      	ldr	r3, [r7, #8]
10007c3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
10007c3e:	4b1b      	ldr	r3, [pc, #108]	; (10007cac <xTaskIncrementTick+0x164>)
10007c40:	681b      	ldr	r3, [r3, #0]
10007c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10007c44:	429a      	cmp	r2, r3
10007c46:	d3b8      	bcc.n	10007bba <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
10007c48:	2301      	movs	r3, #1
10007c4a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
10007c4c:	e7b5      	b.n	10007bba <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
10007c4e:	4b17      	ldr	r3, [pc, #92]	; (10007cac <xTaskIncrementTick+0x164>)
10007c50:	681b      	ldr	r3, [r3, #0]
10007c52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
10007c54:	4914      	ldr	r1, [pc, #80]	; (10007ca8 <xTaskIncrementTick+0x160>)
10007c56:	4613      	mov	r3, r2
10007c58:	009b      	lsls	r3, r3, #2
10007c5a:	4413      	add	r3, r2
10007c5c:	009b      	lsls	r3, r3, #2
10007c5e:	440b      	add	r3, r1
10007c60:	681b      	ldr	r3, [r3, #0]
10007c62:	2b01      	cmp	r3, #1
10007c64:	d907      	bls.n	10007c76 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
10007c66:	2301      	movs	r3, #1
10007c68:	617b      	str	r3, [r7, #20]
10007c6a:	e004      	b.n	10007c76 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
10007c6c:	4b10      	ldr	r3, [pc, #64]	; (10007cb0 <xTaskIncrementTick+0x168>)
10007c6e:	681b      	ldr	r3, [r3, #0]
10007c70:	3301      	adds	r3, #1
10007c72:	4a0f      	ldr	r2, [pc, #60]	; (10007cb0 <xTaskIncrementTick+0x168>)
10007c74:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
10007c76:	4b0f      	ldr	r3, [pc, #60]	; (10007cb4 <xTaskIncrementTick+0x16c>)
10007c78:	681b      	ldr	r3, [r3, #0]
10007c7a:	2b00      	cmp	r3, #0
10007c7c:	d001      	beq.n	10007c82 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
10007c7e:	2301      	movs	r3, #1
10007c80:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
10007c82:	697b      	ldr	r3, [r7, #20]
}
10007c84:	4618      	mov	r0, r3
10007c86:	3718      	adds	r7, #24
10007c88:	46bd      	mov	sp, r7
10007c8a:	bd80      	pop	{r7, pc}
10007c8c:	1002186c 	.word	0x1002186c
10007c90:	10021848 	.word	0x10021848
10007c94:	100217fc 	.word	0x100217fc
10007c98:	10021800 	.word	0x10021800
10007c9c:	1002185c 	.word	0x1002185c
10007ca0:	10021864 	.word	0x10021864
10007ca4:	1002184c 	.word	0x1002184c
10007ca8:	10021374 	.word	0x10021374
10007cac:	10021370 	.word	0x10021370
10007cb0:	10021854 	.word	0x10021854
10007cb4:	10021858 	.word	0x10021858

10007cb8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
10007cb8:	b480      	push	{r7}
10007cba:	b085      	sub	sp, #20
10007cbc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
10007cbe:	4b27      	ldr	r3, [pc, #156]	; (10007d5c <vTaskSwitchContext+0xa4>)
10007cc0:	681b      	ldr	r3, [r3, #0]
10007cc2:	2b00      	cmp	r3, #0
10007cc4:	d003      	beq.n	10007cce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
10007cc6:	4b26      	ldr	r3, [pc, #152]	; (10007d60 <vTaskSwitchContext+0xa8>)
10007cc8:	2201      	movs	r2, #1
10007cca:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
10007ccc:	e040      	b.n	10007d50 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
10007cce:	4b24      	ldr	r3, [pc, #144]	; (10007d60 <vTaskSwitchContext+0xa8>)
10007cd0:	2200      	movs	r2, #0
10007cd2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
10007cd4:	4b23      	ldr	r3, [pc, #140]	; (10007d64 <vTaskSwitchContext+0xac>)
10007cd6:	681b      	ldr	r3, [r3, #0]
10007cd8:	60fb      	str	r3, [r7, #12]
10007cda:	e00f      	b.n	10007cfc <vTaskSwitchContext+0x44>
10007cdc:	68fb      	ldr	r3, [r7, #12]
10007cde:	2b00      	cmp	r3, #0
10007ce0:	d109      	bne.n	10007cf6 <vTaskSwitchContext+0x3e>
10007ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
10007ce6:	f383 8811 	msr	BASEPRI, r3
10007cea:	f3bf 8f6f 	isb	sy
10007cee:	f3bf 8f4f 	dsb	sy
10007cf2:	607b      	str	r3, [r7, #4]
10007cf4:	e7fe      	b.n	10007cf4 <vTaskSwitchContext+0x3c>
10007cf6:	68fb      	ldr	r3, [r7, #12]
10007cf8:	3b01      	subs	r3, #1
10007cfa:	60fb      	str	r3, [r7, #12]
10007cfc:	491a      	ldr	r1, [pc, #104]	; (10007d68 <vTaskSwitchContext+0xb0>)
10007cfe:	68fa      	ldr	r2, [r7, #12]
10007d00:	4613      	mov	r3, r2
10007d02:	009b      	lsls	r3, r3, #2
10007d04:	4413      	add	r3, r2
10007d06:	009b      	lsls	r3, r3, #2
10007d08:	440b      	add	r3, r1
10007d0a:	681b      	ldr	r3, [r3, #0]
10007d0c:	2b00      	cmp	r3, #0
10007d0e:	d0e5      	beq.n	10007cdc <vTaskSwitchContext+0x24>
10007d10:	68fa      	ldr	r2, [r7, #12]
10007d12:	4613      	mov	r3, r2
10007d14:	009b      	lsls	r3, r3, #2
10007d16:	4413      	add	r3, r2
10007d18:	009b      	lsls	r3, r3, #2
10007d1a:	4a13      	ldr	r2, [pc, #76]	; (10007d68 <vTaskSwitchContext+0xb0>)
10007d1c:	4413      	add	r3, r2
10007d1e:	60bb      	str	r3, [r7, #8]
10007d20:	68bb      	ldr	r3, [r7, #8]
10007d22:	685b      	ldr	r3, [r3, #4]
10007d24:	685a      	ldr	r2, [r3, #4]
10007d26:	68bb      	ldr	r3, [r7, #8]
10007d28:	605a      	str	r2, [r3, #4]
10007d2a:	68bb      	ldr	r3, [r7, #8]
10007d2c:	685a      	ldr	r2, [r3, #4]
10007d2e:	68bb      	ldr	r3, [r7, #8]
10007d30:	3308      	adds	r3, #8
10007d32:	429a      	cmp	r2, r3
10007d34:	d104      	bne.n	10007d40 <vTaskSwitchContext+0x88>
10007d36:	68bb      	ldr	r3, [r7, #8]
10007d38:	685b      	ldr	r3, [r3, #4]
10007d3a:	685a      	ldr	r2, [r3, #4]
10007d3c:	68bb      	ldr	r3, [r7, #8]
10007d3e:	605a      	str	r2, [r3, #4]
10007d40:	68bb      	ldr	r3, [r7, #8]
10007d42:	685b      	ldr	r3, [r3, #4]
10007d44:	68db      	ldr	r3, [r3, #12]
10007d46:	4a09      	ldr	r2, [pc, #36]	; (10007d6c <vTaskSwitchContext+0xb4>)
10007d48:	6013      	str	r3, [r2, #0]
10007d4a:	4a06      	ldr	r2, [pc, #24]	; (10007d64 <vTaskSwitchContext+0xac>)
10007d4c:	68fb      	ldr	r3, [r7, #12]
10007d4e:	6013      	str	r3, [r2, #0]
}
10007d50:	bf00      	nop
10007d52:	3714      	adds	r7, #20
10007d54:	46bd      	mov	sp, r7
10007d56:	f85d 7b04 	ldr.w	r7, [sp], #4
10007d5a:	4770      	bx	lr
10007d5c:	1002186c 	.word	0x1002186c
10007d60:	10021858 	.word	0x10021858
10007d64:	1002184c 	.word	0x1002184c
10007d68:	10021374 	.word	0x10021374
10007d6c:	10021370 	.word	0x10021370

10007d70 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
10007d70:	b580      	push	{r7, lr}
10007d72:	b084      	sub	sp, #16
10007d74:	af00      	add	r7, sp, #0
10007d76:	6078      	str	r0, [r7, #4]
10007d78:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
10007d7a:	687b      	ldr	r3, [r7, #4]
10007d7c:	2b00      	cmp	r3, #0
10007d7e:	d109      	bne.n	10007d94 <vTaskPlaceOnEventList+0x24>
10007d80:	f04f 0350 	mov.w	r3, #80	; 0x50
10007d84:	f383 8811 	msr	BASEPRI, r3
10007d88:	f3bf 8f6f 	isb	sy
10007d8c:	f3bf 8f4f 	dsb	sy
10007d90:	60fb      	str	r3, [r7, #12]
10007d92:	e7fe      	b.n	10007d92 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
10007d94:	4b07      	ldr	r3, [pc, #28]	; (10007db4 <vTaskPlaceOnEventList+0x44>)
10007d96:	681b      	ldr	r3, [r3, #0]
10007d98:	3318      	adds	r3, #24
10007d9a:	4619      	mov	r1, r3
10007d9c:	6878      	ldr	r0, [r7, #4]
10007d9e:	f7fe fc6e 	bl	1000667e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
10007da2:	2101      	movs	r1, #1
10007da4:	6838      	ldr	r0, [r7, #0]
10007da6:	f000 fa71 	bl	1000828c <prvAddCurrentTaskToDelayedList>
}
10007daa:	bf00      	nop
10007dac:	3710      	adds	r7, #16
10007dae:	46bd      	mov	sp, r7
10007db0:	bd80      	pop	{r7, pc}
10007db2:	bf00      	nop
10007db4:	10021370 	.word	0x10021370

10007db8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
10007db8:	b580      	push	{r7, lr}
10007dba:	b086      	sub	sp, #24
10007dbc:	af00      	add	r7, sp, #0
10007dbe:	60f8      	str	r0, [r7, #12]
10007dc0:	60b9      	str	r1, [r7, #8]
10007dc2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
10007dc4:	68fb      	ldr	r3, [r7, #12]
10007dc6:	2b00      	cmp	r3, #0
10007dc8:	d109      	bne.n	10007dde <vTaskPlaceOnEventListRestricted+0x26>
10007dca:	f04f 0350 	mov.w	r3, #80	; 0x50
10007dce:	f383 8811 	msr	BASEPRI, r3
10007dd2:	f3bf 8f6f 	isb	sy
10007dd6:	f3bf 8f4f 	dsb	sy
10007dda:	617b      	str	r3, [r7, #20]
10007ddc:	e7fe      	b.n	10007ddc <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
10007dde:	4b0a      	ldr	r3, [pc, #40]	; (10007e08 <vTaskPlaceOnEventListRestricted+0x50>)
10007de0:	681b      	ldr	r3, [r3, #0]
10007de2:	3318      	adds	r3, #24
10007de4:	4619      	mov	r1, r3
10007de6:	68f8      	ldr	r0, [r7, #12]
10007de8:	f7fe fc25 	bl	10006636 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
10007dec:	687b      	ldr	r3, [r7, #4]
10007dee:	2b00      	cmp	r3, #0
10007df0:	d002      	beq.n	10007df8 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
10007df2:	f04f 33ff 	mov.w	r3, #4294967295
10007df6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
10007df8:	6879      	ldr	r1, [r7, #4]
10007dfa:	68b8      	ldr	r0, [r7, #8]
10007dfc:	f000 fa46 	bl	1000828c <prvAddCurrentTaskToDelayedList>
	}
10007e00:	bf00      	nop
10007e02:	3718      	adds	r7, #24
10007e04:	46bd      	mov	sp, r7
10007e06:	bd80      	pop	{r7, pc}
10007e08:	10021370 	.word	0x10021370

10007e0c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
10007e0c:	b580      	push	{r7, lr}
10007e0e:	b086      	sub	sp, #24
10007e10:	af00      	add	r7, sp, #0
10007e12:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
10007e14:	687b      	ldr	r3, [r7, #4]
10007e16:	68db      	ldr	r3, [r3, #12]
10007e18:	68db      	ldr	r3, [r3, #12]
10007e1a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
10007e1c:	693b      	ldr	r3, [r7, #16]
10007e1e:	2b00      	cmp	r3, #0
10007e20:	d109      	bne.n	10007e36 <xTaskRemoveFromEventList+0x2a>
10007e22:	f04f 0350 	mov.w	r3, #80	; 0x50
10007e26:	f383 8811 	msr	BASEPRI, r3
10007e2a:	f3bf 8f6f 	isb	sy
10007e2e:	f3bf 8f4f 	dsb	sy
10007e32:	60fb      	str	r3, [r7, #12]
10007e34:	e7fe      	b.n	10007e34 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
10007e36:	693b      	ldr	r3, [r7, #16]
10007e38:	3318      	adds	r3, #24
10007e3a:	4618      	mov	r0, r3
10007e3c:	f7fe fc58 	bl	100066f0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
10007e40:	4b1d      	ldr	r3, [pc, #116]	; (10007eb8 <xTaskRemoveFromEventList+0xac>)
10007e42:	681b      	ldr	r3, [r3, #0]
10007e44:	2b00      	cmp	r3, #0
10007e46:	d11d      	bne.n	10007e84 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
10007e48:	693b      	ldr	r3, [r7, #16]
10007e4a:	3304      	adds	r3, #4
10007e4c:	4618      	mov	r0, r3
10007e4e:	f7fe fc4f 	bl	100066f0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
10007e52:	693b      	ldr	r3, [r7, #16]
10007e54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
10007e56:	4b19      	ldr	r3, [pc, #100]	; (10007ebc <xTaskRemoveFromEventList+0xb0>)
10007e58:	681b      	ldr	r3, [r3, #0]
10007e5a:	429a      	cmp	r2, r3
10007e5c:	d903      	bls.n	10007e66 <xTaskRemoveFromEventList+0x5a>
10007e5e:	693b      	ldr	r3, [r7, #16]
10007e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10007e62:	4a16      	ldr	r2, [pc, #88]	; (10007ebc <xTaskRemoveFromEventList+0xb0>)
10007e64:	6013      	str	r3, [r2, #0]
10007e66:	693b      	ldr	r3, [r7, #16]
10007e68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
10007e6a:	4613      	mov	r3, r2
10007e6c:	009b      	lsls	r3, r3, #2
10007e6e:	4413      	add	r3, r2
10007e70:	009b      	lsls	r3, r3, #2
10007e72:	4a13      	ldr	r2, [pc, #76]	; (10007ec0 <xTaskRemoveFromEventList+0xb4>)
10007e74:	441a      	add	r2, r3
10007e76:	693b      	ldr	r3, [r7, #16]
10007e78:	3304      	adds	r3, #4
10007e7a:	4619      	mov	r1, r3
10007e7c:	4610      	mov	r0, r2
10007e7e:	f7fe fbda 	bl	10006636 <vListInsertEnd>
10007e82:	e005      	b.n	10007e90 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
10007e84:	693b      	ldr	r3, [r7, #16]
10007e86:	3318      	adds	r3, #24
10007e88:	4619      	mov	r1, r3
10007e8a:	480e      	ldr	r0, [pc, #56]	; (10007ec4 <xTaskRemoveFromEventList+0xb8>)
10007e8c:	f7fe fbd3 	bl	10006636 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
10007e90:	693b      	ldr	r3, [r7, #16]
10007e92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
10007e94:	4b0c      	ldr	r3, [pc, #48]	; (10007ec8 <xTaskRemoveFromEventList+0xbc>)
10007e96:	681b      	ldr	r3, [r3, #0]
10007e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10007e9a:	429a      	cmp	r2, r3
10007e9c:	d905      	bls.n	10007eaa <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
10007e9e:	2301      	movs	r3, #1
10007ea0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
10007ea2:	4b0a      	ldr	r3, [pc, #40]	; (10007ecc <xTaskRemoveFromEventList+0xc0>)
10007ea4:	2201      	movs	r2, #1
10007ea6:	601a      	str	r2, [r3, #0]
10007ea8:	e001      	b.n	10007eae <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
10007eaa:	2300      	movs	r3, #0
10007eac:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
10007eae:	697b      	ldr	r3, [r7, #20]
}
10007eb0:	4618      	mov	r0, r3
10007eb2:	3718      	adds	r7, #24
10007eb4:	46bd      	mov	sp, r7
10007eb6:	bd80      	pop	{r7, pc}
10007eb8:	1002186c 	.word	0x1002186c
10007ebc:	1002184c 	.word	0x1002184c
10007ec0:	10021374 	.word	0x10021374
10007ec4:	10021804 	.word	0x10021804
10007ec8:	10021370 	.word	0x10021370
10007ecc:	10021858 	.word	0x10021858

10007ed0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
10007ed0:	b480      	push	{r7}
10007ed2:	b083      	sub	sp, #12
10007ed4:	af00      	add	r7, sp, #0
10007ed6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
10007ed8:	4b06      	ldr	r3, [pc, #24]	; (10007ef4 <vTaskInternalSetTimeOutState+0x24>)
10007eda:	681a      	ldr	r2, [r3, #0]
10007edc:	687b      	ldr	r3, [r7, #4]
10007ede:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
10007ee0:	4b05      	ldr	r3, [pc, #20]	; (10007ef8 <vTaskInternalSetTimeOutState+0x28>)
10007ee2:	681a      	ldr	r2, [r3, #0]
10007ee4:	687b      	ldr	r3, [r7, #4]
10007ee6:	605a      	str	r2, [r3, #4]
}
10007ee8:	bf00      	nop
10007eea:	370c      	adds	r7, #12
10007eec:	46bd      	mov	sp, r7
10007eee:	f85d 7b04 	ldr.w	r7, [sp], #4
10007ef2:	4770      	bx	lr
10007ef4:	1002185c 	.word	0x1002185c
10007ef8:	10021848 	.word	0x10021848

10007efc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
10007efc:	b580      	push	{r7, lr}
10007efe:	b088      	sub	sp, #32
10007f00:	af00      	add	r7, sp, #0
10007f02:	6078      	str	r0, [r7, #4]
10007f04:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
10007f06:	687b      	ldr	r3, [r7, #4]
10007f08:	2b00      	cmp	r3, #0
10007f0a:	d109      	bne.n	10007f20 <xTaskCheckForTimeOut+0x24>
10007f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
10007f10:	f383 8811 	msr	BASEPRI, r3
10007f14:	f3bf 8f6f 	isb	sy
10007f18:	f3bf 8f4f 	dsb	sy
10007f1c:	613b      	str	r3, [r7, #16]
10007f1e:	e7fe      	b.n	10007f1e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
10007f20:	683b      	ldr	r3, [r7, #0]
10007f22:	2b00      	cmp	r3, #0
10007f24:	d109      	bne.n	10007f3a <xTaskCheckForTimeOut+0x3e>
10007f26:	f04f 0350 	mov.w	r3, #80	; 0x50
10007f2a:	f383 8811 	msr	BASEPRI, r3
10007f2e:	f3bf 8f6f 	isb	sy
10007f32:	f3bf 8f4f 	dsb	sy
10007f36:	60fb      	str	r3, [r7, #12]
10007f38:	e7fe      	b.n	10007f38 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
10007f3a:	f7fe fd27 	bl	1000698c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
10007f3e:	4b1d      	ldr	r3, [pc, #116]	; (10007fb4 <xTaskCheckForTimeOut+0xb8>)
10007f40:	681b      	ldr	r3, [r3, #0]
10007f42:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
10007f44:	687b      	ldr	r3, [r7, #4]
10007f46:	685b      	ldr	r3, [r3, #4]
10007f48:	69ba      	ldr	r2, [r7, #24]
10007f4a:	1ad3      	subs	r3, r2, r3
10007f4c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
10007f4e:	683b      	ldr	r3, [r7, #0]
10007f50:	681b      	ldr	r3, [r3, #0]
10007f52:	f1b3 3fff 	cmp.w	r3, #4294967295
10007f56:	d102      	bne.n	10007f5e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
10007f58:	2300      	movs	r3, #0
10007f5a:	61fb      	str	r3, [r7, #28]
10007f5c:	e023      	b.n	10007fa6 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
10007f5e:	687b      	ldr	r3, [r7, #4]
10007f60:	681a      	ldr	r2, [r3, #0]
10007f62:	4b15      	ldr	r3, [pc, #84]	; (10007fb8 <xTaskCheckForTimeOut+0xbc>)
10007f64:	681b      	ldr	r3, [r3, #0]
10007f66:	429a      	cmp	r2, r3
10007f68:	d007      	beq.n	10007f7a <xTaskCheckForTimeOut+0x7e>
10007f6a:	687b      	ldr	r3, [r7, #4]
10007f6c:	685b      	ldr	r3, [r3, #4]
10007f6e:	69ba      	ldr	r2, [r7, #24]
10007f70:	429a      	cmp	r2, r3
10007f72:	d302      	bcc.n	10007f7a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
10007f74:	2301      	movs	r3, #1
10007f76:	61fb      	str	r3, [r7, #28]
10007f78:	e015      	b.n	10007fa6 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
10007f7a:	683b      	ldr	r3, [r7, #0]
10007f7c:	681b      	ldr	r3, [r3, #0]
10007f7e:	697a      	ldr	r2, [r7, #20]
10007f80:	429a      	cmp	r2, r3
10007f82:	d20b      	bcs.n	10007f9c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
10007f84:	683b      	ldr	r3, [r7, #0]
10007f86:	681a      	ldr	r2, [r3, #0]
10007f88:	697b      	ldr	r3, [r7, #20]
10007f8a:	1ad2      	subs	r2, r2, r3
10007f8c:	683b      	ldr	r3, [r7, #0]
10007f8e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
10007f90:	6878      	ldr	r0, [r7, #4]
10007f92:	f7ff ff9d 	bl	10007ed0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
10007f96:	2300      	movs	r3, #0
10007f98:	61fb      	str	r3, [r7, #28]
10007f9a:	e004      	b.n	10007fa6 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
10007f9c:	683b      	ldr	r3, [r7, #0]
10007f9e:	2200      	movs	r2, #0
10007fa0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
10007fa2:	2301      	movs	r3, #1
10007fa4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
10007fa6:	f7fe fd1f 	bl	100069e8 <vPortExitCritical>

	return xReturn;
10007faa:	69fb      	ldr	r3, [r7, #28]
}
10007fac:	4618      	mov	r0, r3
10007fae:	3720      	adds	r7, #32
10007fb0:	46bd      	mov	sp, r7
10007fb2:	bd80      	pop	{r7, pc}
10007fb4:	10021848 	.word	0x10021848
10007fb8:	1002185c 	.word	0x1002185c

10007fbc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
10007fbc:	b480      	push	{r7}
10007fbe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
10007fc0:	4b03      	ldr	r3, [pc, #12]	; (10007fd0 <vTaskMissedYield+0x14>)
10007fc2:	2201      	movs	r2, #1
10007fc4:	601a      	str	r2, [r3, #0]
}
10007fc6:	bf00      	nop
10007fc8:	46bd      	mov	sp, r7
10007fca:	f85d 7b04 	ldr.w	r7, [sp], #4
10007fce:	4770      	bx	lr
10007fd0:	10021858 	.word	0x10021858

10007fd4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
10007fd4:	b580      	push	{r7, lr}
10007fd6:	b082      	sub	sp, #8
10007fd8:	af00      	add	r7, sp, #0
10007fda:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
10007fdc:	f000 f852 	bl	10008084 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
10007fe0:	4b06      	ldr	r3, [pc, #24]	; (10007ffc <prvIdleTask+0x28>)
10007fe2:	681b      	ldr	r3, [r3, #0]
10007fe4:	2b01      	cmp	r3, #1
10007fe6:	d9f9      	bls.n	10007fdc <prvIdleTask+0x8>
			{
				taskYIELD();
10007fe8:	4b05      	ldr	r3, [pc, #20]	; (10008000 <prvIdleTask+0x2c>)
10007fea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
10007fee:	601a      	str	r2, [r3, #0]
10007ff0:	f3bf 8f4f 	dsb	sy
10007ff4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
10007ff8:	e7f0      	b.n	10007fdc <prvIdleTask+0x8>
10007ffa:	bf00      	nop
10007ffc:	10021374 	.word	0x10021374
10008000:	e000ed04 	.word	0xe000ed04

10008004 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
10008004:	b580      	push	{r7, lr}
10008006:	b082      	sub	sp, #8
10008008:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1000800a:	2300      	movs	r3, #0
1000800c:	607b      	str	r3, [r7, #4]
1000800e:	e00c      	b.n	1000802a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
10008010:	687a      	ldr	r2, [r7, #4]
10008012:	4613      	mov	r3, r2
10008014:	009b      	lsls	r3, r3, #2
10008016:	4413      	add	r3, r2
10008018:	009b      	lsls	r3, r3, #2
1000801a:	4a12      	ldr	r2, [pc, #72]	; (10008064 <prvInitialiseTaskLists+0x60>)
1000801c:	4413      	add	r3, r2
1000801e:	4618      	mov	r0, r3
10008020:	f7fe fadc 	bl	100065dc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
10008024:	687b      	ldr	r3, [r7, #4]
10008026:	3301      	adds	r3, #1
10008028:	607b      	str	r3, [r7, #4]
1000802a:	687b      	ldr	r3, [r7, #4]
1000802c:	2b37      	cmp	r3, #55	; 0x37
1000802e:	d9ef      	bls.n	10008010 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
10008030:	480d      	ldr	r0, [pc, #52]	; (10008068 <prvInitialiseTaskLists+0x64>)
10008032:	f7fe fad3 	bl	100065dc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
10008036:	480d      	ldr	r0, [pc, #52]	; (1000806c <prvInitialiseTaskLists+0x68>)
10008038:	f7fe fad0 	bl	100065dc <vListInitialise>
	vListInitialise( &xPendingReadyList );
1000803c:	480c      	ldr	r0, [pc, #48]	; (10008070 <prvInitialiseTaskLists+0x6c>)
1000803e:	f7fe facd 	bl	100065dc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
10008042:	480c      	ldr	r0, [pc, #48]	; (10008074 <prvInitialiseTaskLists+0x70>)
10008044:	f7fe faca 	bl	100065dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
10008048:	480b      	ldr	r0, [pc, #44]	; (10008078 <prvInitialiseTaskLists+0x74>)
1000804a:	f7fe fac7 	bl	100065dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
1000804e:	4b0b      	ldr	r3, [pc, #44]	; (1000807c <prvInitialiseTaskLists+0x78>)
10008050:	4a05      	ldr	r2, [pc, #20]	; (10008068 <prvInitialiseTaskLists+0x64>)
10008052:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
10008054:	4b0a      	ldr	r3, [pc, #40]	; (10008080 <prvInitialiseTaskLists+0x7c>)
10008056:	4a05      	ldr	r2, [pc, #20]	; (1000806c <prvInitialiseTaskLists+0x68>)
10008058:	601a      	str	r2, [r3, #0]
}
1000805a:	bf00      	nop
1000805c:	3708      	adds	r7, #8
1000805e:	46bd      	mov	sp, r7
10008060:	bd80      	pop	{r7, pc}
10008062:	bf00      	nop
10008064:	10021374 	.word	0x10021374
10008068:	100217d4 	.word	0x100217d4
1000806c:	100217e8 	.word	0x100217e8
10008070:	10021804 	.word	0x10021804
10008074:	10021818 	.word	0x10021818
10008078:	10021830 	.word	0x10021830
1000807c:	100217fc 	.word	0x100217fc
10008080:	10021800 	.word	0x10021800

10008084 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
10008084:	b580      	push	{r7, lr}
10008086:	b082      	sub	sp, #8
10008088:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1000808a:	e019      	b.n	100080c0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
1000808c:	f7fe fc7e 	bl	1000698c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
10008090:	4b0f      	ldr	r3, [pc, #60]	; (100080d0 <prvCheckTasksWaitingTermination+0x4c>)
10008092:	68db      	ldr	r3, [r3, #12]
10008094:	68db      	ldr	r3, [r3, #12]
10008096:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
10008098:	687b      	ldr	r3, [r7, #4]
1000809a:	3304      	adds	r3, #4
1000809c:	4618      	mov	r0, r3
1000809e:	f7fe fb27 	bl	100066f0 <uxListRemove>
				--uxCurrentNumberOfTasks;
100080a2:	4b0c      	ldr	r3, [pc, #48]	; (100080d4 <prvCheckTasksWaitingTermination+0x50>)
100080a4:	681b      	ldr	r3, [r3, #0]
100080a6:	3b01      	subs	r3, #1
100080a8:	4a0a      	ldr	r2, [pc, #40]	; (100080d4 <prvCheckTasksWaitingTermination+0x50>)
100080aa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
100080ac:	4b0a      	ldr	r3, [pc, #40]	; (100080d8 <prvCheckTasksWaitingTermination+0x54>)
100080ae:	681b      	ldr	r3, [r3, #0]
100080b0:	3b01      	subs	r3, #1
100080b2:	4a09      	ldr	r2, [pc, #36]	; (100080d8 <prvCheckTasksWaitingTermination+0x54>)
100080b4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
100080b6:	f7fe fc97 	bl	100069e8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
100080ba:	6878      	ldr	r0, [r7, #4]
100080bc:	f000 f80e 	bl	100080dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
100080c0:	4b05      	ldr	r3, [pc, #20]	; (100080d8 <prvCheckTasksWaitingTermination+0x54>)
100080c2:	681b      	ldr	r3, [r3, #0]
100080c4:	2b00      	cmp	r3, #0
100080c6:	d1e1      	bne.n	1000808c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
100080c8:	bf00      	nop
100080ca:	3708      	adds	r7, #8
100080cc:	46bd      	mov	sp, r7
100080ce:	bd80      	pop	{r7, pc}
100080d0:	10021818 	.word	0x10021818
100080d4:	10021844 	.word	0x10021844
100080d8:	1002182c 	.word	0x1002182c

100080dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
100080dc:	b580      	push	{r7, lr}
100080de:	b084      	sub	sp, #16
100080e0:	af00      	add	r7, sp, #0
100080e2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
100080e4:	687b      	ldr	r3, [r7, #4]
100080e6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
100080ea:	2b00      	cmp	r3, #0
100080ec:	d108      	bne.n	10008100 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
100080ee:	687b      	ldr	r3, [r7, #4]
100080f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
100080f2:	4618      	mov	r0, r3
100080f4:	f7fe f95e 	bl	100063b4 <vPortFree>
				vPortFree( pxTCB );
100080f8:	6878      	ldr	r0, [r7, #4]
100080fa:	f7fe f95b 	bl	100063b4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
100080fe:	e017      	b.n	10008130 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
10008100:	687b      	ldr	r3, [r7, #4]
10008102:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
10008106:	2b01      	cmp	r3, #1
10008108:	d103      	bne.n	10008112 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
1000810a:	6878      	ldr	r0, [r7, #4]
1000810c:	f7fe f952 	bl	100063b4 <vPortFree>
	}
10008110:	e00e      	b.n	10008130 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
10008112:	687b      	ldr	r3, [r7, #4]
10008114:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
10008118:	2b02      	cmp	r3, #2
1000811a:	d009      	beq.n	10008130 <prvDeleteTCB+0x54>
1000811c:	f04f 0350 	mov.w	r3, #80	; 0x50
10008120:	f383 8811 	msr	BASEPRI, r3
10008124:	f3bf 8f6f 	isb	sy
10008128:	f3bf 8f4f 	dsb	sy
1000812c:	60fb      	str	r3, [r7, #12]
1000812e:	e7fe      	b.n	1000812e <prvDeleteTCB+0x52>
	}
10008130:	bf00      	nop
10008132:	3710      	adds	r7, #16
10008134:	46bd      	mov	sp, r7
10008136:	bd80      	pop	{r7, pc}

10008138 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
10008138:	b480      	push	{r7}
1000813a:	b083      	sub	sp, #12
1000813c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1000813e:	4b0c      	ldr	r3, [pc, #48]	; (10008170 <prvResetNextTaskUnblockTime+0x38>)
10008140:	681b      	ldr	r3, [r3, #0]
10008142:	681b      	ldr	r3, [r3, #0]
10008144:	2b00      	cmp	r3, #0
10008146:	d104      	bne.n	10008152 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
10008148:	4b0a      	ldr	r3, [pc, #40]	; (10008174 <prvResetNextTaskUnblockTime+0x3c>)
1000814a:	f04f 32ff 	mov.w	r2, #4294967295
1000814e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
10008150:	e008      	b.n	10008164 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
10008152:	4b07      	ldr	r3, [pc, #28]	; (10008170 <prvResetNextTaskUnblockTime+0x38>)
10008154:	681b      	ldr	r3, [r3, #0]
10008156:	68db      	ldr	r3, [r3, #12]
10008158:	68db      	ldr	r3, [r3, #12]
1000815a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
1000815c:	687b      	ldr	r3, [r7, #4]
1000815e:	685b      	ldr	r3, [r3, #4]
10008160:	4a04      	ldr	r2, [pc, #16]	; (10008174 <prvResetNextTaskUnblockTime+0x3c>)
10008162:	6013      	str	r3, [r2, #0]
}
10008164:	bf00      	nop
10008166:	370c      	adds	r7, #12
10008168:	46bd      	mov	sp, r7
1000816a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000816e:	4770      	bx	lr
10008170:	100217fc 	.word	0x100217fc
10008174:	10021864 	.word	0x10021864

10008178 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
10008178:	b480      	push	{r7}
1000817a:	b083      	sub	sp, #12
1000817c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
1000817e:	4b0b      	ldr	r3, [pc, #44]	; (100081ac <xTaskGetSchedulerState+0x34>)
10008180:	681b      	ldr	r3, [r3, #0]
10008182:	2b00      	cmp	r3, #0
10008184:	d102      	bne.n	1000818c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
10008186:	2301      	movs	r3, #1
10008188:	607b      	str	r3, [r7, #4]
1000818a:	e008      	b.n	1000819e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1000818c:	4b08      	ldr	r3, [pc, #32]	; (100081b0 <xTaskGetSchedulerState+0x38>)
1000818e:	681b      	ldr	r3, [r3, #0]
10008190:	2b00      	cmp	r3, #0
10008192:	d102      	bne.n	1000819a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
10008194:	2302      	movs	r3, #2
10008196:	607b      	str	r3, [r7, #4]
10008198:	e001      	b.n	1000819e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
1000819a:	2300      	movs	r3, #0
1000819c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
1000819e:	687b      	ldr	r3, [r7, #4]
	}
100081a0:	4618      	mov	r0, r3
100081a2:	370c      	adds	r7, #12
100081a4:	46bd      	mov	sp, r7
100081a6:	f85d 7b04 	ldr.w	r7, [sp], #4
100081aa:	4770      	bx	lr
100081ac:	10021850 	.word	0x10021850
100081b0:	1002186c 	.word	0x1002186c

100081b4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
100081b4:	b580      	push	{r7, lr}
100081b6:	b086      	sub	sp, #24
100081b8:	af00      	add	r7, sp, #0
100081ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
100081bc:	687b      	ldr	r3, [r7, #4]
100081be:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
100081c0:	2300      	movs	r3, #0
100081c2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
100081c4:	687b      	ldr	r3, [r7, #4]
100081c6:	2b00      	cmp	r3, #0
100081c8:	d054      	beq.n	10008274 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
100081ca:	4b2d      	ldr	r3, [pc, #180]	; (10008280 <xTaskPriorityDisinherit+0xcc>)
100081cc:	681b      	ldr	r3, [r3, #0]
100081ce:	693a      	ldr	r2, [r7, #16]
100081d0:	429a      	cmp	r2, r3
100081d2:	d009      	beq.n	100081e8 <xTaskPriorityDisinherit+0x34>
100081d4:	f04f 0350 	mov.w	r3, #80	; 0x50
100081d8:	f383 8811 	msr	BASEPRI, r3
100081dc:	f3bf 8f6f 	isb	sy
100081e0:	f3bf 8f4f 	dsb	sy
100081e4:	60fb      	str	r3, [r7, #12]
100081e6:	e7fe      	b.n	100081e6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
100081e8:	693b      	ldr	r3, [r7, #16]
100081ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
100081ec:	2b00      	cmp	r3, #0
100081ee:	d109      	bne.n	10008204 <xTaskPriorityDisinherit+0x50>
100081f0:	f04f 0350 	mov.w	r3, #80	; 0x50
100081f4:	f383 8811 	msr	BASEPRI, r3
100081f8:	f3bf 8f6f 	isb	sy
100081fc:	f3bf 8f4f 	dsb	sy
10008200:	60bb      	str	r3, [r7, #8]
10008202:	e7fe      	b.n	10008202 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
10008204:	693b      	ldr	r3, [r7, #16]
10008206:	6d1b      	ldr	r3, [r3, #80]	; 0x50
10008208:	1e5a      	subs	r2, r3, #1
1000820a:	693b      	ldr	r3, [r7, #16]
1000820c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
1000820e:	693b      	ldr	r3, [r7, #16]
10008210:	6ada      	ldr	r2, [r3, #44]	; 0x2c
10008212:	693b      	ldr	r3, [r7, #16]
10008214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
10008216:	429a      	cmp	r2, r3
10008218:	d02c      	beq.n	10008274 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
1000821a:	693b      	ldr	r3, [r7, #16]
1000821c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
1000821e:	2b00      	cmp	r3, #0
10008220:	d128      	bne.n	10008274 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
10008222:	693b      	ldr	r3, [r7, #16]
10008224:	3304      	adds	r3, #4
10008226:	4618      	mov	r0, r3
10008228:	f7fe fa62 	bl	100066f0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
1000822c:	693b      	ldr	r3, [r7, #16]
1000822e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
10008230:	693b      	ldr	r3, [r7, #16]
10008232:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
10008234:	693b      	ldr	r3, [r7, #16]
10008236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10008238:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
1000823c:	693b      	ldr	r3, [r7, #16]
1000823e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
10008240:	693b      	ldr	r3, [r7, #16]
10008242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
10008244:	4b0f      	ldr	r3, [pc, #60]	; (10008284 <xTaskPriorityDisinherit+0xd0>)
10008246:	681b      	ldr	r3, [r3, #0]
10008248:	429a      	cmp	r2, r3
1000824a:	d903      	bls.n	10008254 <xTaskPriorityDisinherit+0xa0>
1000824c:	693b      	ldr	r3, [r7, #16]
1000824e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10008250:	4a0c      	ldr	r2, [pc, #48]	; (10008284 <xTaskPriorityDisinherit+0xd0>)
10008252:	6013      	str	r3, [r2, #0]
10008254:	693b      	ldr	r3, [r7, #16]
10008256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
10008258:	4613      	mov	r3, r2
1000825a:	009b      	lsls	r3, r3, #2
1000825c:	4413      	add	r3, r2
1000825e:	009b      	lsls	r3, r3, #2
10008260:	4a09      	ldr	r2, [pc, #36]	; (10008288 <xTaskPriorityDisinherit+0xd4>)
10008262:	441a      	add	r2, r3
10008264:	693b      	ldr	r3, [r7, #16]
10008266:	3304      	adds	r3, #4
10008268:	4619      	mov	r1, r3
1000826a:	4610      	mov	r0, r2
1000826c:	f7fe f9e3 	bl	10006636 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
10008270:	2301      	movs	r3, #1
10008272:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
10008274:	697b      	ldr	r3, [r7, #20]
	}
10008276:	4618      	mov	r0, r3
10008278:	3718      	adds	r7, #24
1000827a:	46bd      	mov	sp, r7
1000827c:	bd80      	pop	{r7, pc}
1000827e:	bf00      	nop
10008280:	10021370 	.word	0x10021370
10008284:	1002184c 	.word	0x1002184c
10008288:	10021374 	.word	0x10021374

1000828c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
1000828c:	b580      	push	{r7, lr}
1000828e:	b084      	sub	sp, #16
10008290:	af00      	add	r7, sp, #0
10008292:	6078      	str	r0, [r7, #4]
10008294:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
10008296:	4b21      	ldr	r3, [pc, #132]	; (1000831c <prvAddCurrentTaskToDelayedList+0x90>)
10008298:	681b      	ldr	r3, [r3, #0]
1000829a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1000829c:	4b20      	ldr	r3, [pc, #128]	; (10008320 <prvAddCurrentTaskToDelayedList+0x94>)
1000829e:	681b      	ldr	r3, [r3, #0]
100082a0:	3304      	adds	r3, #4
100082a2:	4618      	mov	r0, r3
100082a4:	f7fe fa24 	bl	100066f0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
100082a8:	687b      	ldr	r3, [r7, #4]
100082aa:	f1b3 3fff 	cmp.w	r3, #4294967295
100082ae:	d10a      	bne.n	100082c6 <prvAddCurrentTaskToDelayedList+0x3a>
100082b0:	683b      	ldr	r3, [r7, #0]
100082b2:	2b00      	cmp	r3, #0
100082b4:	d007      	beq.n	100082c6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
100082b6:	4b1a      	ldr	r3, [pc, #104]	; (10008320 <prvAddCurrentTaskToDelayedList+0x94>)
100082b8:	681b      	ldr	r3, [r3, #0]
100082ba:	3304      	adds	r3, #4
100082bc:	4619      	mov	r1, r3
100082be:	4819      	ldr	r0, [pc, #100]	; (10008324 <prvAddCurrentTaskToDelayedList+0x98>)
100082c0:	f7fe f9b9 	bl	10006636 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
100082c4:	e026      	b.n	10008314 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
100082c6:	68fa      	ldr	r2, [r7, #12]
100082c8:	687b      	ldr	r3, [r7, #4]
100082ca:	4413      	add	r3, r2
100082cc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
100082ce:	4b14      	ldr	r3, [pc, #80]	; (10008320 <prvAddCurrentTaskToDelayedList+0x94>)
100082d0:	681b      	ldr	r3, [r3, #0]
100082d2:	68ba      	ldr	r2, [r7, #8]
100082d4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
100082d6:	68ba      	ldr	r2, [r7, #8]
100082d8:	68fb      	ldr	r3, [r7, #12]
100082da:	429a      	cmp	r2, r3
100082dc:	d209      	bcs.n	100082f2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
100082de:	4b12      	ldr	r3, [pc, #72]	; (10008328 <prvAddCurrentTaskToDelayedList+0x9c>)
100082e0:	681a      	ldr	r2, [r3, #0]
100082e2:	4b0f      	ldr	r3, [pc, #60]	; (10008320 <prvAddCurrentTaskToDelayedList+0x94>)
100082e4:	681b      	ldr	r3, [r3, #0]
100082e6:	3304      	adds	r3, #4
100082e8:	4619      	mov	r1, r3
100082ea:	4610      	mov	r0, r2
100082ec:	f7fe f9c7 	bl	1000667e <vListInsert>
}
100082f0:	e010      	b.n	10008314 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
100082f2:	4b0e      	ldr	r3, [pc, #56]	; (1000832c <prvAddCurrentTaskToDelayedList+0xa0>)
100082f4:	681a      	ldr	r2, [r3, #0]
100082f6:	4b0a      	ldr	r3, [pc, #40]	; (10008320 <prvAddCurrentTaskToDelayedList+0x94>)
100082f8:	681b      	ldr	r3, [r3, #0]
100082fa:	3304      	adds	r3, #4
100082fc:	4619      	mov	r1, r3
100082fe:	4610      	mov	r0, r2
10008300:	f7fe f9bd 	bl	1000667e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
10008304:	4b0a      	ldr	r3, [pc, #40]	; (10008330 <prvAddCurrentTaskToDelayedList+0xa4>)
10008306:	681b      	ldr	r3, [r3, #0]
10008308:	68ba      	ldr	r2, [r7, #8]
1000830a:	429a      	cmp	r2, r3
1000830c:	d202      	bcs.n	10008314 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
1000830e:	4a08      	ldr	r2, [pc, #32]	; (10008330 <prvAddCurrentTaskToDelayedList+0xa4>)
10008310:	68bb      	ldr	r3, [r7, #8]
10008312:	6013      	str	r3, [r2, #0]
}
10008314:	bf00      	nop
10008316:	3710      	adds	r7, #16
10008318:	46bd      	mov	sp, r7
1000831a:	bd80      	pop	{r7, pc}
1000831c:	10021848 	.word	0x10021848
10008320:	10021370 	.word	0x10021370
10008324:	10021830 	.word	0x10021830
10008328:	10021800 	.word	0x10021800
1000832c:	100217fc 	.word	0x100217fc
10008330:	10021864 	.word	0x10021864

10008334 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
10008334:	b580      	push	{r7, lr}
10008336:	b08a      	sub	sp, #40	; 0x28
10008338:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
1000833a:	2300      	movs	r3, #0
1000833c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
1000833e:	f000 faff 	bl	10008940 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
10008342:	4b1c      	ldr	r3, [pc, #112]	; (100083b4 <xTimerCreateTimerTask+0x80>)
10008344:	681b      	ldr	r3, [r3, #0]
10008346:	2b00      	cmp	r3, #0
10008348:	d021      	beq.n	1000838e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
1000834a:	2300      	movs	r3, #0
1000834c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
1000834e:	2300      	movs	r3, #0
10008350:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
10008352:	1d3a      	adds	r2, r7, #4
10008354:	f107 0108 	add.w	r1, r7, #8
10008358:	f107 030c 	add.w	r3, r7, #12
1000835c:	4618      	mov	r0, r3
1000835e:	f7fd ff4d 	bl	100061fc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
10008362:	6879      	ldr	r1, [r7, #4]
10008364:	68bb      	ldr	r3, [r7, #8]
10008366:	68fa      	ldr	r2, [r7, #12]
10008368:	9202      	str	r2, [sp, #8]
1000836a:	9301      	str	r3, [sp, #4]
1000836c:	2302      	movs	r3, #2
1000836e:	9300      	str	r3, [sp, #0]
10008370:	2300      	movs	r3, #0
10008372:	460a      	mov	r2, r1
10008374:	4910      	ldr	r1, [pc, #64]	; (100083b8 <xTimerCreateTimerTask+0x84>)
10008376:	4811      	ldr	r0, [pc, #68]	; (100083bc <xTimerCreateTimerTask+0x88>)
10008378:	f7ff f8f6 	bl	10007568 <xTaskCreateStatic>
1000837c:	4602      	mov	r2, r0
1000837e:	4b10      	ldr	r3, [pc, #64]	; (100083c0 <xTimerCreateTimerTask+0x8c>)
10008380:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
10008382:	4b0f      	ldr	r3, [pc, #60]	; (100083c0 <xTimerCreateTimerTask+0x8c>)
10008384:	681b      	ldr	r3, [r3, #0]
10008386:	2b00      	cmp	r3, #0
10008388:	d001      	beq.n	1000838e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
1000838a:	2301      	movs	r3, #1
1000838c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
1000838e:	697b      	ldr	r3, [r7, #20]
10008390:	2b00      	cmp	r3, #0
10008392:	d109      	bne.n	100083a8 <xTimerCreateTimerTask+0x74>
10008394:	f04f 0350 	mov.w	r3, #80	; 0x50
10008398:	f383 8811 	msr	BASEPRI, r3
1000839c:	f3bf 8f6f 	isb	sy
100083a0:	f3bf 8f4f 	dsb	sy
100083a4:	613b      	str	r3, [r7, #16]
100083a6:	e7fe      	b.n	100083a6 <xTimerCreateTimerTask+0x72>
	return xReturn;
100083a8:	697b      	ldr	r3, [r7, #20]
}
100083aa:	4618      	mov	r0, r3
100083ac:	3718      	adds	r7, #24
100083ae:	46bd      	mov	sp, r7
100083b0:	bd80      	pop	{r7, pc}
100083b2:	bf00      	nop
100083b4:	100218a0 	.word	0x100218a0
100083b8:	100093bc 	.word	0x100093bc
100083bc:	100084f5 	.word	0x100084f5
100083c0:	100218a4 	.word	0x100218a4

100083c4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
100083c4:	b580      	push	{r7, lr}
100083c6:	b08a      	sub	sp, #40	; 0x28
100083c8:	af00      	add	r7, sp, #0
100083ca:	60f8      	str	r0, [r7, #12]
100083cc:	60b9      	str	r1, [r7, #8]
100083ce:	607a      	str	r2, [r7, #4]
100083d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
100083d2:	2300      	movs	r3, #0
100083d4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
100083d6:	68fb      	ldr	r3, [r7, #12]
100083d8:	2b00      	cmp	r3, #0
100083da:	d109      	bne.n	100083f0 <xTimerGenericCommand+0x2c>
100083dc:	f04f 0350 	mov.w	r3, #80	; 0x50
100083e0:	f383 8811 	msr	BASEPRI, r3
100083e4:	f3bf 8f6f 	isb	sy
100083e8:	f3bf 8f4f 	dsb	sy
100083ec:	623b      	str	r3, [r7, #32]
100083ee:	e7fe      	b.n	100083ee <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
100083f0:	4b19      	ldr	r3, [pc, #100]	; (10008458 <xTimerGenericCommand+0x94>)
100083f2:	681b      	ldr	r3, [r3, #0]
100083f4:	2b00      	cmp	r3, #0
100083f6:	d02a      	beq.n	1000844e <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
100083f8:	68bb      	ldr	r3, [r7, #8]
100083fa:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
100083fc:	687b      	ldr	r3, [r7, #4]
100083fe:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
10008400:	68fb      	ldr	r3, [r7, #12]
10008402:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
10008404:	68bb      	ldr	r3, [r7, #8]
10008406:	2b05      	cmp	r3, #5
10008408:	dc18      	bgt.n	1000843c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
1000840a:	f7ff feb5 	bl	10008178 <xTaskGetSchedulerState>
1000840e:	4603      	mov	r3, r0
10008410:	2b02      	cmp	r3, #2
10008412:	d109      	bne.n	10008428 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
10008414:	4b10      	ldr	r3, [pc, #64]	; (10008458 <xTimerGenericCommand+0x94>)
10008416:	6818      	ldr	r0, [r3, #0]
10008418:	f107 0110 	add.w	r1, r7, #16
1000841c:	2300      	movs	r3, #0
1000841e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
10008420:	f7fe fccc 	bl	10006dbc <xQueueGenericSend>
10008424:	6278      	str	r0, [r7, #36]	; 0x24
10008426:	e012      	b.n	1000844e <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
10008428:	4b0b      	ldr	r3, [pc, #44]	; (10008458 <xTimerGenericCommand+0x94>)
1000842a:	6818      	ldr	r0, [r3, #0]
1000842c:	f107 0110 	add.w	r1, r7, #16
10008430:	2300      	movs	r3, #0
10008432:	2200      	movs	r2, #0
10008434:	f7fe fcc2 	bl	10006dbc <xQueueGenericSend>
10008438:	6278      	str	r0, [r7, #36]	; 0x24
1000843a:	e008      	b.n	1000844e <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
1000843c:	4b06      	ldr	r3, [pc, #24]	; (10008458 <xTimerGenericCommand+0x94>)
1000843e:	6818      	ldr	r0, [r3, #0]
10008440:	f107 0110 	add.w	r1, r7, #16
10008444:	2300      	movs	r3, #0
10008446:	683a      	ldr	r2, [r7, #0]
10008448:	f7fe fdb2 	bl	10006fb0 <xQueueGenericSendFromISR>
1000844c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
1000844e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
10008450:	4618      	mov	r0, r3
10008452:	3728      	adds	r7, #40	; 0x28
10008454:	46bd      	mov	sp, r7
10008456:	bd80      	pop	{r7, pc}
10008458:	100218a0 	.word	0x100218a0

1000845c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
1000845c:	b580      	push	{r7, lr}
1000845e:	b088      	sub	sp, #32
10008460:	af02      	add	r7, sp, #8
10008462:	6078      	str	r0, [r7, #4]
10008464:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
10008466:	4b22      	ldr	r3, [pc, #136]	; (100084f0 <prvProcessExpiredTimer+0x94>)
10008468:	681b      	ldr	r3, [r3, #0]
1000846a:	68db      	ldr	r3, [r3, #12]
1000846c:	68db      	ldr	r3, [r3, #12]
1000846e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
10008470:	697b      	ldr	r3, [r7, #20]
10008472:	3304      	adds	r3, #4
10008474:	4618      	mov	r0, r3
10008476:	f7fe f93b 	bl	100066f0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
1000847a:	697b      	ldr	r3, [r7, #20]
1000847c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
10008480:	f003 0304 	and.w	r3, r3, #4
10008484:	2b00      	cmp	r3, #0
10008486:	d021      	beq.n	100084cc <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
10008488:	697b      	ldr	r3, [r7, #20]
1000848a:	699a      	ldr	r2, [r3, #24]
1000848c:	687b      	ldr	r3, [r7, #4]
1000848e:	18d1      	adds	r1, r2, r3
10008490:	687b      	ldr	r3, [r7, #4]
10008492:	683a      	ldr	r2, [r7, #0]
10008494:	6978      	ldr	r0, [r7, #20]
10008496:	f000 f8d1 	bl	1000863c <prvInsertTimerInActiveList>
1000849a:	4603      	mov	r3, r0
1000849c:	2b00      	cmp	r3, #0
1000849e:	d01e      	beq.n	100084de <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
100084a0:	2300      	movs	r3, #0
100084a2:	9300      	str	r3, [sp, #0]
100084a4:	2300      	movs	r3, #0
100084a6:	687a      	ldr	r2, [r7, #4]
100084a8:	2100      	movs	r1, #0
100084aa:	6978      	ldr	r0, [r7, #20]
100084ac:	f7ff ff8a 	bl	100083c4 <xTimerGenericCommand>
100084b0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
100084b2:	693b      	ldr	r3, [r7, #16]
100084b4:	2b00      	cmp	r3, #0
100084b6:	d112      	bne.n	100084de <prvProcessExpiredTimer+0x82>
100084b8:	f04f 0350 	mov.w	r3, #80	; 0x50
100084bc:	f383 8811 	msr	BASEPRI, r3
100084c0:	f3bf 8f6f 	isb	sy
100084c4:	f3bf 8f4f 	dsb	sy
100084c8:	60fb      	str	r3, [r7, #12]
100084ca:	e7fe      	b.n	100084ca <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
100084cc:	697b      	ldr	r3, [r7, #20]
100084ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
100084d2:	f023 0301 	bic.w	r3, r3, #1
100084d6:	b2da      	uxtb	r2, r3
100084d8:	697b      	ldr	r3, [r7, #20]
100084da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
100084de:	697b      	ldr	r3, [r7, #20]
100084e0:	6a1b      	ldr	r3, [r3, #32]
100084e2:	6978      	ldr	r0, [r7, #20]
100084e4:	4798      	blx	r3
}
100084e6:	bf00      	nop
100084e8:	3718      	adds	r7, #24
100084ea:	46bd      	mov	sp, r7
100084ec:	bd80      	pop	{r7, pc}
100084ee:	bf00      	nop
100084f0:	10021898 	.word	0x10021898

100084f4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
100084f4:	b580      	push	{r7, lr}
100084f6:	b084      	sub	sp, #16
100084f8:	af00      	add	r7, sp, #0
100084fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
100084fc:	f107 0308 	add.w	r3, r7, #8
10008500:	4618      	mov	r0, r3
10008502:	f000 f857 	bl	100085b4 <prvGetNextExpireTime>
10008506:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
10008508:	68bb      	ldr	r3, [r7, #8]
1000850a:	4619      	mov	r1, r3
1000850c:	68f8      	ldr	r0, [r7, #12]
1000850e:	f000 f803 	bl	10008518 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
10008512:	f000 f8d5 	bl	100086c0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
10008516:	e7f1      	b.n	100084fc <prvTimerTask+0x8>

10008518 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
10008518:	b580      	push	{r7, lr}
1000851a:	b084      	sub	sp, #16
1000851c:	af00      	add	r7, sp, #0
1000851e:	6078      	str	r0, [r7, #4]
10008520:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
10008522:	f7ff fa57 	bl	100079d4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
10008526:	f107 0308 	add.w	r3, r7, #8
1000852a:	4618      	mov	r0, r3
1000852c:	f000 f866 	bl	100085fc <prvSampleTimeNow>
10008530:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
10008532:	68bb      	ldr	r3, [r7, #8]
10008534:	2b00      	cmp	r3, #0
10008536:	d130      	bne.n	1000859a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
10008538:	683b      	ldr	r3, [r7, #0]
1000853a:	2b00      	cmp	r3, #0
1000853c:	d10a      	bne.n	10008554 <prvProcessTimerOrBlockTask+0x3c>
1000853e:	687a      	ldr	r2, [r7, #4]
10008540:	68fb      	ldr	r3, [r7, #12]
10008542:	429a      	cmp	r2, r3
10008544:	d806      	bhi.n	10008554 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
10008546:	f7ff fa53 	bl	100079f0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
1000854a:	68f9      	ldr	r1, [r7, #12]
1000854c:	6878      	ldr	r0, [r7, #4]
1000854e:	f7ff ff85 	bl	1000845c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
10008552:	e024      	b.n	1000859e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
10008554:	683b      	ldr	r3, [r7, #0]
10008556:	2b00      	cmp	r3, #0
10008558:	d008      	beq.n	1000856c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
1000855a:	4b13      	ldr	r3, [pc, #76]	; (100085a8 <prvProcessTimerOrBlockTask+0x90>)
1000855c:	681b      	ldr	r3, [r3, #0]
1000855e:	681b      	ldr	r3, [r3, #0]
10008560:	2b00      	cmp	r3, #0
10008562:	d101      	bne.n	10008568 <prvProcessTimerOrBlockTask+0x50>
10008564:	2301      	movs	r3, #1
10008566:	e000      	b.n	1000856a <prvProcessTimerOrBlockTask+0x52>
10008568:	2300      	movs	r3, #0
1000856a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
1000856c:	4b0f      	ldr	r3, [pc, #60]	; (100085ac <prvProcessTimerOrBlockTask+0x94>)
1000856e:	6818      	ldr	r0, [r3, #0]
10008570:	687a      	ldr	r2, [r7, #4]
10008572:	68fb      	ldr	r3, [r7, #12]
10008574:	1ad3      	subs	r3, r2, r3
10008576:	683a      	ldr	r2, [r7, #0]
10008578:	4619      	mov	r1, r3
1000857a:	f7fe ffc1 	bl	10007500 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
1000857e:	f7ff fa37 	bl	100079f0 <xTaskResumeAll>
10008582:	4603      	mov	r3, r0
10008584:	2b00      	cmp	r3, #0
10008586:	d10a      	bne.n	1000859e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
10008588:	4b09      	ldr	r3, [pc, #36]	; (100085b0 <prvProcessTimerOrBlockTask+0x98>)
1000858a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1000858e:	601a      	str	r2, [r3, #0]
10008590:	f3bf 8f4f 	dsb	sy
10008594:	f3bf 8f6f 	isb	sy
}
10008598:	e001      	b.n	1000859e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
1000859a:	f7ff fa29 	bl	100079f0 <xTaskResumeAll>
}
1000859e:	bf00      	nop
100085a0:	3710      	adds	r7, #16
100085a2:	46bd      	mov	sp, r7
100085a4:	bd80      	pop	{r7, pc}
100085a6:	bf00      	nop
100085a8:	1002189c 	.word	0x1002189c
100085ac:	100218a0 	.word	0x100218a0
100085b0:	e000ed04 	.word	0xe000ed04

100085b4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
100085b4:	b480      	push	{r7}
100085b6:	b085      	sub	sp, #20
100085b8:	af00      	add	r7, sp, #0
100085ba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
100085bc:	4b0e      	ldr	r3, [pc, #56]	; (100085f8 <prvGetNextExpireTime+0x44>)
100085be:	681b      	ldr	r3, [r3, #0]
100085c0:	681b      	ldr	r3, [r3, #0]
100085c2:	2b00      	cmp	r3, #0
100085c4:	d101      	bne.n	100085ca <prvGetNextExpireTime+0x16>
100085c6:	2201      	movs	r2, #1
100085c8:	e000      	b.n	100085cc <prvGetNextExpireTime+0x18>
100085ca:	2200      	movs	r2, #0
100085cc:	687b      	ldr	r3, [r7, #4]
100085ce:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
100085d0:	687b      	ldr	r3, [r7, #4]
100085d2:	681b      	ldr	r3, [r3, #0]
100085d4:	2b00      	cmp	r3, #0
100085d6:	d105      	bne.n	100085e4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
100085d8:	4b07      	ldr	r3, [pc, #28]	; (100085f8 <prvGetNextExpireTime+0x44>)
100085da:	681b      	ldr	r3, [r3, #0]
100085dc:	68db      	ldr	r3, [r3, #12]
100085de:	681b      	ldr	r3, [r3, #0]
100085e0:	60fb      	str	r3, [r7, #12]
100085e2:	e001      	b.n	100085e8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
100085e4:	2300      	movs	r3, #0
100085e6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
100085e8:	68fb      	ldr	r3, [r7, #12]
}
100085ea:	4618      	mov	r0, r3
100085ec:	3714      	adds	r7, #20
100085ee:	46bd      	mov	sp, r7
100085f0:	f85d 7b04 	ldr.w	r7, [sp], #4
100085f4:	4770      	bx	lr
100085f6:	bf00      	nop
100085f8:	10021898 	.word	0x10021898

100085fc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
100085fc:	b580      	push	{r7, lr}
100085fe:	b084      	sub	sp, #16
10008600:	af00      	add	r7, sp, #0
10008602:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
10008604:	f7ff fa90 	bl	10007b28 <xTaskGetTickCount>
10008608:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
1000860a:	4b0b      	ldr	r3, [pc, #44]	; (10008638 <prvSampleTimeNow+0x3c>)
1000860c:	681b      	ldr	r3, [r3, #0]
1000860e:	68fa      	ldr	r2, [r7, #12]
10008610:	429a      	cmp	r2, r3
10008612:	d205      	bcs.n	10008620 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
10008614:	f000 f930 	bl	10008878 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
10008618:	687b      	ldr	r3, [r7, #4]
1000861a:	2201      	movs	r2, #1
1000861c:	601a      	str	r2, [r3, #0]
1000861e:	e002      	b.n	10008626 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
10008620:	687b      	ldr	r3, [r7, #4]
10008622:	2200      	movs	r2, #0
10008624:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
10008626:	4a04      	ldr	r2, [pc, #16]	; (10008638 <prvSampleTimeNow+0x3c>)
10008628:	68fb      	ldr	r3, [r7, #12]
1000862a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
1000862c:	68fb      	ldr	r3, [r7, #12]
}
1000862e:	4618      	mov	r0, r3
10008630:	3710      	adds	r7, #16
10008632:	46bd      	mov	sp, r7
10008634:	bd80      	pop	{r7, pc}
10008636:	bf00      	nop
10008638:	100218a8 	.word	0x100218a8

1000863c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
1000863c:	b580      	push	{r7, lr}
1000863e:	b086      	sub	sp, #24
10008640:	af00      	add	r7, sp, #0
10008642:	60f8      	str	r0, [r7, #12]
10008644:	60b9      	str	r1, [r7, #8]
10008646:	607a      	str	r2, [r7, #4]
10008648:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
1000864a:	2300      	movs	r3, #0
1000864c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
1000864e:	68fb      	ldr	r3, [r7, #12]
10008650:	68ba      	ldr	r2, [r7, #8]
10008652:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
10008654:	68fb      	ldr	r3, [r7, #12]
10008656:	68fa      	ldr	r2, [r7, #12]
10008658:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
1000865a:	68ba      	ldr	r2, [r7, #8]
1000865c:	687b      	ldr	r3, [r7, #4]
1000865e:	429a      	cmp	r2, r3
10008660:	d812      	bhi.n	10008688 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
10008662:	687a      	ldr	r2, [r7, #4]
10008664:	683b      	ldr	r3, [r7, #0]
10008666:	1ad2      	subs	r2, r2, r3
10008668:	68fb      	ldr	r3, [r7, #12]
1000866a:	699b      	ldr	r3, [r3, #24]
1000866c:	429a      	cmp	r2, r3
1000866e:	d302      	bcc.n	10008676 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
10008670:	2301      	movs	r3, #1
10008672:	617b      	str	r3, [r7, #20]
10008674:	e01b      	b.n	100086ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
10008676:	4b10      	ldr	r3, [pc, #64]	; (100086b8 <prvInsertTimerInActiveList+0x7c>)
10008678:	681a      	ldr	r2, [r3, #0]
1000867a:	68fb      	ldr	r3, [r7, #12]
1000867c:	3304      	adds	r3, #4
1000867e:	4619      	mov	r1, r3
10008680:	4610      	mov	r0, r2
10008682:	f7fd fffc 	bl	1000667e <vListInsert>
10008686:	e012      	b.n	100086ae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
10008688:	687a      	ldr	r2, [r7, #4]
1000868a:	683b      	ldr	r3, [r7, #0]
1000868c:	429a      	cmp	r2, r3
1000868e:	d206      	bcs.n	1000869e <prvInsertTimerInActiveList+0x62>
10008690:	68ba      	ldr	r2, [r7, #8]
10008692:	683b      	ldr	r3, [r7, #0]
10008694:	429a      	cmp	r2, r3
10008696:	d302      	bcc.n	1000869e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
10008698:	2301      	movs	r3, #1
1000869a:	617b      	str	r3, [r7, #20]
1000869c:	e007      	b.n	100086ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1000869e:	4b07      	ldr	r3, [pc, #28]	; (100086bc <prvInsertTimerInActiveList+0x80>)
100086a0:	681a      	ldr	r2, [r3, #0]
100086a2:	68fb      	ldr	r3, [r7, #12]
100086a4:	3304      	adds	r3, #4
100086a6:	4619      	mov	r1, r3
100086a8:	4610      	mov	r0, r2
100086aa:	f7fd ffe8 	bl	1000667e <vListInsert>
		}
	}

	return xProcessTimerNow;
100086ae:	697b      	ldr	r3, [r7, #20]
}
100086b0:	4618      	mov	r0, r3
100086b2:	3718      	adds	r7, #24
100086b4:	46bd      	mov	sp, r7
100086b6:	bd80      	pop	{r7, pc}
100086b8:	1002189c 	.word	0x1002189c
100086bc:	10021898 	.word	0x10021898

100086c0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
100086c0:	b580      	push	{r7, lr}
100086c2:	b08e      	sub	sp, #56	; 0x38
100086c4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
100086c6:	e0c6      	b.n	10008856 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
100086c8:	687b      	ldr	r3, [r7, #4]
100086ca:	2b00      	cmp	r3, #0
100086cc:	da17      	bge.n	100086fe <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
100086ce:	1d3b      	adds	r3, r7, #4
100086d0:	3304      	adds	r3, #4
100086d2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
100086d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
100086d6:	2b00      	cmp	r3, #0
100086d8:	d109      	bne.n	100086ee <prvProcessReceivedCommands+0x2e>
100086da:	f04f 0350 	mov.w	r3, #80	; 0x50
100086de:	f383 8811 	msr	BASEPRI, r3
100086e2:	f3bf 8f6f 	isb	sy
100086e6:	f3bf 8f4f 	dsb	sy
100086ea:	61fb      	str	r3, [r7, #28]
100086ec:	e7fe      	b.n	100086ec <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
100086ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
100086f0:	681b      	ldr	r3, [r3, #0]
100086f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
100086f4:	6850      	ldr	r0, [r2, #4]
100086f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
100086f8:	6892      	ldr	r2, [r2, #8]
100086fa:	4611      	mov	r1, r2
100086fc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
100086fe:	687b      	ldr	r3, [r7, #4]
10008700:	2b00      	cmp	r3, #0
10008702:	f2c0 80a7 	blt.w	10008854 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
10008706:	68fb      	ldr	r3, [r7, #12]
10008708:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
1000870a:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000870c:	695b      	ldr	r3, [r3, #20]
1000870e:	2b00      	cmp	r3, #0
10008710:	d004      	beq.n	1000871c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
10008712:	6abb      	ldr	r3, [r7, #40]	; 0x28
10008714:	3304      	adds	r3, #4
10008716:	4618      	mov	r0, r3
10008718:	f7fd ffea 	bl	100066f0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1000871c:	463b      	mov	r3, r7
1000871e:	4618      	mov	r0, r3
10008720:	f7ff ff6c 	bl	100085fc <prvSampleTimeNow>
10008724:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
10008726:	687b      	ldr	r3, [r7, #4]
10008728:	2b09      	cmp	r3, #9
1000872a:	f200 8094 	bhi.w	10008856 <prvProcessReceivedCommands+0x196>
1000872e:	a201      	add	r2, pc, #4	; (adr r2, 10008734 <prvProcessReceivedCommands+0x74>)
10008730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10008734:	1000875d 	.word	0x1000875d
10008738:	1000875d 	.word	0x1000875d
1000873c:	1000875d 	.word	0x1000875d
10008740:	100087cf 	.word	0x100087cf
10008744:	100087e3 	.word	0x100087e3
10008748:	1000882b 	.word	0x1000882b
1000874c:	1000875d 	.word	0x1000875d
10008750:	1000875d 	.word	0x1000875d
10008754:	100087cf 	.word	0x100087cf
10008758:	100087e3 	.word	0x100087e3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
1000875c:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000875e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
10008762:	f043 0301 	orr.w	r3, r3, #1
10008766:	b2da      	uxtb	r2, r3
10008768:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000876a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
1000876e:	68ba      	ldr	r2, [r7, #8]
10008770:	6abb      	ldr	r3, [r7, #40]	; 0x28
10008772:	699b      	ldr	r3, [r3, #24]
10008774:	18d1      	adds	r1, r2, r3
10008776:	68bb      	ldr	r3, [r7, #8]
10008778:	6a7a      	ldr	r2, [r7, #36]	; 0x24
1000877a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
1000877c:	f7ff ff5e 	bl	1000863c <prvInsertTimerInActiveList>
10008780:	4603      	mov	r3, r0
10008782:	2b00      	cmp	r3, #0
10008784:	d067      	beq.n	10008856 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
10008786:	6abb      	ldr	r3, [r7, #40]	; 0x28
10008788:	6a1b      	ldr	r3, [r3, #32]
1000878a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
1000878c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
1000878e:	6abb      	ldr	r3, [r7, #40]	; 0x28
10008790:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
10008794:	f003 0304 	and.w	r3, r3, #4
10008798:	2b00      	cmp	r3, #0
1000879a:	d05c      	beq.n	10008856 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
1000879c:	68ba      	ldr	r2, [r7, #8]
1000879e:	6abb      	ldr	r3, [r7, #40]	; 0x28
100087a0:	699b      	ldr	r3, [r3, #24]
100087a2:	441a      	add	r2, r3
100087a4:	2300      	movs	r3, #0
100087a6:	9300      	str	r3, [sp, #0]
100087a8:	2300      	movs	r3, #0
100087aa:	2100      	movs	r1, #0
100087ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
100087ae:	f7ff fe09 	bl	100083c4 <xTimerGenericCommand>
100087b2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
100087b4:	6a3b      	ldr	r3, [r7, #32]
100087b6:	2b00      	cmp	r3, #0
100087b8:	d14d      	bne.n	10008856 <prvProcessReceivedCommands+0x196>
100087ba:	f04f 0350 	mov.w	r3, #80	; 0x50
100087be:	f383 8811 	msr	BASEPRI, r3
100087c2:	f3bf 8f6f 	isb	sy
100087c6:	f3bf 8f4f 	dsb	sy
100087ca:	61bb      	str	r3, [r7, #24]
100087cc:	e7fe      	b.n	100087cc <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
100087ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
100087d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
100087d4:	f023 0301 	bic.w	r3, r3, #1
100087d8:	b2da      	uxtb	r2, r3
100087da:	6abb      	ldr	r3, [r7, #40]	; 0x28
100087dc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
100087e0:	e039      	b.n	10008856 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
100087e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
100087e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
100087e8:	f043 0301 	orr.w	r3, r3, #1
100087ec:	b2da      	uxtb	r2, r3
100087ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
100087f0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
100087f4:	68ba      	ldr	r2, [r7, #8]
100087f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
100087f8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
100087fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
100087fc:	699b      	ldr	r3, [r3, #24]
100087fe:	2b00      	cmp	r3, #0
10008800:	d109      	bne.n	10008816 <prvProcessReceivedCommands+0x156>
10008802:	f04f 0350 	mov.w	r3, #80	; 0x50
10008806:	f383 8811 	msr	BASEPRI, r3
1000880a:	f3bf 8f6f 	isb	sy
1000880e:	f3bf 8f4f 	dsb	sy
10008812:	617b      	str	r3, [r7, #20]
10008814:	e7fe      	b.n	10008814 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
10008816:	6abb      	ldr	r3, [r7, #40]	; 0x28
10008818:	699a      	ldr	r2, [r3, #24]
1000881a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000881c:	18d1      	adds	r1, r2, r3
1000881e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10008820:	6a7a      	ldr	r2, [r7, #36]	; 0x24
10008822:	6ab8      	ldr	r0, [r7, #40]	; 0x28
10008824:	f7ff ff0a 	bl	1000863c <prvInsertTimerInActiveList>
					break;
10008828:	e015      	b.n	10008856 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
1000882a:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000882c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
10008830:	f003 0302 	and.w	r3, r3, #2
10008834:	2b00      	cmp	r3, #0
10008836:	d103      	bne.n	10008840 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
10008838:	6ab8      	ldr	r0, [r7, #40]	; 0x28
1000883a:	f7fd fdbb 	bl	100063b4 <vPortFree>
1000883e:	e00a      	b.n	10008856 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
10008840:	6abb      	ldr	r3, [r7, #40]	; 0x28
10008842:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
10008846:	f023 0301 	bic.w	r3, r3, #1
1000884a:	b2da      	uxtb	r2, r3
1000884c:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000884e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
10008852:	e000      	b.n	10008856 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
10008854:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
10008856:	4b07      	ldr	r3, [pc, #28]	; (10008874 <prvProcessReceivedCommands+0x1b4>)
10008858:	681b      	ldr	r3, [r3, #0]
1000885a:	1d39      	adds	r1, r7, #4
1000885c:	2200      	movs	r2, #0
1000885e:	4618      	mov	r0, r3
10008860:	f7fe fc3a 	bl	100070d8 <xQueueReceive>
10008864:	4603      	mov	r3, r0
10008866:	2b00      	cmp	r3, #0
10008868:	f47f af2e 	bne.w	100086c8 <prvProcessReceivedCommands+0x8>
	}
}
1000886c:	bf00      	nop
1000886e:	3730      	adds	r7, #48	; 0x30
10008870:	46bd      	mov	sp, r7
10008872:	bd80      	pop	{r7, pc}
10008874:	100218a0 	.word	0x100218a0

10008878 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
10008878:	b580      	push	{r7, lr}
1000887a:	b088      	sub	sp, #32
1000887c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
1000887e:	e047      	b.n	10008910 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
10008880:	4b2d      	ldr	r3, [pc, #180]	; (10008938 <prvSwitchTimerLists+0xc0>)
10008882:	681b      	ldr	r3, [r3, #0]
10008884:	68db      	ldr	r3, [r3, #12]
10008886:	681b      	ldr	r3, [r3, #0]
10008888:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
1000888a:	4b2b      	ldr	r3, [pc, #172]	; (10008938 <prvSwitchTimerLists+0xc0>)
1000888c:	681b      	ldr	r3, [r3, #0]
1000888e:	68db      	ldr	r3, [r3, #12]
10008890:	68db      	ldr	r3, [r3, #12]
10008892:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
10008894:	68fb      	ldr	r3, [r7, #12]
10008896:	3304      	adds	r3, #4
10008898:	4618      	mov	r0, r3
1000889a:	f7fd ff29 	bl	100066f0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1000889e:	68fb      	ldr	r3, [r7, #12]
100088a0:	6a1b      	ldr	r3, [r3, #32]
100088a2:	68f8      	ldr	r0, [r7, #12]
100088a4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
100088a6:	68fb      	ldr	r3, [r7, #12]
100088a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
100088ac:	f003 0304 	and.w	r3, r3, #4
100088b0:	2b00      	cmp	r3, #0
100088b2:	d02d      	beq.n	10008910 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
100088b4:	68fb      	ldr	r3, [r7, #12]
100088b6:	699b      	ldr	r3, [r3, #24]
100088b8:	693a      	ldr	r2, [r7, #16]
100088ba:	4413      	add	r3, r2
100088bc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
100088be:	68ba      	ldr	r2, [r7, #8]
100088c0:	693b      	ldr	r3, [r7, #16]
100088c2:	429a      	cmp	r2, r3
100088c4:	d90e      	bls.n	100088e4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
100088c6:	68fb      	ldr	r3, [r7, #12]
100088c8:	68ba      	ldr	r2, [r7, #8]
100088ca:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
100088cc:	68fb      	ldr	r3, [r7, #12]
100088ce:	68fa      	ldr	r2, [r7, #12]
100088d0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
100088d2:	4b19      	ldr	r3, [pc, #100]	; (10008938 <prvSwitchTimerLists+0xc0>)
100088d4:	681a      	ldr	r2, [r3, #0]
100088d6:	68fb      	ldr	r3, [r7, #12]
100088d8:	3304      	adds	r3, #4
100088da:	4619      	mov	r1, r3
100088dc:	4610      	mov	r0, r2
100088de:	f7fd fece 	bl	1000667e <vListInsert>
100088e2:	e015      	b.n	10008910 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
100088e4:	2300      	movs	r3, #0
100088e6:	9300      	str	r3, [sp, #0]
100088e8:	2300      	movs	r3, #0
100088ea:	693a      	ldr	r2, [r7, #16]
100088ec:	2100      	movs	r1, #0
100088ee:	68f8      	ldr	r0, [r7, #12]
100088f0:	f7ff fd68 	bl	100083c4 <xTimerGenericCommand>
100088f4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
100088f6:	687b      	ldr	r3, [r7, #4]
100088f8:	2b00      	cmp	r3, #0
100088fa:	d109      	bne.n	10008910 <prvSwitchTimerLists+0x98>
100088fc:	f04f 0350 	mov.w	r3, #80	; 0x50
10008900:	f383 8811 	msr	BASEPRI, r3
10008904:	f3bf 8f6f 	isb	sy
10008908:	f3bf 8f4f 	dsb	sy
1000890c:	603b      	str	r3, [r7, #0]
1000890e:	e7fe      	b.n	1000890e <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
10008910:	4b09      	ldr	r3, [pc, #36]	; (10008938 <prvSwitchTimerLists+0xc0>)
10008912:	681b      	ldr	r3, [r3, #0]
10008914:	681b      	ldr	r3, [r3, #0]
10008916:	2b00      	cmp	r3, #0
10008918:	d1b2      	bne.n	10008880 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
1000891a:	4b07      	ldr	r3, [pc, #28]	; (10008938 <prvSwitchTimerLists+0xc0>)
1000891c:	681b      	ldr	r3, [r3, #0]
1000891e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
10008920:	4b06      	ldr	r3, [pc, #24]	; (1000893c <prvSwitchTimerLists+0xc4>)
10008922:	681b      	ldr	r3, [r3, #0]
10008924:	4a04      	ldr	r2, [pc, #16]	; (10008938 <prvSwitchTimerLists+0xc0>)
10008926:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
10008928:	4a04      	ldr	r2, [pc, #16]	; (1000893c <prvSwitchTimerLists+0xc4>)
1000892a:	697b      	ldr	r3, [r7, #20]
1000892c:	6013      	str	r3, [r2, #0]
}
1000892e:	bf00      	nop
10008930:	3718      	adds	r7, #24
10008932:	46bd      	mov	sp, r7
10008934:	bd80      	pop	{r7, pc}
10008936:	bf00      	nop
10008938:	10021898 	.word	0x10021898
1000893c:	1002189c 	.word	0x1002189c

10008940 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
10008940:	b580      	push	{r7, lr}
10008942:	b082      	sub	sp, #8
10008944:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
10008946:	f7fe f821 	bl	1000698c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
1000894a:	4b15      	ldr	r3, [pc, #84]	; (100089a0 <prvCheckForValidListAndQueue+0x60>)
1000894c:	681b      	ldr	r3, [r3, #0]
1000894e:	2b00      	cmp	r3, #0
10008950:	d120      	bne.n	10008994 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
10008952:	4814      	ldr	r0, [pc, #80]	; (100089a4 <prvCheckForValidListAndQueue+0x64>)
10008954:	f7fd fe42 	bl	100065dc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
10008958:	4813      	ldr	r0, [pc, #76]	; (100089a8 <prvCheckForValidListAndQueue+0x68>)
1000895a:	f7fd fe3f 	bl	100065dc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
1000895e:	4b13      	ldr	r3, [pc, #76]	; (100089ac <prvCheckForValidListAndQueue+0x6c>)
10008960:	4a10      	ldr	r2, [pc, #64]	; (100089a4 <prvCheckForValidListAndQueue+0x64>)
10008962:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
10008964:	4b12      	ldr	r3, [pc, #72]	; (100089b0 <prvCheckForValidListAndQueue+0x70>)
10008966:	4a10      	ldr	r2, [pc, #64]	; (100089a8 <prvCheckForValidListAndQueue+0x68>)
10008968:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
1000896a:	2300      	movs	r3, #0
1000896c:	9300      	str	r3, [sp, #0]
1000896e:	4b11      	ldr	r3, [pc, #68]	; (100089b4 <prvCheckForValidListAndQueue+0x74>)
10008970:	4a11      	ldr	r2, [pc, #68]	; (100089b8 <prvCheckForValidListAndQueue+0x78>)
10008972:	2110      	movs	r1, #16
10008974:	200a      	movs	r0, #10
10008976:	f7fe f98b 	bl	10006c90 <xQueueGenericCreateStatic>
1000897a:	4602      	mov	r2, r0
1000897c:	4b08      	ldr	r3, [pc, #32]	; (100089a0 <prvCheckForValidListAndQueue+0x60>)
1000897e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
10008980:	4b07      	ldr	r3, [pc, #28]	; (100089a0 <prvCheckForValidListAndQueue+0x60>)
10008982:	681b      	ldr	r3, [r3, #0]
10008984:	2b00      	cmp	r3, #0
10008986:	d005      	beq.n	10008994 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
10008988:	4b05      	ldr	r3, [pc, #20]	; (100089a0 <prvCheckForValidListAndQueue+0x60>)
1000898a:	681b      	ldr	r3, [r3, #0]
1000898c:	490b      	ldr	r1, [pc, #44]	; (100089bc <prvCheckForValidListAndQueue+0x7c>)
1000898e:	4618      	mov	r0, r3
10008990:	f7fe fd8e 	bl	100074b0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
10008994:	f7fe f828 	bl	100069e8 <vPortExitCritical>
}
10008998:	bf00      	nop
1000899a:	46bd      	mov	sp, r7
1000899c:	bd80      	pop	{r7, pc}
1000899e:	bf00      	nop
100089a0:	100218a0 	.word	0x100218a0
100089a4:	10021870 	.word	0x10021870
100089a8:	10021884 	.word	0x10021884
100089ac:	10021898 	.word	0x10021898
100089b0:	1002189c 	.word	0x1002189c
100089b4:	1002194c 	.word	0x1002194c
100089b8:	100218ac 	.word	0x100218ac
100089bc:	100093c4 	.word	0x100093c4

100089c0 <__errno>:
100089c0:	4b01      	ldr	r3, [pc, #4]	; (100089c8 <__errno+0x8>)
100089c2:	6818      	ldr	r0, [r3, #0]
100089c4:	4770      	bx	lr
100089c6:	bf00      	nop
100089c8:	10020010 	.word	0x10020010

100089cc <__libc_init_array>:
100089cc:	b570      	push	{r4, r5, r6, lr}
100089ce:	4e0d      	ldr	r6, [pc, #52]	; (10008a04 <__libc_init_array+0x38>)
100089d0:	4c0d      	ldr	r4, [pc, #52]	; (10008a08 <__libc_init_array+0x3c>)
100089d2:	1ba4      	subs	r4, r4, r6
100089d4:	10a4      	asrs	r4, r4, #2
100089d6:	2500      	movs	r5, #0
100089d8:	42a5      	cmp	r5, r4
100089da:	d109      	bne.n	100089f0 <__libc_init_array+0x24>
100089dc:	4e0b      	ldr	r6, [pc, #44]	; (10008a0c <__libc_init_array+0x40>)
100089de:	4c0c      	ldr	r4, [pc, #48]	; (10008a10 <__libc_init_array+0x44>)
100089e0:	f000 fc94 	bl	1000930c <_init>
100089e4:	1ba4      	subs	r4, r4, r6
100089e6:	10a4      	asrs	r4, r4, #2
100089e8:	2500      	movs	r5, #0
100089ea:	42a5      	cmp	r5, r4
100089ec:	d105      	bne.n	100089fa <__libc_init_array+0x2e>
100089ee:	bd70      	pop	{r4, r5, r6, pc}
100089f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
100089f4:	4798      	blx	r3
100089f6:	3501      	adds	r5, #1
100089f8:	e7ee      	b.n	100089d8 <__libc_init_array+0xc>
100089fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
100089fe:	4798      	blx	r3
10008a00:	3501      	adds	r5, #1
10008a02:	e7f2      	b.n	100089ea <__libc_init_array+0x1e>
10008a04:	10009478 	.word	0x10009478
10008a08:	10009478 	.word	0x10009478
10008a0c:	10009478 	.word	0x10009478
10008a10:	1000947c 	.word	0x1000947c

10008a14 <memcpy>:
10008a14:	b510      	push	{r4, lr}
10008a16:	1e43      	subs	r3, r0, #1
10008a18:	440a      	add	r2, r1
10008a1a:	4291      	cmp	r1, r2
10008a1c:	d100      	bne.n	10008a20 <memcpy+0xc>
10008a1e:	bd10      	pop	{r4, pc}
10008a20:	f811 4b01 	ldrb.w	r4, [r1], #1
10008a24:	f803 4f01 	strb.w	r4, [r3, #1]!
10008a28:	e7f7      	b.n	10008a1a <memcpy+0x6>

10008a2a <memset>:
10008a2a:	4402      	add	r2, r0
10008a2c:	4603      	mov	r3, r0
10008a2e:	4293      	cmp	r3, r2
10008a30:	d100      	bne.n	10008a34 <memset+0xa>
10008a32:	4770      	bx	lr
10008a34:	f803 1b01 	strb.w	r1, [r3], #1
10008a38:	e7f9      	b.n	10008a2e <memset+0x4>
	...

10008a3c <_puts_r>:
10008a3c:	b570      	push	{r4, r5, r6, lr}
10008a3e:	460e      	mov	r6, r1
10008a40:	4605      	mov	r5, r0
10008a42:	b118      	cbz	r0, 10008a4c <_puts_r+0x10>
10008a44:	6983      	ldr	r3, [r0, #24]
10008a46:	b90b      	cbnz	r3, 10008a4c <_puts_r+0x10>
10008a48:	f000 fa0c 	bl	10008e64 <__sinit>
10008a4c:	69ab      	ldr	r3, [r5, #24]
10008a4e:	68ac      	ldr	r4, [r5, #8]
10008a50:	b913      	cbnz	r3, 10008a58 <_puts_r+0x1c>
10008a52:	4628      	mov	r0, r5
10008a54:	f000 fa06 	bl	10008e64 <__sinit>
10008a58:	4b23      	ldr	r3, [pc, #140]	; (10008ae8 <_puts_r+0xac>)
10008a5a:	429c      	cmp	r4, r3
10008a5c:	d117      	bne.n	10008a8e <_puts_r+0x52>
10008a5e:	686c      	ldr	r4, [r5, #4]
10008a60:	89a3      	ldrh	r3, [r4, #12]
10008a62:	071b      	lsls	r3, r3, #28
10008a64:	d51d      	bpl.n	10008aa2 <_puts_r+0x66>
10008a66:	6923      	ldr	r3, [r4, #16]
10008a68:	b1db      	cbz	r3, 10008aa2 <_puts_r+0x66>
10008a6a:	3e01      	subs	r6, #1
10008a6c:	68a3      	ldr	r3, [r4, #8]
10008a6e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
10008a72:	3b01      	subs	r3, #1
10008a74:	60a3      	str	r3, [r4, #8]
10008a76:	b9e9      	cbnz	r1, 10008ab4 <_puts_r+0x78>
10008a78:	2b00      	cmp	r3, #0
10008a7a:	da2e      	bge.n	10008ada <_puts_r+0x9e>
10008a7c:	4622      	mov	r2, r4
10008a7e:	210a      	movs	r1, #10
10008a80:	4628      	mov	r0, r5
10008a82:	f000 f83f 	bl	10008b04 <__swbuf_r>
10008a86:	3001      	adds	r0, #1
10008a88:	d011      	beq.n	10008aae <_puts_r+0x72>
10008a8a:	200a      	movs	r0, #10
10008a8c:	e011      	b.n	10008ab2 <_puts_r+0x76>
10008a8e:	4b17      	ldr	r3, [pc, #92]	; (10008aec <_puts_r+0xb0>)
10008a90:	429c      	cmp	r4, r3
10008a92:	d101      	bne.n	10008a98 <_puts_r+0x5c>
10008a94:	68ac      	ldr	r4, [r5, #8]
10008a96:	e7e3      	b.n	10008a60 <_puts_r+0x24>
10008a98:	4b15      	ldr	r3, [pc, #84]	; (10008af0 <_puts_r+0xb4>)
10008a9a:	429c      	cmp	r4, r3
10008a9c:	bf08      	it	eq
10008a9e:	68ec      	ldreq	r4, [r5, #12]
10008aa0:	e7de      	b.n	10008a60 <_puts_r+0x24>
10008aa2:	4621      	mov	r1, r4
10008aa4:	4628      	mov	r0, r5
10008aa6:	f000 f87f 	bl	10008ba8 <__swsetup_r>
10008aaa:	2800      	cmp	r0, #0
10008aac:	d0dd      	beq.n	10008a6a <_puts_r+0x2e>
10008aae:	f04f 30ff 	mov.w	r0, #4294967295
10008ab2:	bd70      	pop	{r4, r5, r6, pc}
10008ab4:	2b00      	cmp	r3, #0
10008ab6:	da04      	bge.n	10008ac2 <_puts_r+0x86>
10008ab8:	69a2      	ldr	r2, [r4, #24]
10008aba:	429a      	cmp	r2, r3
10008abc:	dc06      	bgt.n	10008acc <_puts_r+0x90>
10008abe:	290a      	cmp	r1, #10
10008ac0:	d004      	beq.n	10008acc <_puts_r+0x90>
10008ac2:	6823      	ldr	r3, [r4, #0]
10008ac4:	1c5a      	adds	r2, r3, #1
10008ac6:	6022      	str	r2, [r4, #0]
10008ac8:	7019      	strb	r1, [r3, #0]
10008aca:	e7cf      	b.n	10008a6c <_puts_r+0x30>
10008acc:	4622      	mov	r2, r4
10008ace:	4628      	mov	r0, r5
10008ad0:	f000 f818 	bl	10008b04 <__swbuf_r>
10008ad4:	3001      	adds	r0, #1
10008ad6:	d1c9      	bne.n	10008a6c <_puts_r+0x30>
10008ad8:	e7e9      	b.n	10008aae <_puts_r+0x72>
10008ada:	6823      	ldr	r3, [r4, #0]
10008adc:	200a      	movs	r0, #10
10008ade:	1c5a      	adds	r2, r3, #1
10008ae0:	6022      	str	r2, [r4, #0]
10008ae2:	7018      	strb	r0, [r3, #0]
10008ae4:	e7e5      	b.n	10008ab2 <_puts_r+0x76>
10008ae6:	bf00      	nop
10008ae8:	10009438 	.word	0x10009438
10008aec:	10009458 	.word	0x10009458
10008af0:	10009418 	.word	0x10009418

10008af4 <puts>:
10008af4:	4b02      	ldr	r3, [pc, #8]	; (10008b00 <puts+0xc>)
10008af6:	4601      	mov	r1, r0
10008af8:	6818      	ldr	r0, [r3, #0]
10008afa:	f7ff bf9f 	b.w	10008a3c <_puts_r>
10008afe:	bf00      	nop
10008b00:	10020010 	.word	0x10020010

10008b04 <__swbuf_r>:
10008b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10008b06:	460e      	mov	r6, r1
10008b08:	4614      	mov	r4, r2
10008b0a:	4605      	mov	r5, r0
10008b0c:	b118      	cbz	r0, 10008b16 <__swbuf_r+0x12>
10008b0e:	6983      	ldr	r3, [r0, #24]
10008b10:	b90b      	cbnz	r3, 10008b16 <__swbuf_r+0x12>
10008b12:	f000 f9a7 	bl	10008e64 <__sinit>
10008b16:	4b21      	ldr	r3, [pc, #132]	; (10008b9c <__swbuf_r+0x98>)
10008b18:	429c      	cmp	r4, r3
10008b1a:	d12a      	bne.n	10008b72 <__swbuf_r+0x6e>
10008b1c:	686c      	ldr	r4, [r5, #4]
10008b1e:	69a3      	ldr	r3, [r4, #24]
10008b20:	60a3      	str	r3, [r4, #8]
10008b22:	89a3      	ldrh	r3, [r4, #12]
10008b24:	071a      	lsls	r2, r3, #28
10008b26:	d52e      	bpl.n	10008b86 <__swbuf_r+0x82>
10008b28:	6923      	ldr	r3, [r4, #16]
10008b2a:	b363      	cbz	r3, 10008b86 <__swbuf_r+0x82>
10008b2c:	6923      	ldr	r3, [r4, #16]
10008b2e:	6820      	ldr	r0, [r4, #0]
10008b30:	1ac0      	subs	r0, r0, r3
10008b32:	6963      	ldr	r3, [r4, #20]
10008b34:	b2f6      	uxtb	r6, r6
10008b36:	4283      	cmp	r3, r0
10008b38:	4637      	mov	r7, r6
10008b3a:	dc04      	bgt.n	10008b46 <__swbuf_r+0x42>
10008b3c:	4621      	mov	r1, r4
10008b3e:	4628      	mov	r0, r5
10008b40:	f000 f926 	bl	10008d90 <_fflush_r>
10008b44:	bb28      	cbnz	r0, 10008b92 <__swbuf_r+0x8e>
10008b46:	68a3      	ldr	r3, [r4, #8]
10008b48:	3b01      	subs	r3, #1
10008b4a:	60a3      	str	r3, [r4, #8]
10008b4c:	6823      	ldr	r3, [r4, #0]
10008b4e:	1c5a      	adds	r2, r3, #1
10008b50:	6022      	str	r2, [r4, #0]
10008b52:	701e      	strb	r6, [r3, #0]
10008b54:	6963      	ldr	r3, [r4, #20]
10008b56:	3001      	adds	r0, #1
10008b58:	4283      	cmp	r3, r0
10008b5a:	d004      	beq.n	10008b66 <__swbuf_r+0x62>
10008b5c:	89a3      	ldrh	r3, [r4, #12]
10008b5e:	07db      	lsls	r3, r3, #31
10008b60:	d519      	bpl.n	10008b96 <__swbuf_r+0x92>
10008b62:	2e0a      	cmp	r6, #10
10008b64:	d117      	bne.n	10008b96 <__swbuf_r+0x92>
10008b66:	4621      	mov	r1, r4
10008b68:	4628      	mov	r0, r5
10008b6a:	f000 f911 	bl	10008d90 <_fflush_r>
10008b6e:	b190      	cbz	r0, 10008b96 <__swbuf_r+0x92>
10008b70:	e00f      	b.n	10008b92 <__swbuf_r+0x8e>
10008b72:	4b0b      	ldr	r3, [pc, #44]	; (10008ba0 <__swbuf_r+0x9c>)
10008b74:	429c      	cmp	r4, r3
10008b76:	d101      	bne.n	10008b7c <__swbuf_r+0x78>
10008b78:	68ac      	ldr	r4, [r5, #8]
10008b7a:	e7d0      	b.n	10008b1e <__swbuf_r+0x1a>
10008b7c:	4b09      	ldr	r3, [pc, #36]	; (10008ba4 <__swbuf_r+0xa0>)
10008b7e:	429c      	cmp	r4, r3
10008b80:	bf08      	it	eq
10008b82:	68ec      	ldreq	r4, [r5, #12]
10008b84:	e7cb      	b.n	10008b1e <__swbuf_r+0x1a>
10008b86:	4621      	mov	r1, r4
10008b88:	4628      	mov	r0, r5
10008b8a:	f000 f80d 	bl	10008ba8 <__swsetup_r>
10008b8e:	2800      	cmp	r0, #0
10008b90:	d0cc      	beq.n	10008b2c <__swbuf_r+0x28>
10008b92:	f04f 37ff 	mov.w	r7, #4294967295
10008b96:	4638      	mov	r0, r7
10008b98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10008b9a:	bf00      	nop
10008b9c:	10009438 	.word	0x10009438
10008ba0:	10009458 	.word	0x10009458
10008ba4:	10009418 	.word	0x10009418

10008ba8 <__swsetup_r>:
10008ba8:	4b32      	ldr	r3, [pc, #200]	; (10008c74 <__swsetup_r+0xcc>)
10008baa:	b570      	push	{r4, r5, r6, lr}
10008bac:	681d      	ldr	r5, [r3, #0]
10008bae:	4606      	mov	r6, r0
10008bb0:	460c      	mov	r4, r1
10008bb2:	b125      	cbz	r5, 10008bbe <__swsetup_r+0x16>
10008bb4:	69ab      	ldr	r3, [r5, #24]
10008bb6:	b913      	cbnz	r3, 10008bbe <__swsetup_r+0x16>
10008bb8:	4628      	mov	r0, r5
10008bba:	f000 f953 	bl	10008e64 <__sinit>
10008bbe:	4b2e      	ldr	r3, [pc, #184]	; (10008c78 <__swsetup_r+0xd0>)
10008bc0:	429c      	cmp	r4, r3
10008bc2:	d10f      	bne.n	10008be4 <__swsetup_r+0x3c>
10008bc4:	686c      	ldr	r4, [r5, #4]
10008bc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
10008bca:	b29a      	uxth	r2, r3
10008bcc:	0715      	lsls	r5, r2, #28
10008bce:	d42c      	bmi.n	10008c2a <__swsetup_r+0x82>
10008bd0:	06d0      	lsls	r0, r2, #27
10008bd2:	d411      	bmi.n	10008bf8 <__swsetup_r+0x50>
10008bd4:	2209      	movs	r2, #9
10008bd6:	6032      	str	r2, [r6, #0]
10008bd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10008bdc:	81a3      	strh	r3, [r4, #12]
10008bde:	f04f 30ff 	mov.w	r0, #4294967295
10008be2:	e03e      	b.n	10008c62 <__swsetup_r+0xba>
10008be4:	4b25      	ldr	r3, [pc, #148]	; (10008c7c <__swsetup_r+0xd4>)
10008be6:	429c      	cmp	r4, r3
10008be8:	d101      	bne.n	10008bee <__swsetup_r+0x46>
10008bea:	68ac      	ldr	r4, [r5, #8]
10008bec:	e7eb      	b.n	10008bc6 <__swsetup_r+0x1e>
10008bee:	4b24      	ldr	r3, [pc, #144]	; (10008c80 <__swsetup_r+0xd8>)
10008bf0:	429c      	cmp	r4, r3
10008bf2:	bf08      	it	eq
10008bf4:	68ec      	ldreq	r4, [r5, #12]
10008bf6:	e7e6      	b.n	10008bc6 <__swsetup_r+0x1e>
10008bf8:	0751      	lsls	r1, r2, #29
10008bfa:	d512      	bpl.n	10008c22 <__swsetup_r+0x7a>
10008bfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
10008bfe:	b141      	cbz	r1, 10008c12 <__swsetup_r+0x6a>
10008c00:	f104 0344 	add.w	r3, r4, #68	; 0x44
10008c04:	4299      	cmp	r1, r3
10008c06:	d002      	beq.n	10008c0e <__swsetup_r+0x66>
10008c08:	4630      	mov	r0, r6
10008c0a:	f000 fa19 	bl	10009040 <_free_r>
10008c0e:	2300      	movs	r3, #0
10008c10:	6363      	str	r3, [r4, #52]	; 0x34
10008c12:	89a3      	ldrh	r3, [r4, #12]
10008c14:	f023 0324 	bic.w	r3, r3, #36	; 0x24
10008c18:	81a3      	strh	r3, [r4, #12]
10008c1a:	2300      	movs	r3, #0
10008c1c:	6063      	str	r3, [r4, #4]
10008c1e:	6923      	ldr	r3, [r4, #16]
10008c20:	6023      	str	r3, [r4, #0]
10008c22:	89a3      	ldrh	r3, [r4, #12]
10008c24:	f043 0308 	orr.w	r3, r3, #8
10008c28:	81a3      	strh	r3, [r4, #12]
10008c2a:	6923      	ldr	r3, [r4, #16]
10008c2c:	b94b      	cbnz	r3, 10008c42 <__swsetup_r+0x9a>
10008c2e:	89a3      	ldrh	r3, [r4, #12]
10008c30:	f403 7320 	and.w	r3, r3, #640	; 0x280
10008c34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
10008c38:	d003      	beq.n	10008c42 <__swsetup_r+0x9a>
10008c3a:	4621      	mov	r1, r4
10008c3c:	4630      	mov	r0, r6
10008c3e:	f000 f9bf 	bl	10008fc0 <__smakebuf_r>
10008c42:	89a2      	ldrh	r2, [r4, #12]
10008c44:	f012 0301 	ands.w	r3, r2, #1
10008c48:	d00c      	beq.n	10008c64 <__swsetup_r+0xbc>
10008c4a:	2300      	movs	r3, #0
10008c4c:	60a3      	str	r3, [r4, #8]
10008c4e:	6963      	ldr	r3, [r4, #20]
10008c50:	425b      	negs	r3, r3
10008c52:	61a3      	str	r3, [r4, #24]
10008c54:	6923      	ldr	r3, [r4, #16]
10008c56:	b953      	cbnz	r3, 10008c6e <__swsetup_r+0xc6>
10008c58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
10008c5c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
10008c60:	d1ba      	bne.n	10008bd8 <__swsetup_r+0x30>
10008c62:	bd70      	pop	{r4, r5, r6, pc}
10008c64:	0792      	lsls	r2, r2, #30
10008c66:	bf58      	it	pl
10008c68:	6963      	ldrpl	r3, [r4, #20]
10008c6a:	60a3      	str	r3, [r4, #8]
10008c6c:	e7f2      	b.n	10008c54 <__swsetup_r+0xac>
10008c6e:	2000      	movs	r0, #0
10008c70:	e7f7      	b.n	10008c62 <__swsetup_r+0xba>
10008c72:	bf00      	nop
10008c74:	10020010 	.word	0x10020010
10008c78:	10009438 	.word	0x10009438
10008c7c:	10009458 	.word	0x10009458
10008c80:	10009418 	.word	0x10009418

10008c84 <__sflush_r>:
10008c84:	898a      	ldrh	r2, [r1, #12]
10008c86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
10008c8a:	4605      	mov	r5, r0
10008c8c:	0710      	lsls	r0, r2, #28
10008c8e:	460c      	mov	r4, r1
10008c90:	d458      	bmi.n	10008d44 <__sflush_r+0xc0>
10008c92:	684b      	ldr	r3, [r1, #4]
10008c94:	2b00      	cmp	r3, #0
10008c96:	dc05      	bgt.n	10008ca4 <__sflush_r+0x20>
10008c98:	6c0b      	ldr	r3, [r1, #64]	; 0x40
10008c9a:	2b00      	cmp	r3, #0
10008c9c:	dc02      	bgt.n	10008ca4 <__sflush_r+0x20>
10008c9e:	2000      	movs	r0, #0
10008ca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
10008ca4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
10008ca6:	2e00      	cmp	r6, #0
10008ca8:	d0f9      	beq.n	10008c9e <__sflush_r+0x1a>
10008caa:	2300      	movs	r3, #0
10008cac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
10008cb0:	682f      	ldr	r7, [r5, #0]
10008cb2:	6a21      	ldr	r1, [r4, #32]
10008cb4:	602b      	str	r3, [r5, #0]
10008cb6:	d032      	beq.n	10008d1e <__sflush_r+0x9a>
10008cb8:	6d60      	ldr	r0, [r4, #84]	; 0x54
10008cba:	89a3      	ldrh	r3, [r4, #12]
10008cbc:	075a      	lsls	r2, r3, #29
10008cbe:	d505      	bpl.n	10008ccc <__sflush_r+0x48>
10008cc0:	6863      	ldr	r3, [r4, #4]
10008cc2:	1ac0      	subs	r0, r0, r3
10008cc4:	6b63      	ldr	r3, [r4, #52]	; 0x34
10008cc6:	b10b      	cbz	r3, 10008ccc <__sflush_r+0x48>
10008cc8:	6c23      	ldr	r3, [r4, #64]	; 0x40
10008cca:	1ac0      	subs	r0, r0, r3
10008ccc:	2300      	movs	r3, #0
10008cce:	4602      	mov	r2, r0
10008cd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
10008cd2:	6a21      	ldr	r1, [r4, #32]
10008cd4:	4628      	mov	r0, r5
10008cd6:	47b0      	blx	r6
10008cd8:	1c43      	adds	r3, r0, #1
10008cda:	89a3      	ldrh	r3, [r4, #12]
10008cdc:	d106      	bne.n	10008cec <__sflush_r+0x68>
10008cde:	6829      	ldr	r1, [r5, #0]
10008ce0:	291d      	cmp	r1, #29
10008ce2:	d848      	bhi.n	10008d76 <__sflush_r+0xf2>
10008ce4:	4a29      	ldr	r2, [pc, #164]	; (10008d8c <__sflush_r+0x108>)
10008ce6:	40ca      	lsrs	r2, r1
10008ce8:	07d6      	lsls	r6, r2, #31
10008cea:	d544      	bpl.n	10008d76 <__sflush_r+0xf2>
10008cec:	2200      	movs	r2, #0
10008cee:	6062      	str	r2, [r4, #4]
10008cf0:	04d9      	lsls	r1, r3, #19
10008cf2:	6922      	ldr	r2, [r4, #16]
10008cf4:	6022      	str	r2, [r4, #0]
10008cf6:	d504      	bpl.n	10008d02 <__sflush_r+0x7e>
10008cf8:	1c42      	adds	r2, r0, #1
10008cfa:	d101      	bne.n	10008d00 <__sflush_r+0x7c>
10008cfc:	682b      	ldr	r3, [r5, #0]
10008cfe:	b903      	cbnz	r3, 10008d02 <__sflush_r+0x7e>
10008d00:	6560      	str	r0, [r4, #84]	; 0x54
10008d02:	6b61      	ldr	r1, [r4, #52]	; 0x34
10008d04:	602f      	str	r7, [r5, #0]
10008d06:	2900      	cmp	r1, #0
10008d08:	d0c9      	beq.n	10008c9e <__sflush_r+0x1a>
10008d0a:	f104 0344 	add.w	r3, r4, #68	; 0x44
10008d0e:	4299      	cmp	r1, r3
10008d10:	d002      	beq.n	10008d18 <__sflush_r+0x94>
10008d12:	4628      	mov	r0, r5
10008d14:	f000 f994 	bl	10009040 <_free_r>
10008d18:	2000      	movs	r0, #0
10008d1a:	6360      	str	r0, [r4, #52]	; 0x34
10008d1c:	e7c0      	b.n	10008ca0 <__sflush_r+0x1c>
10008d1e:	2301      	movs	r3, #1
10008d20:	4628      	mov	r0, r5
10008d22:	47b0      	blx	r6
10008d24:	1c41      	adds	r1, r0, #1
10008d26:	d1c8      	bne.n	10008cba <__sflush_r+0x36>
10008d28:	682b      	ldr	r3, [r5, #0]
10008d2a:	2b00      	cmp	r3, #0
10008d2c:	d0c5      	beq.n	10008cba <__sflush_r+0x36>
10008d2e:	2b1d      	cmp	r3, #29
10008d30:	d001      	beq.n	10008d36 <__sflush_r+0xb2>
10008d32:	2b16      	cmp	r3, #22
10008d34:	d101      	bne.n	10008d3a <__sflush_r+0xb6>
10008d36:	602f      	str	r7, [r5, #0]
10008d38:	e7b1      	b.n	10008c9e <__sflush_r+0x1a>
10008d3a:	89a3      	ldrh	r3, [r4, #12]
10008d3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10008d40:	81a3      	strh	r3, [r4, #12]
10008d42:	e7ad      	b.n	10008ca0 <__sflush_r+0x1c>
10008d44:	690f      	ldr	r7, [r1, #16]
10008d46:	2f00      	cmp	r7, #0
10008d48:	d0a9      	beq.n	10008c9e <__sflush_r+0x1a>
10008d4a:	0793      	lsls	r3, r2, #30
10008d4c:	680e      	ldr	r6, [r1, #0]
10008d4e:	bf08      	it	eq
10008d50:	694b      	ldreq	r3, [r1, #20]
10008d52:	600f      	str	r7, [r1, #0]
10008d54:	bf18      	it	ne
10008d56:	2300      	movne	r3, #0
10008d58:	eba6 0807 	sub.w	r8, r6, r7
10008d5c:	608b      	str	r3, [r1, #8]
10008d5e:	f1b8 0f00 	cmp.w	r8, #0
10008d62:	dd9c      	ble.n	10008c9e <__sflush_r+0x1a>
10008d64:	4643      	mov	r3, r8
10008d66:	463a      	mov	r2, r7
10008d68:	6a21      	ldr	r1, [r4, #32]
10008d6a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
10008d6c:	4628      	mov	r0, r5
10008d6e:	47b0      	blx	r6
10008d70:	2800      	cmp	r0, #0
10008d72:	dc06      	bgt.n	10008d82 <__sflush_r+0xfe>
10008d74:	89a3      	ldrh	r3, [r4, #12]
10008d76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10008d7a:	81a3      	strh	r3, [r4, #12]
10008d7c:	f04f 30ff 	mov.w	r0, #4294967295
10008d80:	e78e      	b.n	10008ca0 <__sflush_r+0x1c>
10008d82:	4407      	add	r7, r0
10008d84:	eba8 0800 	sub.w	r8, r8, r0
10008d88:	e7e9      	b.n	10008d5e <__sflush_r+0xda>
10008d8a:	bf00      	nop
10008d8c:	20400001 	.word	0x20400001

10008d90 <_fflush_r>:
10008d90:	b538      	push	{r3, r4, r5, lr}
10008d92:	690b      	ldr	r3, [r1, #16]
10008d94:	4605      	mov	r5, r0
10008d96:	460c      	mov	r4, r1
10008d98:	b1db      	cbz	r3, 10008dd2 <_fflush_r+0x42>
10008d9a:	b118      	cbz	r0, 10008da4 <_fflush_r+0x14>
10008d9c:	6983      	ldr	r3, [r0, #24]
10008d9e:	b90b      	cbnz	r3, 10008da4 <_fflush_r+0x14>
10008da0:	f000 f860 	bl	10008e64 <__sinit>
10008da4:	4b0c      	ldr	r3, [pc, #48]	; (10008dd8 <_fflush_r+0x48>)
10008da6:	429c      	cmp	r4, r3
10008da8:	d109      	bne.n	10008dbe <_fflush_r+0x2e>
10008daa:	686c      	ldr	r4, [r5, #4]
10008dac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
10008db0:	b17b      	cbz	r3, 10008dd2 <_fflush_r+0x42>
10008db2:	4621      	mov	r1, r4
10008db4:	4628      	mov	r0, r5
10008db6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
10008dba:	f7ff bf63 	b.w	10008c84 <__sflush_r>
10008dbe:	4b07      	ldr	r3, [pc, #28]	; (10008ddc <_fflush_r+0x4c>)
10008dc0:	429c      	cmp	r4, r3
10008dc2:	d101      	bne.n	10008dc8 <_fflush_r+0x38>
10008dc4:	68ac      	ldr	r4, [r5, #8]
10008dc6:	e7f1      	b.n	10008dac <_fflush_r+0x1c>
10008dc8:	4b05      	ldr	r3, [pc, #20]	; (10008de0 <_fflush_r+0x50>)
10008dca:	429c      	cmp	r4, r3
10008dcc:	bf08      	it	eq
10008dce:	68ec      	ldreq	r4, [r5, #12]
10008dd0:	e7ec      	b.n	10008dac <_fflush_r+0x1c>
10008dd2:	2000      	movs	r0, #0
10008dd4:	bd38      	pop	{r3, r4, r5, pc}
10008dd6:	bf00      	nop
10008dd8:	10009438 	.word	0x10009438
10008ddc:	10009458 	.word	0x10009458
10008de0:	10009418 	.word	0x10009418

10008de4 <std>:
10008de4:	2300      	movs	r3, #0
10008de6:	b510      	push	{r4, lr}
10008de8:	4604      	mov	r4, r0
10008dea:	e9c0 3300 	strd	r3, r3, [r0]
10008dee:	6083      	str	r3, [r0, #8]
10008df0:	8181      	strh	r1, [r0, #12]
10008df2:	6643      	str	r3, [r0, #100]	; 0x64
10008df4:	81c2      	strh	r2, [r0, #14]
10008df6:	e9c0 3304 	strd	r3, r3, [r0, #16]
10008dfa:	6183      	str	r3, [r0, #24]
10008dfc:	4619      	mov	r1, r3
10008dfe:	2208      	movs	r2, #8
10008e00:	305c      	adds	r0, #92	; 0x5c
10008e02:	f7ff fe12 	bl	10008a2a <memset>
10008e06:	4b05      	ldr	r3, [pc, #20]	; (10008e1c <std+0x38>)
10008e08:	6263      	str	r3, [r4, #36]	; 0x24
10008e0a:	4b05      	ldr	r3, [pc, #20]	; (10008e20 <std+0x3c>)
10008e0c:	62a3      	str	r3, [r4, #40]	; 0x28
10008e0e:	4b05      	ldr	r3, [pc, #20]	; (10008e24 <std+0x40>)
10008e10:	62e3      	str	r3, [r4, #44]	; 0x2c
10008e12:	4b05      	ldr	r3, [pc, #20]	; (10008e28 <std+0x44>)
10008e14:	6224      	str	r4, [r4, #32]
10008e16:	6323      	str	r3, [r4, #48]	; 0x30
10008e18:	bd10      	pop	{r4, pc}
10008e1a:	bf00      	nop
10008e1c:	100091b1 	.word	0x100091b1
10008e20:	100091d3 	.word	0x100091d3
10008e24:	1000920b 	.word	0x1000920b
10008e28:	1000922f 	.word	0x1000922f

10008e2c <_cleanup_r>:
10008e2c:	4901      	ldr	r1, [pc, #4]	; (10008e34 <_cleanup_r+0x8>)
10008e2e:	f000 b885 	b.w	10008f3c <_fwalk_reent>
10008e32:	bf00      	nop
10008e34:	10008d91 	.word	0x10008d91

10008e38 <__sfmoreglue>:
10008e38:	b570      	push	{r4, r5, r6, lr}
10008e3a:	1e4a      	subs	r2, r1, #1
10008e3c:	2568      	movs	r5, #104	; 0x68
10008e3e:	4355      	muls	r5, r2
10008e40:	460e      	mov	r6, r1
10008e42:	f105 0174 	add.w	r1, r5, #116	; 0x74
10008e46:	f000 f949 	bl	100090dc <_malloc_r>
10008e4a:	4604      	mov	r4, r0
10008e4c:	b140      	cbz	r0, 10008e60 <__sfmoreglue+0x28>
10008e4e:	2100      	movs	r1, #0
10008e50:	e9c0 1600 	strd	r1, r6, [r0]
10008e54:	300c      	adds	r0, #12
10008e56:	60a0      	str	r0, [r4, #8]
10008e58:	f105 0268 	add.w	r2, r5, #104	; 0x68
10008e5c:	f7ff fde5 	bl	10008a2a <memset>
10008e60:	4620      	mov	r0, r4
10008e62:	bd70      	pop	{r4, r5, r6, pc}

10008e64 <__sinit>:
10008e64:	6983      	ldr	r3, [r0, #24]
10008e66:	b510      	push	{r4, lr}
10008e68:	4604      	mov	r4, r0
10008e6a:	bb33      	cbnz	r3, 10008eba <__sinit+0x56>
10008e6c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
10008e70:	6503      	str	r3, [r0, #80]	; 0x50
10008e72:	4b12      	ldr	r3, [pc, #72]	; (10008ebc <__sinit+0x58>)
10008e74:	4a12      	ldr	r2, [pc, #72]	; (10008ec0 <__sinit+0x5c>)
10008e76:	681b      	ldr	r3, [r3, #0]
10008e78:	6282      	str	r2, [r0, #40]	; 0x28
10008e7a:	4298      	cmp	r0, r3
10008e7c:	bf04      	itt	eq
10008e7e:	2301      	moveq	r3, #1
10008e80:	6183      	streq	r3, [r0, #24]
10008e82:	f000 f81f 	bl	10008ec4 <__sfp>
10008e86:	6060      	str	r0, [r4, #4]
10008e88:	4620      	mov	r0, r4
10008e8a:	f000 f81b 	bl	10008ec4 <__sfp>
10008e8e:	60a0      	str	r0, [r4, #8]
10008e90:	4620      	mov	r0, r4
10008e92:	f000 f817 	bl	10008ec4 <__sfp>
10008e96:	2200      	movs	r2, #0
10008e98:	60e0      	str	r0, [r4, #12]
10008e9a:	2104      	movs	r1, #4
10008e9c:	6860      	ldr	r0, [r4, #4]
10008e9e:	f7ff ffa1 	bl	10008de4 <std>
10008ea2:	2201      	movs	r2, #1
10008ea4:	2109      	movs	r1, #9
10008ea6:	68a0      	ldr	r0, [r4, #8]
10008ea8:	f7ff ff9c 	bl	10008de4 <std>
10008eac:	2202      	movs	r2, #2
10008eae:	2112      	movs	r1, #18
10008eb0:	68e0      	ldr	r0, [r4, #12]
10008eb2:	f7ff ff97 	bl	10008de4 <std>
10008eb6:	2301      	movs	r3, #1
10008eb8:	61a3      	str	r3, [r4, #24]
10008eba:	bd10      	pop	{r4, pc}
10008ebc:	10009414 	.word	0x10009414
10008ec0:	10008e2d 	.word	0x10008e2d

10008ec4 <__sfp>:
10008ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10008ec6:	4b1b      	ldr	r3, [pc, #108]	; (10008f34 <__sfp+0x70>)
10008ec8:	681e      	ldr	r6, [r3, #0]
10008eca:	69b3      	ldr	r3, [r6, #24]
10008ecc:	4607      	mov	r7, r0
10008ece:	b913      	cbnz	r3, 10008ed6 <__sfp+0x12>
10008ed0:	4630      	mov	r0, r6
10008ed2:	f7ff ffc7 	bl	10008e64 <__sinit>
10008ed6:	3648      	adds	r6, #72	; 0x48
10008ed8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
10008edc:	3b01      	subs	r3, #1
10008ede:	d503      	bpl.n	10008ee8 <__sfp+0x24>
10008ee0:	6833      	ldr	r3, [r6, #0]
10008ee2:	b133      	cbz	r3, 10008ef2 <__sfp+0x2e>
10008ee4:	6836      	ldr	r6, [r6, #0]
10008ee6:	e7f7      	b.n	10008ed8 <__sfp+0x14>
10008ee8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
10008eec:	b16d      	cbz	r5, 10008f0a <__sfp+0x46>
10008eee:	3468      	adds	r4, #104	; 0x68
10008ef0:	e7f4      	b.n	10008edc <__sfp+0x18>
10008ef2:	2104      	movs	r1, #4
10008ef4:	4638      	mov	r0, r7
10008ef6:	f7ff ff9f 	bl	10008e38 <__sfmoreglue>
10008efa:	6030      	str	r0, [r6, #0]
10008efc:	2800      	cmp	r0, #0
10008efe:	d1f1      	bne.n	10008ee4 <__sfp+0x20>
10008f00:	230c      	movs	r3, #12
10008f02:	603b      	str	r3, [r7, #0]
10008f04:	4604      	mov	r4, r0
10008f06:	4620      	mov	r0, r4
10008f08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10008f0a:	4b0b      	ldr	r3, [pc, #44]	; (10008f38 <__sfp+0x74>)
10008f0c:	6665      	str	r5, [r4, #100]	; 0x64
10008f0e:	e9c4 5500 	strd	r5, r5, [r4]
10008f12:	60a5      	str	r5, [r4, #8]
10008f14:	e9c4 3503 	strd	r3, r5, [r4, #12]
10008f18:	e9c4 5505 	strd	r5, r5, [r4, #20]
10008f1c:	2208      	movs	r2, #8
10008f1e:	4629      	mov	r1, r5
10008f20:	f104 005c 	add.w	r0, r4, #92	; 0x5c
10008f24:	f7ff fd81 	bl	10008a2a <memset>
10008f28:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
10008f2c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
10008f30:	e7e9      	b.n	10008f06 <__sfp+0x42>
10008f32:	bf00      	nop
10008f34:	10009414 	.word	0x10009414
10008f38:	ffff0001 	.word	0xffff0001

10008f3c <_fwalk_reent>:
10008f3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
10008f40:	4680      	mov	r8, r0
10008f42:	4689      	mov	r9, r1
10008f44:	f100 0448 	add.w	r4, r0, #72	; 0x48
10008f48:	2600      	movs	r6, #0
10008f4a:	b914      	cbnz	r4, 10008f52 <_fwalk_reent+0x16>
10008f4c:	4630      	mov	r0, r6
10008f4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
10008f52:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
10008f56:	3f01      	subs	r7, #1
10008f58:	d501      	bpl.n	10008f5e <_fwalk_reent+0x22>
10008f5a:	6824      	ldr	r4, [r4, #0]
10008f5c:	e7f5      	b.n	10008f4a <_fwalk_reent+0xe>
10008f5e:	89ab      	ldrh	r3, [r5, #12]
10008f60:	2b01      	cmp	r3, #1
10008f62:	d907      	bls.n	10008f74 <_fwalk_reent+0x38>
10008f64:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
10008f68:	3301      	adds	r3, #1
10008f6a:	d003      	beq.n	10008f74 <_fwalk_reent+0x38>
10008f6c:	4629      	mov	r1, r5
10008f6e:	4640      	mov	r0, r8
10008f70:	47c8      	blx	r9
10008f72:	4306      	orrs	r6, r0
10008f74:	3568      	adds	r5, #104	; 0x68
10008f76:	e7ee      	b.n	10008f56 <_fwalk_reent+0x1a>

10008f78 <__swhatbuf_r>:
10008f78:	b570      	push	{r4, r5, r6, lr}
10008f7a:	460e      	mov	r6, r1
10008f7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
10008f80:	2900      	cmp	r1, #0
10008f82:	b096      	sub	sp, #88	; 0x58
10008f84:	4614      	mov	r4, r2
10008f86:	461d      	mov	r5, r3
10008f88:	da07      	bge.n	10008f9a <__swhatbuf_r+0x22>
10008f8a:	2300      	movs	r3, #0
10008f8c:	602b      	str	r3, [r5, #0]
10008f8e:	89b3      	ldrh	r3, [r6, #12]
10008f90:	061a      	lsls	r2, r3, #24
10008f92:	d410      	bmi.n	10008fb6 <__swhatbuf_r+0x3e>
10008f94:	f44f 6380 	mov.w	r3, #1024	; 0x400
10008f98:	e00e      	b.n	10008fb8 <__swhatbuf_r+0x40>
10008f9a:	466a      	mov	r2, sp
10008f9c:	f000 f96e 	bl	1000927c <_fstat_r>
10008fa0:	2800      	cmp	r0, #0
10008fa2:	dbf2      	blt.n	10008f8a <__swhatbuf_r+0x12>
10008fa4:	9a01      	ldr	r2, [sp, #4]
10008fa6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
10008faa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
10008fae:	425a      	negs	r2, r3
10008fb0:	415a      	adcs	r2, r3
10008fb2:	602a      	str	r2, [r5, #0]
10008fb4:	e7ee      	b.n	10008f94 <__swhatbuf_r+0x1c>
10008fb6:	2340      	movs	r3, #64	; 0x40
10008fb8:	2000      	movs	r0, #0
10008fba:	6023      	str	r3, [r4, #0]
10008fbc:	b016      	add	sp, #88	; 0x58
10008fbe:	bd70      	pop	{r4, r5, r6, pc}

10008fc0 <__smakebuf_r>:
10008fc0:	898b      	ldrh	r3, [r1, #12]
10008fc2:	b573      	push	{r0, r1, r4, r5, r6, lr}
10008fc4:	079d      	lsls	r5, r3, #30
10008fc6:	4606      	mov	r6, r0
10008fc8:	460c      	mov	r4, r1
10008fca:	d507      	bpl.n	10008fdc <__smakebuf_r+0x1c>
10008fcc:	f104 0347 	add.w	r3, r4, #71	; 0x47
10008fd0:	6023      	str	r3, [r4, #0]
10008fd2:	6123      	str	r3, [r4, #16]
10008fd4:	2301      	movs	r3, #1
10008fd6:	6163      	str	r3, [r4, #20]
10008fd8:	b002      	add	sp, #8
10008fda:	bd70      	pop	{r4, r5, r6, pc}
10008fdc:	ab01      	add	r3, sp, #4
10008fde:	466a      	mov	r2, sp
10008fe0:	f7ff ffca 	bl	10008f78 <__swhatbuf_r>
10008fe4:	9900      	ldr	r1, [sp, #0]
10008fe6:	4605      	mov	r5, r0
10008fe8:	4630      	mov	r0, r6
10008fea:	f000 f877 	bl	100090dc <_malloc_r>
10008fee:	b948      	cbnz	r0, 10009004 <__smakebuf_r+0x44>
10008ff0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
10008ff4:	059a      	lsls	r2, r3, #22
10008ff6:	d4ef      	bmi.n	10008fd8 <__smakebuf_r+0x18>
10008ff8:	f023 0303 	bic.w	r3, r3, #3
10008ffc:	f043 0302 	orr.w	r3, r3, #2
10009000:	81a3      	strh	r3, [r4, #12]
10009002:	e7e3      	b.n	10008fcc <__smakebuf_r+0xc>
10009004:	4b0d      	ldr	r3, [pc, #52]	; (1000903c <__smakebuf_r+0x7c>)
10009006:	62b3      	str	r3, [r6, #40]	; 0x28
10009008:	89a3      	ldrh	r3, [r4, #12]
1000900a:	6020      	str	r0, [r4, #0]
1000900c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
10009010:	81a3      	strh	r3, [r4, #12]
10009012:	9b00      	ldr	r3, [sp, #0]
10009014:	6163      	str	r3, [r4, #20]
10009016:	9b01      	ldr	r3, [sp, #4]
10009018:	6120      	str	r0, [r4, #16]
1000901a:	b15b      	cbz	r3, 10009034 <__smakebuf_r+0x74>
1000901c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
10009020:	4630      	mov	r0, r6
10009022:	f000 f93d 	bl	100092a0 <_isatty_r>
10009026:	b128      	cbz	r0, 10009034 <__smakebuf_r+0x74>
10009028:	89a3      	ldrh	r3, [r4, #12]
1000902a:	f023 0303 	bic.w	r3, r3, #3
1000902e:	f043 0301 	orr.w	r3, r3, #1
10009032:	81a3      	strh	r3, [r4, #12]
10009034:	89a3      	ldrh	r3, [r4, #12]
10009036:	431d      	orrs	r5, r3
10009038:	81a5      	strh	r5, [r4, #12]
1000903a:	e7cd      	b.n	10008fd8 <__smakebuf_r+0x18>
1000903c:	10008e2d 	.word	0x10008e2d

10009040 <_free_r>:
10009040:	b538      	push	{r3, r4, r5, lr}
10009042:	4605      	mov	r5, r0
10009044:	2900      	cmp	r1, #0
10009046:	d045      	beq.n	100090d4 <_free_r+0x94>
10009048:	f851 3c04 	ldr.w	r3, [r1, #-4]
1000904c:	1f0c      	subs	r4, r1, #4
1000904e:	2b00      	cmp	r3, #0
10009050:	bfb8      	it	lt
10009052:	18e4      	addlt	r4, r4, r3
10009054:	f000 f946 	bl	100092e4 <__malloc_lock>
10009058:	4a1f      	ldr	r2, [pc, #124]	; (100090d8 <_free_r+0x98>)
1000905a:	6813      	ldr	r3, [r2, #0]
1000905c:	4610      	mov	r0, r2
1000905e:	b933      	cbnz	r3, 1000906e <_free_r+0x2e>
10009060:	6063      	str	r3, [r4, #4]
10009062:	6014      	str	r4, [r2, #0]
10009064:	4628      	mov	r0, r5
10009066:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1000906a:	f000 b93c 	b.w	100092e6 <__malloc_unlock>
1000906e:	42a3      	cmp	r3, r4
10009070:	d90c      	bls.n	1000908c <_free_r+0x4c>
10009072:	6821      	ldr	r1, [r4, #0]
10009074:	1862      	adds	r2, r4, r1
10009076:	4293      	cmp	r3, r2
10009078:	bf04      	itt	eq
1000907a:	681a      	ldreq	r2, [r3, #0]
1000907c:	685b      	ldreq	r3, [r3, #4]
1000907e:	6063      	str	r3, [r4, #4]
10009080:	bf04      	itt	eq
10009082:	1852      	addeq	r2, r2, r1
10009084:	6022      	streq	r2, [r4, #0]
10009086:	6004      	str	r4, [r0, #0]
10009088:	e7ec      	b.n	10009064 <_free_r+0x24>
1000908a:	4613      	mov	r3, r2
1000908c:	685a      	ldr	r2, [r3, #4]
1000908e:	b10a      	cbz	r2, 10009094 <_free_r+0x54>
10009090:	42a2      	cmp	r2, r4
10009092:	d9fa      	bls.n	1000908a <_free_r+0x4a>
10009094:	6819      	ldr	r1, [r3, #0]
10009096:	1858      	adds	r0, r3, r1
10009098:	42a0      	cmp	r0, r4
1000909a:	d10b      	bne.n	100090b4 <_free_r+0x74>
1000909c:	6820      	ldr	r0, [r4, #0]
1000909e:	4401      	add	r1, r0
100090a0:	1858      	adds	r0, r3, r1
100090a2:	4282      	cmp	r2, r0
100090a4:	6019      	str	r1, [r3, #0]
100090a6:	d1dd      	bne.n	10009064 <_free_r+0x24>
100090a8:	6810      	ldr	r0, [r2, #0]
100090aa:	6852      	ldr	r2, [r2, #4]
100090ac:	605a      	str	r2, [r3, #4]
100090ae:	4401      	add	r1, r0
100090b0:	6019      	str	r1, [r3, #0]
100090b2:	e7d7      	b.n	10009064 <_free_r+0x24>
100090b4:	d902      	bls.n	100090bc <_free_r+0x7c>
100090b6:	230c      	movs	r3, #12
100090b8:	602b      	str	r3, [r5, #0]
100090ba:	e7d3      	b.n	10009064 <_free_r+0x24>
100090bc:	6820      	ldr	r0, [r4, #0]
100090be:	1821      	adds	r1, r4, r0
100090c0:	428a      	cmp	r2, r1
100090c2:	bf04      	itt	eq
100090c4:	6811      	ldreq	r1, [r2, #0]
100090c6:	6852      	ldreq	r2, [r2, #4]
100090c8:	6062      	str	r2, [r4, #4]
100090ca:	bf04      	itt	eq
100090cc:	1809      	addeq	r1, r1, r0
100090ce:	6021      	streq	r1, [r4, #0]
100090d0:	605c      	str	r4, [r3, #4]
100090d2:	e7c7      	b.n	10009064 <_free_r+0x24>
100090d4:	bd38      	pop	{r3, r4, r5, pc}
100090d6:	bf00      	nop
100090d8:	1002199c 	.word	0x1002199c

100090dc <_malloc_r>:
100090dc:	b570      	push	{r4, r5, r6, lr}
100090de:	1ccd      	adds	r5, r1, #3
100090e0:	f025 0503 	bic.w	r5, r5, #3
100090e4:	3508      	adds	r5, #8
100090e6:	2d0c      	cmp	r5, #12
100090e8:	bf38      	it	cc
100090ea:	250c      	movcc	r5, #12
100090ec:	2d00      	cmp	r5, #0
100090ee:	4606      	mov	r6, r0
100090f0:	db01      	blt.n	100090f6 <_malloc_r+0x1a>
100090f2:	42a9      	cmp	r1, r5
100090f4:	d903      	bls.n	100090fe <_malloc_r+0x22>
100090f6:	230c      	movs	r3, #12
100090f8:	6033      	str	r3, [r6, #0]
100090fa:	2000      	movs	r0, #0
100090fc:	bd70      	pop	{r4, r5, r6, pc}
100090fe:	f000 f8f1 	bl	100092e4 <__malloc_lock>
10009102:	4a21      	ldr	r2, [pc, #132]	; (10009188 <_malloc_r+0xac>)
10009104:	6814      	ldr	r4, [r2, #0]
10009106:	4621      	mov	r1, r4
10009108:	b991      	cbnz	r1, 10009130 <_malloc_r+0x54>
1000910a:	4c20      	ldr	r4, [pc, #128]	; (1000918c <_malloc_r+0xb0>)
1000910c:	6823      	ldr	r3, [r4, #0]
1000910e:	b91b      	cbnz	r3, 10009118 <_malloc_r+0x3c>
10009110:	4630      	mov	r0, r6
10009112:	f000 f83d 	bl	10009190 <_sbrk_r>
10009116:	6020      	str	r0, [r4, #0]
10009118:	4629      	mov	r1, r5
1000911a:	4630      	mov	r0, r6
1000911c:	f000 f838 	bl	10009190 <_sbrk_r>
10009120:	1c43      	adds	r3, r0, #1
10009122:	d124      	bne.n	1000916e <_malloc_r+0x92>
10009124:	230c      	movs	r3, #12
10009126:	6033      	str	r3, [r6, #0]
10009128:	4630      	mov	r0, r6
1000912a:	f000 f8dc 	bl	100092e6 <__malloc_unlock>
1000912e:	e7e4      	b.n	100090fa <_malloc_r+0x1e>
10009130:	680b      	ldr	r3, [r1, #0]
10009132:	1b5b      	subs	r3, r3, r5
10009134:	d418      	bmi.n	10009168 <_malloc_r+0x8c>
10009136:	2b0b      	cmp	r3, #11
10009138:	d90f      	bls.n	1000915a <_malloc_r+0x7e>
1000913a:	600b      	str	r3, [r1, #0]
1000913c:	50cd      	str	r5, [r1, r3]
1000913e:	18cc      	adds	r4, r1, r3
10009140:	4630      	mov	r0, r6
10009142:	f000 f8d0 	bl	100092e6 <__malloc_unlock>
10009146:	f104 000b 	add.w	r0, r4, #11
1000914a:	1d23      	adds	r3, r4, #4
1000914c:	f020 0007 	bic.w	r0, r0, #7
10009150:	1ac3      	subs	r3, r0, r3
10009152:	d0d3      	beq.n	100090fc <_malloc_r+0x20>
10009154:	425a      	negs	r2, r3
10009156:	50e2      	str	r2, [r4, r3]
10009158:	e7d0      	b.n	100090fc <_malloc_r+0x20>
1000915a:	428c      	cmp	r4, r1
1000915c:	684b      	ldr	r3, [r1, #4]
1000915e:	bf16      	itet	ne
10009160:	6063      	strne	r3, [r4, #4]
10009162:	6013      	streq	r3, [r2, #0]
10009164:	460c      	movne	r4, r1
10009166:	e7eb      	b.n	10009140 <_malloc_r+0x64>
10009168:	460c      	mov	r4, r1
1000916a:	6849      	ldr	r1, [r1, #4]
1000916c:	e7cc      	b.n	10009108 <_malloc_r+0x2c>
1000916e:	1cc4      	adds	r4, r0, #3
10009170:	f024 0403 	bic.w	r4, r4, #3
10009174:	42a0      	cmp	r0, r4
10009176:	d005      	beq.n	10009184 <_malloc_r+0xa8>
10009178:	1a21      	subs	r1, r4, r0
1000917a:	4630      	mov	r0, r6
1000917c:	f000 f808 	bl	10009190 <_sbrk_r>
10009180:	3001      	adds	r0, #1
10009182:	d0cf      	beq.n	10009124 <_malloc_r+0x48>
10009184:	6025      	str	r5, [r4, #0]
10009186:	e7db      	b.n	10009140 <_malloc_r+0x64>
10009188:	1002199c 	.word	0x1002199c
1000918c:	100219a0 	.word	0x100219a0

10009190 <_sbrk_r>:
10009190:	b538      	push	{r3, r4, r5, lr}
10009192:	4c06      	ldr	r4, [pc, #24]	; (100091ac <_sbrk_r+0x1c>)
10009194:	2300      	movs	r3, #0
10009196:	4605      	mov	r5, r0
10009198:	4608      	mov	r0, r1
1000919a:	6023      	str	r3, [r4, #0]
1000919c:	f7f7 fa42 	bl	10000624 <_sbrk>
100091a0:	1c43      	adds	r3, r0, #1
100091a2:	d102      	bne.n	100091aa <_sbrk_r+0x1a>
100091a4:	6823      	ldr	r3, [r4, #0]
100091a6:	b103      	cbz	r3, 100091aa <_sbrk_r+0x1a>
100091a8:	602b      	str	r3, [r5, #0]
100091aa:	bd38      	pop	{r3, r4, r5, pc}
100091ac:	10021a84 	.word	0x10021a84

100091b0 <__sread>:
100091b0:	b510      	push	{r4, lr}
100091b2:	460c      	mov	r4, r1
100091b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
100091b8:	f000 f896 	bl	100092e8 <_read_r>
100091bc:	2800      	cmp	r0, #0
100091be:	bfab      	itete	ge
100091c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
100091c2:	89a3      	ldrhlt	r3, [r4, #12]
100091c4:	181b      	addge	r3, r3, r0
100091c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
100091ca:	bfac      	ite	ge
100091cc:	6563      	strge	r3, [r4, #84]	; 0x54
100091ce:	81a3      	strhlt	r3, [r4, #12]
100091d0:	bd10      	pop	{r4, pc}

100091d2 <__swrite>:
100091d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
100091d6:	461f      	mov	r7, r3
100091d8:	898b      	ldrh	r3, [r1, #12]
100091da:	05db      	lsls	r3, r3, #23
100091dc:	4605      	mov	r5, r0
100091de:	460c      	mov	r4, r1
100091e0:	4616      	mov	r6, r2
100091e2:	d505      	bpl.n	100091f0 <__swrite+0x1e>
100091e4:	2302      	movs	r3, #2
100091e6:	2200      	movs	r2, #0
100091e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
100091ec:	f000 f868 	bl	100092c0 <_lseek_r>
100091f0:	89a3      	ldrh	r3, [r4, #12]
100091f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
100091f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
100091fa:	81a3      	strh	r3, [r4, #12]
100091fc:	4632      	mov	r2, r6
100091fe:	463b      	mov	r3, r7
10009200:	4628      	mov	r0, r5
10009202:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
10009206:	f000 b817 	b.w	10009238 <_write_r>

1000920a <__sseek>:
1000920a:	b510      	push	{r4, lr}
1000920c:	460c      	mov	r4, r1
1000920e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
10009212:	f000 f855 	bl	100092c0 <_lseek_r>
10009216:	1c43      	adds	r3, r0, #1
10009218:	89a3      	ldrh	r3, [r4, #12]
1000921a:	bf15      	itete	ne
1000921c:	6560      	strne	r0, [r4, #84]	; 0x54
1000921e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
10009222:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
10009226:	81a3      	strheq	r3, [r4, #12]
10009228:	bf18      	it	ne
1000922a:	81a3      	strhne	r3, [r4, #12]
1000922c:	bd10      	pop	{r4, pc}

1000922e <__sclose>:
1000922e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
10009232:	f000 b813 	b.w	1000925c <_close_r>
	...

10009238 <_write_r>:
10009238:	b538      	push	{r3, r4, r5, lr}
1000923a:	4c07      	ldr	r4, [pc, #28]	; (10009258 <_write_r+0x20>)
1000923c:	4605      	mov	r5, r0
1000923e:	4608      	mov	r0, r1
10009240:	4611      	mov	r1, r2
10009242:	2200      	movs	r2, #0
10009244:	6022      	str	r2, [r4, #0]
10009246:	461a      	mov	r2, r3
10009248:	f7f7 f99c 	bl	10000584 <_write>
1000924c:	1c43      	adds	r3, r0, #1
1000924e:	d102      	bne.n	10009256 <_write_r+0x1e>
10009250:	6823      	ldr	r3, [r4, #0]
10009252:	b103      	cbz	r3, 10009256 <_write_r+0x1e>
10009254:	602b      	str	r3, [r5, #0]
10009256:	bd38      	pop	{r3, r4, r5, pc}
10009258:	10021a84 	.word	0x10021a84

1000925c <_close_r>:
1000925c:	b538      	push	{r3, r4, r5, lr}
1000925e:	4c06      	ldr	r4, [pc, #24]	; (10009278 <_close_r+0x1c>)
10009260:	2300      	movs	r3, #0
10009262:	4605      	mov	r5, r0
10009264:	4608      	mov	r0, r1
10009266:	6023      	str	r3, [r4, #0]
10009268:	f7f7 f9a8 	bl	100005bc <_close>
1000926c:	1c43      	adds	r3, r0, #1
1000926e:	d102      	bne.n	10009276 <_close_r+0x1a>
10009270:	6823      	ldr	r3, [r4, #0]
10009272:	b103      	cbz	r3, 10009276 <_close_r+0x1a>
10009274:	602b      	str	r3, [r5, #0]
10009276:	bd38      	pop	{r3, r4, r5, pc}
10009278:	10021a84 	.word	0x10021a84

1000927c <_fstat_r>:
1000927c:	b538      	push	{r3, r4, r5, lr}
1000927e:	4c07      	ldr	r4, [pc, #28]	; (1000929c <_fstat_r+0x20>)
10009280:	2300      	movs	r3, #0
10009282:	4605      	mov	r5, r0
10009284:	4608      	mov	r0, r1
10009286:	4611      	mov	r1, r2
10009288:	6023      	str	r3, [r4, #0]
1000928a:	f7f7 f9a3 	bl	100005d4 <_fstat>
1000928e:	1c43      	adds	r3, r0, #1
10009290:	d102      	bne.n	10009298 <_fstat_r+0x1c>
10009292:	6823      	ldr	r3, [r4, #0]
10009294:	b103      	cbz	r3, 10009298 <_fstat_r+0x1c>
10009296:	602b      	str	r3, [r5, #0]
10009298:	bd38      	pop	{r3, r4, r5, pc}
1000929a:	bf00      	nop
1000929c:	10021a84 	.word	0x10021a84

100092a0 <_isatty_r>:
100092a0:	b538      	push	{r3, r4, r5, lr}
100092a2:	4c06      	ldr	r4, [pc, #24]	; (100092bc <_isatty_r+0x1c>)
100092a4:	2300      	movs	r3, #0
100092a6:	4605      	mov	r5, r0
100092a8:	4608      	mov	r0, r1
100092aa:	6023      	str	r3, [r4, #0]
100092ac:	f7f7 f9a2 	bl	100005f4 <_isatty>
100092b0:	1c43      	adds	r3, r0, #1
100092b2:	d102      	bne.n	100092ba <_isatty_r+0x1a>
100092b4:	6823      	ldr	r3, [r4, #0]
100092b6:	b103      	cbz	r3, 100092ba <_isatty_r+0x1a>
100092b8:	602b      	str	r3, [r5, #0]
100092ba:	bd38      	pop	{r3, r4, r5, pc}
100092bc:	10021a84 	.word	0x10021a84

100092c0 <_lseek_r>:
100092c0:	b538      	push	{r3, r4, r5, lr}
100092c2:	4c07      	ldr	r4, [pc, #28]	; (100092e0 <_lseek_r+0x20>)
100092c4:	4605      	mov	r5, r0
100092c6:	4608      	mov	r0, r1
100092c8:	4611      	mov	r1, r2
100092ca:	2200      	movs	r2, #0
100092cc:	6022      	str	r2, [r4, #0]
100092ce:	461a      	mov	r2, r3
100092d0:	f7f7 f99b 	bl	1000060a <_lseek>
100092d4:	1c43      	adds	r3, r0, #1
100092d6:	d102      	bne.n	100092de <_lseek_r+0x1e>
100092d8:	6823      	ldr	r3, [r4, #0]
100092da:	b103      	cbz	r3, 100092de <_lseek_r+0x1e>
100092dc:	602b      	str	r3, [r5, #0]
100092de:	bd38      	pop	{r3, r4, r5, pc}
100092e0:	10021a84 	.word	0x10021a84

100092e4 <__malloc_lock>:
100092e4:	4770      	bx	lr

100092e6 <__malloc_unlock>:
100092e6:	4770      	bx	lr

100092e8 <_read_r>:
100092e8:	b538      	push	{r3, r4, r5, lr}
100092ea:	4c07      	ldr	r4, [pc, #28]	; (10009308 <_read_r+0x20>)
100092ec:	4605      	mov	r5, r0
100092ee:	4608      	mov	r0, r1
100092f0:	4611      	mov	r1, r2
100092f2:	2200      	movs	r2, #0
100092f4:	6022      	str	r2, [r4, #0]
100092f6:	461a      	mov	r2, r3
100092f8:	f7f7 f927 	bl	1000054a <_read>
100092fc:	1c43      	adds	r3, r0, #1
100092fe:	d102      	bne.n	10009306 <_read_r+0x1e>
10009300:	6823      	ldr	r3, [r4, #0]
10009302:	b103      	cbz	r3, 10009306 <_read_r+0x1e>
10009304:	602b      	str	r3, [r5, #0]
10009306:	bd38      	pop	{r3, r4, r5, pc}
10009308:	10021a84 	.word	0x10021a84

1000930c <_init>:
1000930c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000930e:	bf00      	nop
10009310:	bcf8      	pop	{r3, r4, r5, r6, r7}
10009312:	bc08      	pop	{r3}
10009314:	469e      	mov	lr, r3
10009316:	4770      	bx	lr

10009318 <_fini>:
10009318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000931a:	bf00      	nop
1000931c:	bcf8      	pop	{r3, r4, r5, r6, r7}
1000931e:	bc08      	pop	{r3}
10009320:	469e      	mov	lr, r3
10009322:	4770      	bx	lr

Disassembly of section .startup_copro_fw.Reset_Handler:

10009324 <Reset_Handler>:
  ldr   sp, =_estack      /* set stack pointer */
10009324:	f8df d034 	ldr.w	sp, [pc, #52]	; 1000935c <LoopForever+0x2>
  movs  r1, #0
10009328:	2100      	movs	r1, #0
  b  LoopCopyDataInit
1000932a:	e003      	b.n	10009334 <LoopCopyDataInit>

1000932c <CopyDataInit>:
  ldr  r3, =_sidata
1000932c:	4b0c      	ldr	r3, [pc, #48]	; (10009360 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
1000932e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
10009330:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
10009332:	3104      	adds	r1, #4

10009334 <LoopCopyDataInit>:
  ldr  r0, =_sdata
10009334:	480b      	ldr	r0, [pc, #44]	; (10009364 <LoopForever+0xa>)
  ldr  r3, =_edata
10009336:	4b0c      	ldr	r3, [pc, #48]	; (10009368 <LoopForever+0xe>)
  adds  r2, r0, r1
10009338:	1842      	adds	r2, r0, r1
  cmp  r2, r3
1000933a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
1000933c:	d3f6      	bcc.n	1000932c <CopyDataInit>
  ldr  r2, =_sbss
1000933e:	4a0b      	ldr	r2, [pc, #44]	; (1000936c <LoopForever+0x12>)
  b  LoopFillZerobss
10009340:	e002      	b.n	10009348 <LoopFillZerobss>

10009342 <FillZerobss>:
  movs  r3, #0
10009342:	2300      	movs	r3, #0
  str  r3, [r2], #4
10009344:	f842 3b04 	str.w	r3, [r2], #4

10009348 <LoopFillZerobss>:
  ldr  r3, = _ebss
10009348:	4b09      	ldr	r3, [pc, #36]	; (10009370 <LoopForever+0x16>)
  cmp  r2, r3
1000934a:	429a      	cmp	r2, r3
  bcc  FillZerobss
1000934c:	d3f9      	bcc.n	10009342 <FillZerobss>
  bl  SystemInit
1000934e:	f7f6 fe77 	bl	10000040 <SystemInit>
 bl __libc_init_array
10009352:	f7ff fb3b 	bl	100089cc <__libc_init_array>
  bl main
10009356:	f7f6 fe99 	bl	1000008c <main>

1000935a <LoopForever>:
    b LoopForever
1000935a:	e7fe      	b.n	1000935a <LoopForever>
  ldr   sp, =_estack      /* set stack pointer */
1000935c:	10040000 	.word	0x10040000
  ldr  r3, =_sidata
10009360:	10009480 	.word	0x10009480
  ldr  r0, =_sdata
10009364:	10020000 	.word	0x10020000
  ldr  r3, =_edata
10009368:	10020074 	.word	0x10020074
  ldr  r2, =_sbss
1000936c:	10020074 	.word	0x10020074
  ldr  r3, = _ebss
10009370:	10021a88 	.word	0x10021a88
